<?xml version="1.0"?>
<project name="kmm" default="dist-local" basedir=".">
	<target name="dist-local" if="is.local.build" depends="init,make-source,conf-expand-properties-local, filter-local" description="Prepare local configuration files and tokenized resources and deploy tomcat context file on development workstation">
		<copy todir="${appserver.localhost.dir}">
			<fileset dir="${build.metainf.directory}">
				<different targetdir="${appserver.localhost.dir}">
					<mapper type="glob" from="${context.file}" to="${ant.project.name}-${build.environment}.xml"/>
				</different>
			</fileset>
			<globmapper from="${context.file}" to="${ant.project.name}-${build.environment}.xml"/>
		</copy>
	</target>
	
	<target name="test-local" depends="make-tests, test" description="Run all unit tests and format results" />

	<target name="dist-war" depends="init,make-source" description="Builds the war file for external deployment.">
		<mkdir dir="${dist.directory}"/>
		<jar jarfile="${dist.directory}/${ant.project.name}-${build.environment}.war" basedir="${build.web.directory}" compress="false" />
	</target>
	<target name="dist-msu-war" depends="init,make-source" description="Builds the war file for external deployment.">
			<jar jarfile="${ant.project.name}-${build.environment}.war" basedir="." compress="false" />
	</target>
	
	<target name="dist-web" depends="init">
		<copy todir="${build.web.directory}">
			<fileset dir="${web.directory}" 
				excludes="
				**/${web.file},
				**/*.jar				
			"/>
		</copy>
	</target>

	<target name="make-source" depends="init,conf-expand-properties-project">
		<javac destdir="${build.classes.directory}" target="${jdk.target}" bootclasspath="${bootclass.jdk.runtime}" srcdir="${source.classes.directory}" debug="true" nowarn="true" optimize="true" fork="true" memoryinitialsize="${compile.min.memory}" memorymaximumsize="${compile.max.memory}">
			<classpath refid="compile.source.classpath" />
		</javac>
		<copy todir="${build.classes.directory}">
			<fileset dir="${source.classes.directory}" includes="${non.java.resources}" />
		</copy>
	</target>
	
	<target name="make-tests" depends="init-make-references,conf-expand-properties-local">
			<mkdir dir="${test.classes.directory}" />
			<javac destdir="${test.classes.directory}" target="${jdk.target}" bootclasspath="${bootclass.jdk.runtime}"  debug="true" nowarn="true" optimize="true" fork="true" memoryinitialsize="${compile.min.memory}" memorymaximumsize="${compile.max.memory}">
				<classpath refid="compile.tests.classpath" />
				<src path="${source.classes.directory}" />
				<src path="${test.infrastructure.source.directory}" />
				<src path="${test.unit.source.directory}" />
				<src path="${test.integration.source.directory}" />
			</javac>
			<copy todir="${test.classes.directory}">
				<fileset dir="${test.infrastructure.source.directory}" includes="${tests.non.java.resources}" />
				<fileset dir="${test.unit.source.directory}" includes="${tests.non.java.resources}" />
				<fileset dir="${test.integration.source.directory}" includes="${tests.non.java.resources}" />
			</copy>
			<copy todir="${test.classes.directory}">
				<fileset dir="${source.classes.directory}" includes="${non.java.resources}" />
			</copy>
			<echo file="${test.classes.directory}/${p6spy.file}" message="${p6spy}" />
			<echo file="${test.classes.directory}/configuration-locations.xml" message="${configuration.locations}" />
			<echo file="${test.classes.directory}/configurationServiceData.xml" message="${configuration.service.data}" />
			<echo file="${test.classes.directory}/${configuration.file}" message="${configuration}" />
			<copy todir="${test.classes.directory}">
				<fileset dir="${source.configuration.project.directory}"/>
			</copy>
	</target>
	
	<target name="test">
		<mkdir dir="${all.temp.directory}" />
		<mkdir dir="${test.xml.results.directory}" />
<!--		<junit showoutput="true" fork="true" forkmode="once" failureproperty="tests.failed" errorproperty="tests.errored" tempdir="${all.temp.directory}" >
			<jvmarg value="-Xms${run.tests.min.memory}" />
			<jvmarg value="-Xmx${run.tests.max.memory}" />
			<jvmarg value="-XX:MaxPermSize=${run.tests.max.permsize}" />
			<classpath refid="run.tests.classpath" />
			<test name="org.kuali.ext.mm.context.${tests.startup.class}" todir="${test.xml.results.directory}" />
		</junit> -->
		<junit showoutput="true" fork="true" forkmode="once" failureproperty="tests.failed" errorproperty="tests.errored" tempdir="${all.temp.directory}" >
			<jvmarg value="-DKualiTestBase.skipOpenOrInProgressOrReopenedJiraIssues" />
			<jvmarg value="-Xms${run.tests.min.memory}" />
			<jvmarg value="-Xmx${run.tests.max.memory}" />
			<jvmarg value="-XX:MaxPermSize=${run.tests.max.permsize}" />
			<classpath refid="run.tests.classpath" />
			<formatter type="xml" />
			<batchtest todir="${test.xml.results.directory}">
				<fileset dir="${test.unit.source.directory}">
					<include name="${tests.includes}" />
				</fileset>
				<fileset dir="${test.integration.source.directory}">
					<include name="${tests.includes}" />
				</fileset>
			</batchtest>
<!--	test		<test name="org.kuali.kfs.sys.context.${tests.shutdown.class}" todir="${test.xml.results.directory}" />-->
		</junit>
		<mkdir dir="${test.html.results.directory}" />
		<junitreport todir="${test.html.results.directory}">
			<fileset dir="${test.xml.results.directory}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${test.html.results.directory}" />
		</junitreport>
		<delete dir="${all.temp.directory}" failonerror="false" />
		<echo message="Generated test results: ${test.html.results.directory}/index.html" />
	</target>
	
	<target name="init-make-references" depends="init">
			<path id="compile.source.classpath">
				<fileset dir="${appserver.lib.dir}" includes="*.jar" />
				<fileset dir="${web.lib.directory}" includes="*.jar" />
			</path>
			<path id="compile.tests.classpath">
				<path refid="compile.source.classpath" />
				<fileset dir="${test.lib.directory}" includes="*.jar" />
			</path>
			<!-- the test classes must come first so they can override classes as necessary in
			     the loaded libraries -->
			<path id="run.tests.classpath">
				<pathelement location="${test.classes.directory}" />
				<path refid="compile.tests.classpath" />
			</path>
	</target>
	
	<target name="clean" depends="init,clean-local" description="Deletes files related to various deployment methods.">
		<delete dir="${build.web.directory}"/>
		<delete dir="${build.test.directory}"/>
		<delete dir="${dist.directory}"/>
	</target>
	
	<target name="clean-local" if="is.local.build" depends="init">
		<delete dir="${external.configuration.directory}"/>
		<delete dir="${external.log.directory}"/>
		<delete dir="${external.security.directory}"/>
		<delete dir="${external.work.directory}"/>
		<delete dir="${external.attachments.directory}"/>
		<delete dir="${external.reports.directory}"/>
		<delete dir="${external.staging.directory}"/>
		<delete dir="${external.temp.directory}"/>
		<delete file="${appserver.localhost.dir}/${ant.project.name}-${build.environment}.xml" failonerror="false"/>
	</target>
	
	<target name="setup-build-directory" depends="init">
		<unzip dest="${build.web.directory}" src="${source.static.directory}/${rice.web.zip}" />
		<mkdir dir="${build.classes.directory}"/>
		<mkdir dir="${build.lib.directory}"/>		
		<copy todir="${build.web.directory}">
			<fileset dir="${web.directory}" 
				excludes="
					**/${web.file}
			"/>
		</copy>
		<copy todir="${build.classes.directory}">
			<fileset dir="${source.configuration.project.directory}"/>
		</copy>		
	</target>	
	
	<target name="setup-external-directory" depends="init">
		<mkdir dir="${external.directory}"/>
		<mkdir dir="${external.configuration.directory}"/>
		<mkdir dir="${external.log.directory}"/>
		<mkdir dir="${external.security.directory}"/>
		<mkdir dir="${external.work.directory}"/>
		<mkdir dir="${external.attachments.directory}"/>
		<mkdir dir="${external.reports.directory}"/>
		<mkdir dir="${external.staging.directory}"/>
		<mkdir dir="${external.temp.directory}"/>
		<copy todir="${external.reports.directory}">
					<fileset dir="${source.configuration.external.template.directory}" />
		</copy>
	</target>
	
	<target name="init" depends="init-properties"/>
	
	<target name="init-property-files">
		<property name="build.properties.file" value="${user.home}/${ant.project.name}-build.properties" />
		<property file="${build.properties.file}"/>
		<property file="build.properties" />
	</target>
	
	<target name="init-properties" depends="init-property-files">
		<tstamp><format property="build.version" pattern="MM/dd/yyyy hh:mm aa" /></tstamp>
		<condition property="context.docbase" value=' docBase="${basedir}${file.separator}${build.web.directory}"'><equals arg1="${is.local.build}" arg2="true" /></condition>
		<property name="context.docbase" value="" />
		
		<condition property="use.p6spy.local">
			<and>
				<equals arg1="${is.local.build}" arg2="true" />
				<equals arg1="${use.p6spy}" arg2="true" />
			</and>
		</condition>
		<condition property="datasource.driver.name" value="${p6spy.driver.name}">
			<equals arg1="${use.p6spy.local}" arg2="true"/>
		</condition>
		<property name="datasource.driver.name" value="${oracle.driver.name}" />
		<property name="p6spy.real.driver.name" value="${oracle.driver.name}" />
		
		<condition property="use.quartz.jdbc.jobstore" value="false"><equals arg1="${is.local.build}" arg2="true" /></condition>
		<property name="use.quartz.jdbc.jobstore" value="true" />
		
		<condition property="rice.dev.mode" value="true"><equals arg1="${is.local.build}" arg2="true" /></condition>
		<property name="rice.dev.mode" value="false" />
		
		<condition property="rice.message.persistence" value="false"><equals arg1="${is.local.build}" arg2="true" /></condition>
		<property name="rice.message.persistence" value="true" />
		
		<condition property="rice.use.quartz.database" value="true">
			<and>
				<not><equals arg1="${use.quartz.scheduling}" arg2="true" /></not>
				<not><equals arg1="${is.local.build}" arg2="true" /></not>
			</and>
		</condition>
		<property name="rice.use.quartz.database" value="false" />
		<condition property="rice.exception.routing.immediate" value="true"><equals arg1="${use.quartz.scheduling}" arg2="false" /></condition>
		<property name="rice.exception.routing.immediate" value="false" />
		
		<loadfile property="p6spy" srcfile="${source.configuration.external.directory}/${p6spy.file}"><filterchain><expandproperties/></filterchain></loadfile>
		<loadfile property="web" srcfile="${web.webinf.directory}/${web.file}"><filterchain><expandproperties/></filterchain></loadfile>
		<loadfile property="context" srcfile="${source.configuration.external.server.directory}/${context.file}"><filterchain><expandproperties/></filterchain></loadfile>
		<loadfile property="log4j" srcfile="${source.configuration.external.directory}/${log4j.file}"><filterchain><expandproperties/></filterchain></loadfile>
		<loadfile property="security" srcfile="${source.configuration.external.directory}/${security.file}"><filterchain><expandproperties/></filterchain></loadfile>
		<loadfile property="keystore" srcfile="${source.configuration.external.directory}/${keystore.file}"><filterchain><expandproperties/></filterchain></loadfile>
		<loadfile property="configuration" srcfile="${source.configuration.directory}/${configuration.file}"><filterchain><expandproperties/></filterchain></loadfile>
		<loadfile property="configuration.locations" srcfile="${source.configuration.directory}/configuration-locations.xml"><filterchain><expandproperties/></filterchain></loadfile>
		<loadfile property="configuration.service.data" srcfile="${source.configuration.directory}/configurationServiceData.xml"><filterchain><expandproperties/></filterchain></loadfile>
		<!-- Path IDs -->
		<path id="compile.source.classpath">
			<fileset dir="${appserver.lib.dir}" includes="*.jar" />
			<fileset dir="${web.lib.directory}" includes="*.jar" />
		</path>
	</target>
	
	<target name="conf-expand-properties-project" depends="init,setup-build-directory">
		<mkdir dir="${build.classes.directory}" />
		<echo file="${build.classes.directory}/${p6spy.file}" message="${p6spy}" />
		<echo file="${build.webinf.directory}/${web.file}" message="${web}" />
		<!-- Comment out the following line for Deployment of War 		
		<echo file="${build.metainf.directory}/${context.file}" message="${context}" />
		--> 
		
		<echo file="${build.classes.directory}/configuration-locations.xml" message="${configuration.locations}" />
		<echo file="${build.classes.directory}/configurationServiceData.xml" message="${configuration.service.data}" />
		<echo file="${build.classes.directory}/${configuration.file}" message="${configuration}" />
	</target>
	
	<target name="conf-expand-properties-local" if="is.local.build" depends="init,conf-expand-properties-project,setup-external-directory">
		<echo file="${external.configuration.directory}/${log4j.file}" message="${log4j}" />
		<echo file="${external.configuration.directory}/${configuration.file}" message="${configuration}" />
		<echo file="${external.security.directory}/${security.file}" message="${security}" />
		<echo file="${external.security.directory}/${keystore.file}" message="${keystore}" />
		<echo file="${external.log.directory}/${ant.project.name}.log" message="" />
	</target>
	
	<target name="filter-local" if="is.local.build" depends="init">
		<copy todir="${appserver.lib.dir}" overwrite="true">
			<fileset dir="${source.configuration.external.server.directory}" includes="*.jar" />
		</copy>
		<copy todir="${appserver.lib.dir}" overwrite="true">
			<fileset dir="${drivers.directory}" />
		</copy>
		<copy file="${source.configuration.external.directory}/${keystore.file}" tofile="${external.security.directory}/${keystore.file}"/>
	</target>
	
	<target name="echoprops" depends="init">
		<echoproperties/>
	</target>

	<target name="deploy" depends="dist-war">
	   <scp file="${deploy.file}" todir="${deploy.todir}" passphrase="${deploy.passphrase}" keyfile="${deploy.keyfile}" verbose="true" trust="true" />
	   <scp file="${external.security.directory}/${security.file}" todir="${deploy.security.dir}" passphrase="${deploy.passphrase}" keyfile="${deploy.keyfile}" verbose="true" trust="true" />
		<scp file="${external.security.directory}/${keystore.file}" todir="${deploy.security.dir}" passphrase="${deploy.passphrase}" keyfile="${deploy.keyfile}" verbose="true" trust="true" />
	</target>

</project>