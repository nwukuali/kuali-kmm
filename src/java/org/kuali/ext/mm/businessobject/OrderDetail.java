package org.kuali.ext.mm.businessobject;

// Generated May 19, 2009 9:29:05 AM by Hibernate Tools 3.2.4.GA

import java.sql.Date;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import org.apache.cxf.common.util.StringUtils;
import org.kuali.ext.mm.common.sys.MMConstants;
import org.kuali.ext.mm.common.sys.context.SpringContext;
import org.kuali.ext.mm.document.CheckinDocument;
import org.kuali.ext.mm.document.OrderDocument;
import org.kuali.ext.mm.document.ReturnDocument;
import org.kuali.ext.mm.service.OrderService;
import org.kuali.ext.mm.util.MMDecimal;
import org.kuali.ext.mm.util.MMUtil;
import org.kuali.rice.kew.exception.WorkflowException;
import org.kuali.rice.kns.document.Document;
import org.kuali.rice.kns.service.BusinessObjectService;
import org.kuali.rice.kns.service.KNSServiceLocator;
import org.kuali.rice.kns.util.KualiDecimal;
import org.kuali.rice.kns.util.ObjectUtils;
import org.kuali.rice.kns.util.TransactionalServiceUtils;


/**
 * OrderDetail generated by hbm2java
 */
@Entity
@Table(name = "MM_ORDER_DETAIL_T")
public class OrderDetail extends StoresPersistableBusinessObject implements Cloneable {
    private static final long serialVersionUID = -6647798342263287884L;
    @Id
    @Column(name = "ORDER_DETAIL_ID", unique = true, nullable = false, length = 36)
    private Integer orderDetailId;
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "ORDER_DOC_NBR", nullable = false)
    private OrderDocument orderDocument;
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "ORDER_DETAIL_STATUS_CD", nullable = false)
    private OrderStatus orderStatus;
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "SALES_INSTANCE_ID", nullable = false)
    private SalesInstance salesInstance;
    @JoinColumn(name = "SHOP_CART_DETAIL_ID")
    private String shoppingCartDetailId;

    private Integer orderId;

    private Integer itemLineNumber;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "STOCK_UNIT_OF_ISSUE_CD", nullable = false)
    private UnitOfIssue stockUnitOfIssue;

    @Column(name = "CATALOG_ITEM_ID")
    private CatalogItem catalogItem;

    // BEGIN OJB
    @Column(name = "ORDER_DOC_NBR")
    private String orderDocumentNbr;

    @Column(name = "SALES_INSTANCE_ID")
    private Integer salesInstanceId;

    private String vendorShipmentNumber = null;

    private MMDecimal extendedCost = new MMDecimal(0);

    private String additionalCostTypeCode;

    private AdditionalCostType additionalCostType;

    @Column(name = "ORDER_DETAIL_STATUS_CD")
    private String orderStatusCd;

    @Column(name = "STOCK_UNIT_OF_ISSUE_CD", nullable = false, length = 10)
    private String stockUnitOfIssueCd;

    @Column(name = "CATALOG_ITEM_ID", nullable = false, length = 12)
    private String catalogItemId;
    // END OJB

    @Column(name = "SHOP_CART_DOC_NBR", nullable = false, length = 36)
    private String shoppingCartId;

    @Column(name = "SHOP_CART_LINE_NBR", nullable = false, precision = 8, scale = 0)
    private Integer shopCartLineNbr;

    @Column(name = "ORDER_ITEM_QTY", nullable = false, precision = 11, scale = 4)
    private Integer orderItemQty = new Integer(0);

    @Column(name = "ORDER_ITEM_COST_AMT", nullable = false, scale = 4)
    private MMDecimal orderItemCostAmt = new MMDecimal(0);

    @Column(name = "ORDER_ITEM_ADDL_COST_AMT", nullable = false, scale = 4)
    private MMDecimal orderItemAdditionalCostAmt = new MMDecimal(0);

    @Column(name = "ORDER_ITEM_PRICE_AMT", nullable = false, scale = 4)
    private MMDecimal orderItemPriceAmt = new MMDecimal(0);

    @Column(name = "ORDER_ITEM_MARKUP_AMT", nullable = false, scale = 4)
    private MMDecimal orderItemMarkupAmt = new MMDecimal(0);

    @Column(name = "ORDER_ITEM_TAX_AMT", nullable = false, scale = 4)
    private MMDecimal orderItemTaxAmt = new MMDecimal(0);

    @Column(name = "ORDER_ITEM_DETAIL_DESC", nullable = false, length = 400)
    private String orderItemDetailDesc;

    @Column(name = "MANUFACTURER_NBR", nullable = false, length = 30)
    private String distributorNbr;

    @Column(name = "SHIPPING_WGT", precision = 8)
    private KualiDecimal shippingWgt;

    @Column(name = "SHIPPING_HT", precision = 8)
    private KualiDecimal shippingHt;

    @Column(name = "SHIPPING_WD", precision = 8)
    private KualiDecimal shippingWd;

    @Column(name = "SHIPPING_LH", precision = 8)
    private KualiDecimal shippingLh;

    @Column(name = "VENDOR_HEADER_GENERATED_ID", precision = 10, scale = 0)
    private Integer vendorHeaderGeneratedId;

    @Column(name = "VENDOR_DETAIL_ASSIGNED_ID", precision = 10, scale = 0)
    private Integer vendorDetailAssignedId;

    @Column(name = "VENDOR_NM", length = 45)
    private String vendorNm;

    @Column(name = "PO_ID", precision = 9, scale = 0)
    private Integer poId;

    private String sPaidId;

    private Date expectedDate;

    private boolean itemToBeRemoved;

    private MMCapitalAssetInformation capitalAssetInformation;

    private MMDecimal totalCost = new MMDecimal(0);

    @Column(name = "WILLCALL_IND")
    private boolean willCall;

    private List<CheckinDetail> checkinDetails = new ArrayList<CheckinDetail>(0);

    private List<ReturnDetail> returnDetails = new ArrayList<ReturnDetail>(0);

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "shoppingCart")
    private List<Accounts> accounts = new ArrayList<Accounts>();


    public OrderDetail() {
    }

    public Integer getOrderDetailId() {
        return this.orderDetailId;
    }

    public void setOrderDetailId(Integer orderDetailId) {
        this.orderDetailId = orderDetailId;
    }

    public OrderDocument getOrderDocument() {
        return this.orderDocument;
    }

    public void setOrderDocument(OrderDocument orderDocument) {
        this.orderDocument = orderDocument;
    }

    public void setCapitalAssetInformation(MMCapitalAssetInformation capitalAssetInformation) {
        this.capitalAssetInformation = capitalAssetInformation;
    }

    public MMCapitalAssetInformation getCapitalAssetInformation() {
        return capitalAssetInformation;
    }

    public OrderStatus getOrderStatus() {
        return this.orderStatus;
    }

    public Integer getOrderId() {
        return orderId;
    }

    public void setOrderId(Integer orderId) {
        this.orderId = orderId;
    }

    public void setOrderStatus(OrderStatus orderStatus) {
        this.orderStatus = orderStatus;
    }

    public SalesInstance getSalesInstance() {
        return this.salesInstance;
    }

    public void setSalesInstance(SalesInstance salesInstance) {
        this.salesInstance = salesInstance;
    }

    public void setExtendedCost(MMDecimal extendedCost) {
        this.extendedCost = extendedCost;
    }


    // BEGIN OJB

    public String getVendorShipmentNumber() {
        return vendorShipmentNumber;
    }

    public void setVendorShipmentNumber(String vendorShipmentNumber) {
        this.vendorShipmentNumber = vendorShipmentNumber;
    }

    private String vendorRefNumber = null;

    public String getVendorRefNumber() {
        return vendorRefNumber;
    }

    public void setVendorRefNumber(String vendorRefNumber) {
        this.vendorRefNumber = vendorRefNumber;
    }

    public AdditionalCostType getAdditionalCostType() {
        return this.additionalCostType;
    }

    public void setAdditionalCostType(AdditionalCostType additionalCostType) {
        this.additionalCostType = additionalCostType;
    }

    public String getAdditionalCostTypeCode() {
        return this.additionalCostTypeCode;
    }

    public void setAdditionalCostTypeCode(String additionalCostTypeCode) {
        this.additionalCostTypeCode = additionalCostTypeCode;
    }

    public String getOrderDocumentNbr() {
        return orderDocumentNbr;
    }

    public void setOrderDocumentNbr(String orderDocumentNbr) {
        this.orderDocumentNbr = orderDocumentNbr;
    }

    public Integer getSalesInstanceId() {
        return salesInstanceId;
    }

    public void setSalesInstanceId(Integer salesInstanceId) {
        this.salesInstanceId = salesInstanceId;
    }

    public String getOrderStatusCd() {
        return orderStatusCd;
    }

    public void setOrderStatusCd(String orderStatusCd) {
        this.orderStatusCd = orderStatusCd;
    }

    public String getStockUnitOfIssueCd() {
        return this.stockUnitOfIssueCd;
    }

    public void setStockUnitOfIssueCd(String stockUnitOfIssueCd) {
        this.stockUnitOfIssueCd = stockUnitOfIssueCd;
    }

    public Integer getShopCartLineNbr() {
        return this.shopCartLineNbr;
    }

    public void setShopCartLineNbr(Integer shopCartLineNbr) {
        this.shopCartLineNbr = shopCartLineNbr;
    }

    public String getCatalogItemId() {
        return this.catalogItemId;
    }

    public void setCatalogItemId(String catalogItemId) {
        this.catalogItemId = catalogItemId;
    }

    public Integer getOrderItemQty() {
        return this.orderItemQty;
    }

    public MMDecimal getExtendedCost() {
        if (this.orderItemQty != null && this.orderItemQty != 0 && this.orderItemCostAmt != null
                && this.orderItemCostAmt.isNonZero())
            extendedCost = this.orderItemCostAmt.multiply(new MMDecimal(this.orderItemQty));

        return extendedCost;
    }

    public MMDecimal getTotalCost() {
        totalCost = this.getExtendedCost().add(this.orderItemAdditionalCostAmt);
        return totalCost;
    }

    public void setTotalCost(MMDecimal totalCost) {
        this.totalCost = totalCost;
    }

    public void setOrderItemQty(Integer orderItemQty) {
        this.orderItemQty = orderItemQty;
    }

    public MMDecimal getOrderItemCostAmt() {
        return this.orderItemCostAmt;
    }

    public void setOrderItemCostAmt(MMDecimal orderItemCostAmt) {
        this.orderItemCostAmt = orderItemCostAmt;
    }

    public void setOrderItemAdditionalCostAmt(MMDecimal orderItemAdditionalCostAmt) {
        this.orderItemAdditionalCostAmt = orderItemAdditionalCostAmt;
    }

    public MMDecimal getOrderItemAdditionalCostAmt() {
        return orderItemAdditionalCostAmt;
    }

    public MMDecimal getOrderItemPriceAmt() {
        return this.orderItemPriceAmt;
    }

    public void setOrderItemPriceAmt(MMDecimal orderItemPriceAmt) {
        this.orderItemPriceAmt = orderItemPriceAmt;
    }

    public MMDecimal getOrderItemMarkupAmt() {
        return this.orderItemMarkupAmt;
    }

    public void setOrderItemMarkupAmt(MMDecimal orderItemMarkupAmt) {
        this.orderItemMarkupAmt = orderItemMarkupAmt;
    }

    public MMDecimal getOrderItemTaxAmt() {
        return this.orderItemTaxAmt;
    }

    public void setOrderItemTaxAmt(MMDecimal orderItemTaxAmt) {
        this.orderItemTaxAmt = orderItemTaxAmt;
    }

    public String getOrderItemDetailDesc() {
        return this.orderItemDetailDesc;
    }

    public String getShortOrderItemDetailDesc() {
        if (this.orderItemDetailDesc != null && this.orderItemDetailDesc.length() > 40) {
            return this.orderItemDetailDesc.substring(0, 40);
        }
        return this.orderItemDetailDesc;
    }

    public void setOrderItemDetailDesc(String orderItemDetailDesc) {
        this.orderItemDetailDesc = orderItemDetailDesc;
    }

    public KualiDecimal getShippingWgt() {
        return this.shippingWgt;
    }

    public void setShippingWgt(KualiDecimal shippingWgt) {
        this.shippingWgt = shippingWgt;
    }

    public KualiDecimal getShippingHt() {
        return this.shippingHt;
    }

    public void setShippingHt(KualiDecimal shippingHt) {
        this.shippingHt = shippingHt;
    }

    public KualiDecimal getShippingWd() {
        return this.shippingWd;
    }

    public void setShippingWd(KualiDecimal shippingWd) {
        this.shippingWd = shippingWd;
    }

    public KualiDecimal getShippingLh() {
        return this.shippingLh;
    }

    public void setShippingLh(KualiDecimal shippingLh) {
        this.shippingLh = shippingLh;
    }

    public Integer getVendorHeaderGeneratedId() {
        return this.vendorHeaderGeneratedId;
    }

    public void setVendorHeaderGeneratedId(Integer vendorHeaderGeneratedId) {
        this.vendorHeaderGeneratedId = vendorHeaderGeneratedId;
    }

    public Integer getVendorDetailAssignedId() {
        return this.vendorDetailAssignedId;
    }

    public void setVendorDetailAssignedId(Integer vendorDetailAssignedId) {
        this.vendorDetailAssignedId = vendorDetailAssignedId;
    }

    public String getVendorNm() {
        return this.vendorNm;
    }

    public void setVendorNm(String vendorNm) {
        this.vendorNm = vendorNm;
    }

    public Integer getPoId() {
        return this.poId;
    }

    public void setPoId(Integer poId) {
        this.poId = poId;
    }

    public void setSPaidId(String sPaidId) {
        this.sPaidId = sPaidId;
    }

    public String getSPaidId() {
        return sPaidId;
    }

    public String getShoppingCartDetailId() {
        return shoppingCartDetailId;
    }

    public void setShoppingCartDetailId(String shoppingCartDetailId) {
        this.shoppingCartDetailId = shoppingCartDetailId;
    }

    public void setWillCall(boolean willCall) {
        this.willCall = willCall;
    }

    public boolean isWillCall() {
        return willCall;
    }

    public void setCatalogItem(CatalogItem catalogItem) {
        this.catalogItem = catalogItem;
    }

    public CatalogItem getCatalogItem() {
        return catalogItem;
    }

    public void setStockUnitOfIssue(UnitOfIssue stockUnitOfIssue) {
        this.stockUnitOfIssue = stockUnitOfIssue;
    }

    public UnitOfIssue getStockUnitOfIssue() {
        return stockUnitOfIssue;
    }

    public List<CheckinDetail> getCheckinDetails() {
        ArrayList<CheckinDetail> checkinDetailsList = new ArrayList<CheckinDetail>();
        for (CheckinDetail detail : this.checkinDetails) {
            if (detail.getCheckinDoc().isFinalInd()) {
                checkinDetailsList.add(detail);
            }
        }
        return checkinDetailsList;
    }

    public void setCheckinDetails(List<CheckinDetail> checkinDetails) {
        this.checkinDetails = checkinDetails;
    }

    public List<ReturnDetail> getReturnDetails() {
        return returnDetails;
    }

    public void setReturnDetails(List<ReturnDetail> returnDetails) {
        this.returnDetails = returnDetails;
    }

    public void addReturnDetail(ReturnDetail returnDetail) {
        this.returnDetails.add(returnDetail);
    }

    public String getDistributorNbr() {
        return distributorNbr;
    }

    public void setDistributorNbr(String distributorNbr) {
        this.distributorNbr = distributorNbr;
    }

    public void setShoppingCartId(String shoppingCartId) {
        this.shoppingCartId = shoppingCartId;
    }

    public String getShoppingCartId() {
        return shoppingCartId;
    }

    public Integer getRemainingItemQuantity() {
        HashMap<String, Integer> fieldValues = new HashMap<String, Integer>();
        fieldValues.put("orderDetailId", getOrderDetailId());
        Collection<CheckInReceivable> matches = SpringContext.getBean(BusinessObjectService.class)
                .findMatching(CheckInReceivable.class, fieldValues);
        if (matches == null || matches.isEmpty()) {
            return 0;
        }
        CheckInReceivable first = TransactionalServiceUtils.retrieveFirstAndExhaustIterator(matches
                .iterator());

        return first.getOrderItemQty() - (first.getAcceptedItemQty() + first.getRejectedItemQty());
    }

    private OrderDocumentLookable orderDocumentLookable;

    public OrderDocumentLookable getOrderDocumentLookable() {
        return this.orderDocumentLookable;
    }

    public void setOrderDocumentLookable(OrderDocumentLookable orderDocumentLookable) {
        this.orderDocumentLookable = orderDocumentLookable;
    }

    public Integer getRemainingItemQuantityForDisplay() {
        return getRemainingItemQuantity() < 0 ? 0 : getRemainingItemQuantity();
    }

    public Integer getTotalReturnItemQuantity() {
        Integer totQty = new Integer(0);
        if (!MMUtil.isCollectionEmpty(this.returnDetails)) {
            for (ReturnDetail rdetail : this.returnDetails) {
                totQty += rdetail.getReturnQuantity().intValue();
            }
        }
        return totQty;
    }

    public boolean isLineCheckinable() {

        Integer totalQty = 0;

        List<CheckinDetail> cdetails = this.getCheckinDetails();

        for (CheckinDetail cdetail : cdetails) {
            if (cdetail.getCheckinDoc().isFinalInd()) {
                // Discard corrected checkin lines
                if (MMUtil.isCollectionEmpty(cdetail.getLineCorrections()))
                    totalQty += (cdetail.getAcceptedItemQty() != null ? cdetail
                            .getAcceptedItemQty() : 0)
                            + (cdetail.getRejectedItemQty() == null ? 0 : cdetail
                                    .getRejectedItemQty());
            }
        }

        return ((this.orderItemQty > totalQty));
    }

    public boolean isLineStatusCheckinable() {

        return (!StringUtils.isEmpty(this.getOrderStatusCd()) && (this.getOrderStatusCd()
                .equalsIgnoreCase(MMConstants.OrderStatus.ORDER_LINE_OPEN)
                || this.getOrderStatusCd().equalsIgnoreCase(
                        MMConstants.OrderStatus.ORDER_LINE_PRINTED) || this.getOrderStatusCd()
                .equalsIgnoreCase(MMConstants.OrderStatus.ORDER_LINE_RECEIVING)));
    }

    public boolean isOrderLineComplete() {
        return (!StringUtils.isEmpty(this.getOrderStatusCd()) && (this.getOrderStatusCd()
                .equalsIgnoreCase(MMConstants.OrderStatus.ORDER_LINE_COMPLETE) || this
                .getOrderStatusCd().equalsIgnoreCase(
                        MMConstants.OrderStatus.ORDER_LINE_RECEIVED_COMPLETE)));

    }

    /**
     * @return
     */
    public boolean isAllCheckinDocsFinal() {

        List<CheckinDocument> docs = this.orderDocument.getCheckinDocs();
        try {
            if (MMUtil.isCollectionEmpty(docs)) {
                return true;
            }

            for (CheckinDocument cdoc : docs) {
                if (KNSServiceLocator.getDocumentService().documentExists(cdoc.getDocumentNumber())) {
                    Document doc = KNSServiceLocator.getDocumentService().getByDocumentHeaderId(
                            cdoc.getDocumentNumber());
                    if (doc.getDocumentHeader().hasWorkflowDocument()) {
                        if (!doc.getDocumentHeader().getWorkflowDocument().stateIsFinal())
                            return false;
                    }
                }

            }
        }
        catch (WorkflowException e) {
            throw new RuntimeException(e);
        }
        return true;
    }

    public CheckinDocument getCurrentActiveCheckinDoc() {

        List<CheckinDocument> docs = this.orderDocument.getCheckinDocs();

        if (MMUtil.isCollectionEmpty(docs)) {
            return null;
        }
        try {
            for (CheckinDocument cdoc : docs) {
                if (KNSServiceLocator.getDocumentService().documentExists(cdoc.getDocumentNumber())) {
                    if (!cdoc.getDocumentHeader().hasWorkflowDocument()) {
                        cdoc = (CheckinDocument) KNSServiceLocator.getDocumentService()
                                .getByDocumentHeaderId(cdoc.getDocumentNumber());
                    }
                    if (cdoc.getDocumentHeader().hasWorkflowDocument()
                            && cdoc.getDocumentHeader().getWorkflowDocument().stateIsSaved()
                            || cdoc.getDocumentHeader().getWorkflowDocument().stateIsInitiated())
                        return cdoc;
                    continue;
                }
            }
        }
        catch (WorkflowException e) {
            throw new RuntimeException(e);
        }
        return null;
    }

    public ReturnDocument getCurrentActiveReturnDoc() {

        List<ReturnDocument> docs = this.orderDocument.getReturnDocs();

        if (MMUtil.isCollectionEmpty(docs)) {
            return null;
        }
        try {
            for (ReturnDocument cdoc : docs) {
                if (KNSServiceLocator.getDocumentService().documentExists(cdoc.getDocumentNumber())) {
                    if (!cdoc.getDocumentHeader().hasWorkflowDocument()) {
                        cdoc = (ReturnDocument) KNSServiceLocator.getDocumentService()
                                .getByDocumentHeaderId(cdoc.getDocumentNumber());
                    }

                    if (cdoc.getDocumentHeader().hasWorkflowDocument()
                            && cdoc.getDocumentHeader().getWorkflowDocument().stateIsSaved()
                            || cdoc.getDocumentHeader().getWorkflowDocument().stateIsInitiated())
                        return cdoc;
                    continue;
                }
            }
        }
        catch (WorkflowException e) {
            throw new RuntimeException(e);
        }
        return null;
    }

    public boolean isAllReturnDocsFinal() {

        List<ReturnDocument> docs = this.orderDocument.getReturnDocs();

        if (MMUtil.isCollectionEmpty(docs)) {
            return true;
        }
        try {
            for (ReturnDocument cdoc : docs) {
                if (KNSServiceLocator.getDocumentService().documentExists(cdoc.getDocumentNumber())) {
                    Document doc = null;
                    doc = KNSServiceLocator.getDocumentService().getByDocumentHeaderId(
                            cdoc.getDocumentNumber());
                    if (doc.getDocumentHeader().hasWorkflowDocument()) {
                        if (!doc.getDocumentHeader().getWorkflowDocument().stateIsFinal())
                            return false;
                    }
                }
            }
        }
        catch (WorkflowException e) {
            throw new RuntimeException(e);
        }
        return true;
    }


    public void setAccounts(List<Accounts> accounts) {
        this.accounts = accounts;
    }

    public List<Accounts> getAccounts() {
        return accounts;
    }


    @Override
    public OrderDetail clone() {
        try {
            return (OrderDetail) super.clone();
        }
        catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
    }

    public KualiDecimal getDetailTotal() {
        return SpringContext.getBean(OrderService.class).computeLineTotalWithTax(this);
    }

    public Double getDetailSubTotal() {
        return SpringContext.getBean(OrderService.class).computeLineTotal(this);
    }

    public KualiDecimal getDisplayTotal() {
        return SpringContext.getBean(OrderService.class).computeLineTotalWithTax(this);
    }

    public KualiDecimal getDisplaySubTotal() {
        return new KualiDecimal(getDetailSubTotal());
    }

    public Date getExpectedDate() {
        return this.expectedDate;
    }

    public void setExpectedDate(Date expectedDate) {
        this.expectedDate = expectedDate;
    }

    public boolean isItemToBeRemoved() {
        return this.itemToBeRemoved;
    }

    public void setItemToBeRemoved(boolean itemToBeRemoved) {
        this.itemToBeRemoved = itemToBeRemoved;
    }


    public boolean isLineReturnable() {
        HashMap<String, Integer> fieldValues = new HashMap<String, Integer>();
        fieldValues.put(MMConstants.OrderDetail.ORDER_DETAIL_ID, getOrderDetailId());
        Collection<OrderReturnDetail> matches = SpringContext.getBean(BusinessObjectService.class)
                .findMatching(OrderReturnDetail.class, fieldValues);
        if (!MMUtil.isCollectionEmpty(matches))
            return true;
        
        return false;
    }

    public KualiDecimal getBuyOrderQuantity() {
        if (ObjectUtils.isNotNull(this.catalogItem)
                && ObjectUtils.isNotNull(this.catalogItem.getStock())
                && this.catalogItem.getStock().getBuyUnitOfIssueRt() != null
                && this.orderItemQty != null) {
            MMDecimal buyUnitOfIssueRt = this.catalogItem.getStock().getBuyUnitOfIssueRt();

            return new KualiDecimal(this.orderItemQty.doubleValue()
                    / buyUnitOfIssueRt.doubleValue());
        }
        return new KualiDecimal(this.orderItemQty == null ? 0 : this.orderItemQty);
    }

    public KualiDecimal convertToSaleOrderQuantity(KualiDecimal quantity) {
        if (ObjectUtils.isNotNull(this.catalogItem)
                && ObjectUtils.isNotNull(this.catalogItem.getStock())
                && this.catalogItem.getStock().getBuyUnitOfIssueRt() != null && quantity != null) {
            MMDecimal buyUnitOfIssueRt = this.catalogItem.getStock().getBuyUnitOfIssueRt();
            return new KualiDecimal(quantity.doubleValue() * buyUnitOfIssueRt.doubleValue());
        }
        return quantity;
    }

    public String getBuyUnitOfIssueCd() {
        if (ObjectUtils.isNotNull(this.catalogItem)
                && ObjectUtils.isNotNull(this.catalogItem.getStock())) {
            return this.catalogItem.getStock().getBuyUnitOfIssueCd();
        }
        return getStockUnitOfIssueCd();
    }

    public MMDecimal getBuyItemCostAmount() {
        MMDecimal itemCostAmt = getOrderItemCostAmt();
        if (itemCostAmt != null && ObjectUtils.isNotNull(this.catalogItem)
                && ObjectUtils.isNotNull(this.catalogItem.getStock())
                && this.catalogItem.getStock().getBuyUnitOfIssueRt() != null) {
            MMDecimal buyUnitOfIssueRt = this.catalogItem.getStock().getBuyUnitOfIssueRt();
            return new MMDecimal(itemCostAmt.doubleValue() * buyUnitOfIssueRt.doubleValue());
        }
        return itemCostAmt;
    }

    public MMDecimal convertToSaleItemCostAmount(MMDecimal itemCostAmt) {
        if (itemCostAmt != null && ObjectUtils.isNotNull(this.catalogItem)
                && ObjectUtils.isNotNull(this.catalogItem.getStock())
                && this.catalogItem.getStock().getBuyUnitOfIssueRt() != null) {
            MMDecimal buyUnitOfIssueRt = this.catalogItem.getStock().getBuyUnitOfIssueRt();
            return new MMDecimal(itemCostAmt.doubleValue() / buyUnitOfIssueRt.doubleValue());
        }
        return itemCostAmt;
    }

    /**
     * toStringMapper
     * 
     * @return LinkedHashMap
     */
    @Override
    public LinkedHashMap toStringMapper() {
        LinkedHashMap propMap = new LinkedHashMap();
        return propMap;
    }

    public Integer getItemLineNumber() {
        return this.itemLineNumber;
    }

    public void setItemLineNumber(Integer itemLineNumber) {
        this.itemLineNumber = itemLineNumber;
    }

    /**
     * @see org.kuali.rice.kns.bo.PersistableBusinessObjectBase#buildListOfDeletionAwareLists()
     */
    @Override
    public List buildListOfDeletionAwareLists() {
        List buildListOfDeletionAwareLists = super.buildListOfDeletionAwareLists();
        buildListOfDeletionAwareLists.add(getAccounts());
        return buildListOfDeletionAwareLists;
    }

    public MMDecimal getBuyUnitOfIssueRt() {
        if (ObjectUtils.isNotNull(getCatalogItem())
                && ObjectUtils.isNotNull(getCatalogItem().getStock())
                && getCatalogItem().getStock().getBuyUnitOfIssueRt() != null) {
            return getCatalogItem().getStock().getBuyUnitOfIssueRt();
        }
        return new MMDecimal(1);
    }
}