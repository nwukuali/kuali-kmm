package org.kuali.ext.mm.businessobject;

import java.util.LinkedHashMap;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.apache.ojb.broker.PersistenceBroker;
import org.apache.ojb.broker.PersistenceBrokerException;
import org.kuali.ext.mm.common.sys.MMConstants;
import org.kuali.ext.mm.common.sys.context.SpringContext;
import org.kuali.ext.mm.integration.sys.businessobject.FinancialUnitOfMeasure;
import org.kuali.ext.mm.service.CatalogService;
import org.kuali.ext.mm.service.MMServiceLocator;
import org.kuali.ext.mm.util.MMDecimal;
import org.kuali.rice.kns.util.KualiDecimal;
import org.kuali.rice.kns.util.ObjectUtils;
import org.kuali.rice.kns.util.TypedArrayList;


/**
 * CatalogItem generated by hbm2java
 */
@Entity
@Table(name = "MM_CATALOG_ITEM_T")
public class CatalogItem extends MMPersistableBusinessObjectBase {
    /**
     *
     */
    private static final long serialVersionUID = -5257353240220478637L;
    private List<CatalogItemImage> catalogItemImages;
    private List<CatalogItemMarkup> catalogItemMarkups;
    private List<CatalogSubgroupItem> catalogSubgroupItems;

    private Stock stock;

    @Id
    @Column(name = "CATALOG_ITEM_ID", unique = true, nullable = false, length = 36)
    private String catalogItemId;

    @Column(name = "DISTRIBUTOR_NBR", nullable = false, length = 30)
    private String distributorNbr;

    @Column(name = "SUBSTITUTE_DISTRIBUTOR_NBR", length = 30)
    private String substituteDistributorNbr;

    @Column(name = "MANUFACTURER_NBR", length = 30)
    private String manufacturerNbr;

    @Column(name = "CATALOG_UNIT_OF_ISSUE_CD", nullable = false, length = 10)
    private String catalogUnitOfIssueCd;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "CATALOG_UNIT_OF_ISSUE_CD")
    private UnitOfIssue salesUnitOfIssue;

    @Column(name = "CATALOG_PRC", nullable = false, scale = 4)
    private MMDecimal catalogPrc;

//    @Transient
//    private MMDecimal actualPrice;

    @Column(name = "CATALOG_DESC", nullable = false, length = 400)
    private String catalogDesc;

    @Column(name = "RECYCLED_IND", length = 1)
    private boolean recycledInd;

    @Column(name = "WILLCALL_IND", length = 1)
    private boolean willcallInd;

    @Column(name = "UNSPSC_CD", length = 10)
    private String unspscCd;

    @Column(name = "SHIPPING_WGT", precision = 8)
    private KualiDecimal shippingWgt;

    @Column(name = "SHIPPING_HT", precision = 8)
    private KualiDecimal shippingHt;

    @Column(name = "SHIPPING_WD", precision = 8)
    private KualiDecimal shippingWd;

    @Column(name = "SHIPPING_LH", precision = 8)
    private KualiDecimal shippingLh;

    @Column(name = "CATALOG_ID", precision = 18)
    private String catalogId;

    @Column(name = "STOCK_ID", precision = 18)
    private String stockId;

    @Column(name = "CATALOG_ITEM_PND_ID", precision = 18)
    private String catalogItemPndId;

    @Column(name = "DISPLAYABLE_IND", precision = 1)
    private boolean displayableInd;

    @Column(name = "SPAID_ID", precision = 28)
    private String spaidId;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "CATALOG_ID", nullable = false)
    private Catalog catalog;

    @Column(name = "TAXABLE_IND", length = 1)
    private boolean taxableInd;

    @SuppressWarnings("unchecked")
    public CatalogItem() {
        stock = new Stock();
        catalogItemImages = new TypedArrayList(CatalogItemImage.class);
        catalogItemMarkups = new TypedArrayList(CatalogItemMarkup.class);
        catalogSubgroupItems = new TypedArrayList(CatalogSubgroupItem.class);
    }

    public Stock getStock() {
        return stock;
    }

    public void setStock(Stock stock) {
        this.stock = stock;
    }

    public Catalog getCatalog() {
        return catalog;
    }

    public void setCatalog(Catalog catalog) {
        this.catalog = catalog;
    }

    public UnitOfIssue getSalesUnitOfIssue() {
        return salesUnitOfIssue;
    }

    public void setSalesUnitOfIssue(UnitOfIssue salesUnitOfIssue) {
        this.salesUnitOfIssue = salesUnitOfIssue;
    }

    public String getSubstituteDistributorNbr() {
        return substituteDistributorNbr;
    }

    public void setSubstituteDistributorNbr(String substituteDistributorNbr) {
        this.substituteDistributorNbr = substituteDistributorNbr;
    }

    public String getCatalogItemId() {
        return catalogItemId;
    }

    public void setCatalogItemId(String catalogItemId) {
        this.catalogItemId = catalogItemId;
    }

    public String getDistributorNbr() {
        return distributorNbr;
    }

    public void setDistributorNbr(String distributorNbr) {
        this.distributorNbr = distributorNbr;
    }

    public String getManufacturerNbr() {
        return manufacturerNbr;
    }

    public void setManufacturerNbr(String manufacturerNbr) {
        this.manufacturerNbr = manufacturerNbr;
    }

    public String getCatalogUnitOfIssueCd() {
        return catalogUnitOfIssueCd;
    }

    public void setCatalogUnitOfIssueCd(String catalogUnitOfIssueCd) {
        this.catalogUnitOfIssueCd = catalogUnitOfIssueCd;
    }

    public MMDecimal getCatalogPrc() {
        return catalogPrc;
    }

    public void setCatalogPrc(MMDecimal catalogPrc) {
        this.catalogPrc = catalogPrc;
    }

    public String getCatalogDesc() {
        return catalogDesc;
    }

    public void setCatalogDesc(String catalogDesc) {
        this.catalogDesc = catalogDesc;
    }

    public boolean isRecycledInd() {
        return recycledInd;
    }

    public void setRecycledInd(boolean recycledInd) {
        this.recycledInd = recycledInd;
    }

    public boolean isWillcallInd() {
        return willcallInd;
    }

    public void setWillcallInd(boolean willcallInd) {
        this.willcallInd = willcallInd;
    }

    public String getUnspscCd() {
        return unspscCd;
    }

    public void setUnspscCd(String unspscCd) {
        this.unspscCd = unspscCd;
    }

    public KualiDecimal getShippingWgt() {
        return shippingWgt;
    }

    public void setShippingWgt(KualiDecimal shippingWgt) {
        this.shippingWgt = shippingWgt;
    }

    public KualiDecimal getShippingHt() {
        return shippingHt;
    }

    public void setShippingHt(KualiDecimal shippingHt) {
        this.shippingHt = shippingHt;
    }

    public KualiDecimal getShippingWd() {
        return shippingWd;
    }

    public void setShippingWd(KualiDecimal shippingWd) {
        this.shippingWd = shippingWd;
    }

    public KualiDecimal getShippingLh() {
        return shippingLh;
    }

    public void setShippingLh(KualiDecimal shippingLh) {
        this.shippingLh = shippingLh;
    }

    public String getCatalogId() {
        return catalogId;
    }

    public void setCatalogId(String catalogId) {
        this.catalogId = catalogId;
    }

    public String getStockId() {
        return stockId;
    }

    public void setStockId(String stockId) {
        this.stockId = stockId;
    }

    public String getCatalogItemPndId() {
        return catalogItemPndId;
    }

    public void setCatalogItemPndId(String catalogItemPndId) {
        this.catalogItemPndId = catalogItemPndId;
    }

    public boolean isDisplayableInd() {
        return displayableInd;
    }

    public void setDisplayableInd(boolean displayableInd) {
        this.displayableInd = displayableInd;
    }


    public List<CatalogItemImage> getCatalogItemImages() {
        return catalogItemImages;
    }

    public void setCatalogItemImages(List<CatalogItemImage> catalogItemImages) {
        this.catalogItemImages = catalogItemImages;
    }

    public List<CatalogItemMarkup> getCatalogItemMarkups() {
        return catalogItemMarkups;
    }

    public void setCatalogItemMarkups(List<CatalogItemMarkup> catalogItemMarkups) {
        this.catalogItemMarkups = catalogItemMarkups;
    }

    public List<CatalogSubgroupItem> getCatalogSubgroupItems() {
        return catalogSubgroupItems;
    }

    public void setCatalogSubgroupItems(List<CatalogSubgroupItem> catalogSubgroupItems) {
        this.catalogSubgroupItems = catalogSubgroupItems;
    }

    public boolean isTaxableInd() {
        return taxableInd;
    }
    
    public void setTaxableInd(boolean taxableInd) {
        this.taxableInd = taxableInd;
    }

    public String getShortDescription() {
        return (getCatalogDesc().length() <= 30) ? getCatalogDesc() : getCatalogDesc().substring(0,
                29);
    }

    private CatalogImage catalogImage;


    public CatalogImage getCatalogImage() {
        return this.catalogImage;
    }

    public void setCatalogImage(CatalogImage catalogImage) {
        this.catalogImage = catalogImage;
    }

    public boolean isValidAddToCart() {
        if (MMConstants.CatalogType.WAREHOUSE.equals(getCatalog().getCatalogType()
                .getCatalogTypeCd()))
            return !getStock().getStockBalances().isEmpty();
        return true;
    }

    /**
     * Gets the spaidId property
     * 
     * @return Returns the spaidId
     */
    public String getSpaidId() {
        return this.spaidId;
    }

    /**
     * Sets the spaidId property value
     * 
     * @param spaidId The spaidId to set
     */
    public void setSpaidId(String spaidId) {
        this.spaidId = spaidId;
    }

    @SuppressWarnings("unchecked")
    @Override
    public List buildListOfDeletionAwareLists() {
        List deletableCollection = super.buildListOfDeletionAwareLists();
        deletableCollection.add(catalogItemImages);
        deletableCollection.add(catalogItemMarkups);
        deletableCollection.add(catalogSubgroupItems);
        return deletableCollection;
    }

    /**
     * toStringMapper
     * 
     * @return LinkedHashMap
     */
    @Override
    public LinkedHashMap toStringMapper() {
        LinkedHashMap propMap = new LinkedHashMap();
        return propMap;
    }

    /**
     * Gets the buyUnitOfIssue property
     * 
     * @return Returns the buyUnitOfIssue
     */
    public FinancialUnitOfMeasure getBuyUnitOfIssue() {
        if (this.stock != null) {
            return this.stock.getBuyUnitOfIssue();
        }
        return null;
    }

    /**
     * Sets the buyUnitOfIssue property value
     * 
     * @param buyUnitOfIssue The buyUnitOfIssue to set
     */
    public void setBuyUnitOfIssue(FinancialUnitOfMeasure buyUnitOfIssue) {
        if (this.stock != null) {
            this.stock.setBuyUnitOfIssue(buyUnitOfIssue);
        }
    }
        
    public MMDecimal getBrowsePrice() {
        return SpringContext.getBean(CatalogService.class).computeCatalogItemPriceNoPersonalUse(this, null, 1);
    }       

    @Override
    public void afterInsert(PersistenceBroker persistenceBroker) throws PersistenceBrokerException {
        super.afterInsert(persistenceBroker);
        if (ObjectUtils.isNotNull(getStock())) {            
            MMServiceLocator.getStockService().initializeStockCosts(this.getStock(), this.getCatalogPrc());
        }
    }
}
