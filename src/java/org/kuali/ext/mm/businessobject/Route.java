package org.kuali.ext.mm.businessobject;

// Generated Apr 16, 2009 10:01:00 AM by Hibernate Tools 3.2.4.GA

import java.util.LinkedHashMap;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.kuali.rice.kns.util.TypedArrayList;

/**
 * Route generated by hbm2java
 */
@Entity
@Table(name = "MM_ROUTE_T")
public class Route extends MMPersistableBusinessObjectBase {

	private static final long serialVersionUID = -4337254780736258621L;
	@Id
	@Column(name = "ROUTE_CD", unique = true, nullable = false, length = 1)
	private String routeCd;
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "DRIVER_MANIFEST_CD")
	private DriverManifest driverManifest;

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "RESTRICTED_ROUTE_CD")
	private RestrictedRouteCode restrictedRouteCode;

	private RouteMap routeMap;
	
	
	/**
     * Gets the routeMap property
     * @return Returns the routeMap
     */
    public RouteMap getRouteMap() {
        return this.routeMap;
    }

    /**
     * Sets the routeMap property value
     * @param routeMap The routeMap to set
     */
    public void setRouteMap(RouteMap routeMap) {
        this.routeMap = routeMap;
    }

    //BEGIN OJB
	@Column(name = "DRIVER_MANIFEST_CD", unique = true, nullable = false, length = 2)
	private String driverManifestCd;

	@Column(name = "RESTRICTED_ROUTE_CD")
	private String restrictedRouteCodeCd;
	//END OJB

	@Column(name = "NM")
	private String routeDesc;

	public Route() {
	    routeMaps = new TypedArrayList(RouteMap.class);
	}

	public String getRouteCd() {
		return this.routeCd;
	}

	public void setRouteCd(String routeCd) {
		this.routeCd = routeCd;
	}

	public DriverManifest getDriverManifest() {
		return this.driverManifest;
	}

	public void setDriverManifest(DriverManifest driverManifest) {
		this.driverManifest = driverManifest;
	}

	public RestrictedRouteCode getRestrictedRouteCode() {
		return restrictedRouteCode;
	}

	public void setRestrictedRouteCode(RestrictedRouteCode restrictedRouteCode) {
		this.restrictedRouteCode = restrictedRouteCode;
	}

	//BEGIN OJB
	public void setDriverManifestCd(String driverManifestCd) {
		this.driverManifestCd = driverManifestCd;
	}

	public String getDriverManifestCd() {
		return driverManifestCd;
	}

	public String getRestrictedRouteCodeCd() {
		return restrictedRouteCodeCd;
	}

	public void setRestrictedRouteCodeCd(String restrictedRouteCodeCd) {
		this.restrictedRouteCodeCd = restrictedRouteCodeCd;
	}
	//END OJB


	public String getRouteDesc() {
		return this.routeDesc;
	}

	public void setRouteDesc(String routeDesc) {
		this.routeDesc = routeDesc;
	}

	@Override
    public LinkedHashMap toStringMapper() {
		LinkedHashMap propMap = new LinkedHashMap();
		return propMap;
	}
	
	private List<RouteMap> routeMaps;

    /**
     * Gets the routeMaps property
     * @return Returns the routeMaps
     */
    public List<RouteMap> getRouteMaps() {
        List<RouteMap> routeMapList = this.routeMaps;
        return routeMapList;
    }

    /**
     * Sets the routeMaps property value
     * @param routeMaps The routeMaps to set
     */
    public void setRouteMaps(List<RouteMap> routeMaps) {
        this.routeMaps = routeMaps;
    }

    @SuppressWarnings("unchecked")
    @Override
    public List buildListOfDeletionAwareLists() {
        List deletableCollection = super.buildListOfDeletionAwareLists();
        deletableCollection.add(routeMaps);      
        return deletableCollection;
    }  
}
