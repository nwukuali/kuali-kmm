package org.kuali.ext.mm.businessobject;

// Generated May 19, 2009 9:29:05 AM by Hibernate Tools 3.2.4.GA

import java.sql.Timestamp;
import java.util.LinkedHashMap;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.apache.commons.lang.StringUtils;
import org.kuali.ext.mm.common.sys.MMConstants;
import org.kuali.ext.mm.document.WorksheetCountDocument;
import org.kuali.ext.mm.util.MMDecimal;


/**
 * StockCount generated by hbm2java
 */
@Entity
@Table(name = "MM_STOCK_COUNT_T")
public class StockCount extends MMPersistableBusinessObjectBase implements java.io.Serializable,
        Cloneable {
    private static final long serialVersionUID = -6487289849388649659L;


    @Column(name = "BEFORE_ITEM_UNIT_OF_ISSUE_CD", nullable = false, length = 10)
    private String beforeItemUnitOfIssueCd;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "BIN_ID", nullable = false)
    private Bin bin;
    @Column(name = "BIN_ID", nullable = false, length = 36)
    private Integer binId;
    private boolean itemPicked = false;
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "ORIGINAL_DT", nullable = false, length = 11)
    private Timestamp originalDt;
    private String pickListIndicator;

    @Column(name = "ACTV_IND", nullable = false, length = 1)
    private boolean reprinted = false;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "STOCK_ID", nullable = false)
    private Stock stock;

    @Id
    @Column(name = "STOCK_COUNT_ID", unique = true, nullable = false, length = 36)
    private String stockCountId;

    @Column(name = "STOCK_COUNT_ITEM_QTY", nullable = false, precision = 11, scale = 4)
    private MMDecimal stockCountItemQty;
    @Column(name = "STOCK_COUNT_NOTE", nullable = false, length = 200)
    private String stockCountNote;

    @Column(name = "STOCK_ID", unique = true, nullable = false, length = 36)
    private String stockId;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "STOCK_TRANS_REASON_CD", nullable = false)
    private StockTransReason stockTransReason;

    @Column(name = "STOCK_TRANS_REASON_CD", unique = true, nullable = false, length = 8)
    private String stockTransReasonCd;

    @Column(name = "TIMES_COUNTED", nullable = false, precision = 11, scale = 4)
    private Long timesCounted;

    @Column(name = "WORKSHEET_CNTR_PRNCPL_ID", nullable = false, length = 100)
    private String worksheetCntrPrncplId;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "WORKSHEET_COUNT_ID", nullable = false)
    private WorksheetCountDocument worksheetCount;

    @Column(name = "WORKSHEET_COUNT_ID", nullable = false, length = 36)
    private String worksheetCountId;

    @Column(name = "BEFORE_ITEM_QTY", nullable = false, precision = 11, scale = 4)
    private MMDecimal snapshotQty;

    private Integer mismatchCount = 0;

    private WorksheetCountDocumentLookable worksheetCountLookable;

    @Transient
    private transient boolean markedForReprint;

    public StockCount() {
    }

    @Override
    public Object clone() {
        try {
            return super.clone();
        }
        catch (CloneNotSupportedException e) {
            throw new InternalError(e.toString());
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        StockCount other = (StockCount) obj;
        if (stockId == null) {
            if (other.stockId != null)
                return false;
        }
        else if (!stockId.equals(other.stockId))
            return false;
        if (worksheetCountId == null) {
            if (other.worksheetCountId != null)
                return false;
        }
        else if (!worksheetCountId.equals(other.worksheetCountId))
            return false;
        return true;
    }

    /**
     * This is not a getter method, but it queries the latest value in the stock_balance_t for this specific bin location.
     * 
     * @return
     */
    public MMDecimal getBeforeItemQty() {
        Integer quantityOnHand = StockCountMap.getQuantityOnHand(getWorksheetCountId(),
                getStockId(), getBinId());
        if (quantityOnHand != null) {
            return new MMDecimal(quantityOnHand);
        }
        return MMDecimal.ZERO;
    }

    public String getBeforeItemUnitOfIssueCd() {
        return this.beforeItemUnitOfIssueCd;
    }

    public Bin getBin() {
        return bin;
    }

    public Integer getBinId() {
        return this.binId;
    }

    public String getBinNbr() {
        return getBin() != null ? getBin().getBinNbr() : "";
    }

    public String getItemDesc() {
        return getStock() != null ? getStock().getStockDesc() : "";
    }

    public String getItemNo() {
        return getStock() != null ? getStock().getStockDistributorNbr() : "";
    }

    public String getItemPickedState() {
        return this.itemPicked ? MMConstants.WorksheetCountDocument.WORKSHEET_ITEM_PICKED_INDICATOR
                : "";
    }

    public Timestamp getOriginalDt() {
        return this.originalDt;
    }

    public String getPickListIndicator() {
        return pickListIndicator;
    }

    public String getSalesUnitOfIssueCode() {
        return this.stock != null ? this.stock.getSalesUnitOfIssue() != null ? this.stock
                .getSalesUnitOfIssue().getUnitOfIssueDesc() : "" : "";
    }

    public String getShelfId() {
        return getBin() != null ? getBin().getShelfId() : "";
    }

    public String getShelfNbr() {
        return getBin() != null ? getBin().getShelfIdNbr() : "";
    }

    public Stock getStock() {
        return this.stock;
    }

    public String getStockCountId() {
        return this.stockCountId;
    }

    public MMDecimal getStockCountItemQty() {
        return this.stockCountItemQty;
    }

    public String getStockCountNote() {
        return this.stockCountNote;
    }

    public String getStockId() {
        return stockId;
    }

    /**
     * Compute the difference between old quantity and new quantity
     * 
     * @return Difference in quantity
     */
    public MMDecimal getStockItemQuantityDifference() {
        if (this.stockCountItemQty == null && this.getBeforeItemQty() != null) {
            return this.getBeforeItemQty().negated();
        }
        if (this.stockCountItemQty != null && this.getBeforeItemQty() == null) {
            return this.stockCountItemQty;
        }
        return stockCountItemQty.subtract(this.getBeforeItemQty());
    }

    public StockTransReason getStockTransReason() {
        return this.stockTransReason;
    }

    public String getStockTransReasonCd() {
        return stockTransReasonCd;
    }

    public String getStockTransReasonForDisplay() {
        StockTransReason val = this.getStockTransReason();
        return val == null ? "" : val.getStockTransReasonDesc();
    }

    public Long getTimesCounted() {
        return this.timesCounted;
    }

    public MMDecimal getUnitPrice() {
        return this.stock.getStockPrice() != null ? this.stock.getStockPrice() : MMDecimal.ZERO;
    }

    public MMDecimal getVariance() {

        if (this.stockCountItemQty == null)
            return this.getBeforeItemQty();

        if (this.getBeforeItemQty() == null)
            return this.stockCountItemQty.negated();

        return this.getBeforeItemQty().subtract(this.stockCountItemQty);
    }

    public MMDecimal getVarianceCost() {
        if (getVariance() == null || getVariance().isZero())
            return MMDecimal.ZERO;
        MMDecimal kd = this.getVariance().multiply(this.getStock().getStockPrice());
        return kd;
    }

    public String getWorksheetCntrPrncplId() {
        return this.worksheetCntrPrncplId;
    }

    public WorksheetCountDocument getWorksheetCount() {
        return this.worksheetCount;
    }

    public String getWorksheetCountId() {
        return worksheetCountId;
    }

    public WorksheetCountDocumentLookable getWorksheetCountLookable() {
        return this.worksheetCountLookable;
    }

    public String getZoneCd() {
        return getBin() != null ? (getBin().getZone() != null ? getBin().getZone().getZoneCd() : "")
                : "";
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((stockId == null) ? 0 : stockId.hashCode());
        result = prime * result + ((worksheetCountId == null) ? 0 : worksheetCountId.hashCode());
        return result;
    }

    public void incrementTimesCounted() {
        this.timesCounted++;
    }


    public boolean isItemCountMatching() {
        return this.stockCountItemQty.intValue() == this.getBeforeItemQty().intValue();
    }

    public boolean isItemPicked() {
        return itemPicked;
    }

    public boolean isReprinted() {
        return this.reprinted;
    }

    public boolean isStockOverridden() {

        if (!StringUtils.isEmpty(stockTransReasonCd)) {

            if ((this.stockCountItemQty == null && this.getBeforeItemQty() != null)
                    || (this.stockCountItemQty != null && this.getBeforeItemQty() == null)
                    || (!this.stockCountItemQty.equals(this.getBeforeItemQty())))

                return true;
        }
        return false;
    }

    public void setBeforeItemQty(MMDecimal beforeItemQty) {

        // DO NOTHING HE
    }

    public void setBeforeItemUnitOfIssueCd(String beforeItemUnitOfIssueCd) {
        this.beforeItemUnitOfIssueCd = beforeItemUnitOfIssueCd;
    }

    public void setBin(Bin bin) {
        this.bin = bin;
    }

    public void setBinId(Integer binId) {
        this.binId = binId;
    }

    public void setItemPicked(boolean itemPicked) {
        this.itemPicked = itemPicked;
    }

    public void setOriginalDt(Timestamp originalDt) {
        this.originalDt = originalDt;
    }

    public void setPickListIndicator(String pickListIndicator) {
        this.pickListIndicator = pickListIndicator;
    }

    public void setReprinted(boolean reprinted) {
        this.reprinted = reprinted;
    }

    public void setStock(Stock stock) {
        this.stock = stock;
    }

    public void setStockCountId(String stockCountId) {
        this.stockCountId = stockCountId;
    }

    public void setStockCountItemQty(MMDecimal stockCountItemQty) {
        this.stockCountItemQty = stockCountItemQty;
    }

    public void setStockCountNote(String stockCountNote) {
        this.stockCountNote = stockCountNote;
    }

    public void setStockId(String stockId) {
        this.stockId = stockId;
    }

    public void setStockTransReason(StockTransReason stockTransReason) {
        this.stockTransReason = stockTransReason;
    }

    public void setStockTransReasonCd(String stockTransReasonCd) {
        this.stockTransReasonCd = stockTransReasonCd;
    }

    public void setTimesCounted(Long timesCounted) {
        this.timesCounted = timesCounted;
    }

    public void setWorksheetCntrPrncplId(String worksheetCntrPrncplId) {
        this.worksheetCntrPrncplId = worksheetCntrPrncplId;
    }

    public void setWorksheetCount(WorksheetCountDocument worksheetCount) {
        this.worksheetCount = worksheetCount;
    }

    public void setWorksheetCountId(String worksheetCountId) {
        this.worksheetCountId = worksheetCountId;
    }

    public void setWorksheetCountLookable(WorksheetCountDocumentLookable worksheetCountLookable) {
        this.worksheetCountLookable = worksheetCountLookable;
    }

    /**
     * toStringMapper
     * 
     * @return LinkedHashMap
     */
    @Override
    public LinkedHashMap toStringMapper() {
        LinkedHashMap propMap = new LinkedHashMap();
        return propMap;
    }

    /**
     * Gets the snapshotQty property
     * 
     * @return Returns the snapshotQty
     */
    public MMDecimal getSnapshotQty() {
        return this.snapshotQty;
    }

    /**
     * Sets the snapshotQty property value
     * 
     * @param snapshotQty The snapshotQty to set
     */
    public void setSnapshotQty(MMDecimal snapshotQty) {
        this.snapshotQty = snapshotQty;
    }

    /**
     * Gets the mismatchCount property
     * 
     * @return Returns the mismatchCount
     */
    public Integer getMismatchCount() {
        if (this.stockCountItemQty != null && getBeforeItemQty() != null) {
            return getBeforeItemQty().intValue() - this.stockCountItemQty.intValue();
        }
        return this.mismatchCount;
    }

    /**
     * Sets the mismatchCount property value
     * 
     * @param mismatchCount The mismatchCount to set
     */
    public void setMismatchCount(Integer mismatchCount) {
        this.mismatchCount = mismatchCount;
    }

    /**
     * Gets the markedForReprint property
     * 
     * @return Returns the markedForReprint
     */
    public boolean isMarkedForReprint() {
        return this.markedForReprint;
    }

    /**
     * Sets the markedForReprint property value
     * 
     * @param markedForReprint The markedForReprint to set
     */
    public void setMarkedForReprint(boolean markedForReprint) {
        this.markedForReprint = markedForReprint;
    }
}
