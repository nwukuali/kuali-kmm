package org.kuali.ext.mm.businessobject;

// Generated Apr 8, 2009 10:12:44 AM by Hibernate Tools 3.2.4.GA

import java.util.LinkedHashMap;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.apache.commons.lang.StringUtils;
import org.kuali.ext.mm.common.sys.MMConstants;
import org.kuali.rice.kns.util.KualiDecimal;
import org.kuali.rice.kns.util.ObjectUtils;


/**
 * Bin generated by hbm2java
 */
@Entity
@Table(name = "MM_BIN_T")
public class Bin extends MMPersistableBusinessObjectBase implements java.io.Serializable {

    private static final long serialVersionUID = 2613737105701667535L;

    @Id
    @Column(name = "BIN_ID", nullable = false, length = 36)
    private Integer binId;

    @Column(name = "ZONE_ID", nullable = false, length = 2)
    private String zoneId;

    @Column(name = "BIN_NBR", nullable = false, length = 6)
    private String binNbr;

    @Column(name = "SHELF_ID", nullable = false, length = 2)
    private String shelfId;

    @Column(name = "SHELF_ID_NBR", nullable = false, length = 2)
    private String shelfIdNbr;
    // END OJB
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumns( { @JoinColumn(name = "ZONE_ID", referencedColumnName = "ZONE_ID", nullable = false, insertable = false, updatable = false) })
    private Zone zone;

    // -1 indicates that the maximum quantity is not assigned
    @Column(name = "MAXIMUM_SHELF_QTY", precision = 8, scale = 0)
    private Integer maximumShelfQty = new Integer(0);

    @Column(name = "BIN_HT", precision = 10)
    private KualiDecimal binHeight;

    @Column(name = "BIN_WD", precision = 10)
    private KualiDecimal binWidth;

    @Column(name = "BIN_LH", precision = 10)
    private KualiDecimal binLength;
    
    private StockBalance stockBalance;

    public Integer getAvailableQty() {
        if (ObjectUtils.isNotNull(stockBalance) && maximumShelfQty != null) {
            return this.maximumShelfQty - stockBalance.getQtyOnHand();
        }
        return this.maximumShelfQty;
    }
    
    public String getBinDisDesc() {        
        return getStockLocation();
    }

    public KualiDecimal getBinHeight() {
        return binHeight;
    }

    public Integer getBinId() {
        return binId;
    }

    public KualiDecimal getBinLength() {
        return binLength;
    }

    // BEGIN OJB
    public String getBinNbr() {
        return this.binNbr;
    }

    public KualiDecimal getBinWidth() {
        return binWidth;
    }

    public Integer getMaximumShelfQty() {
        return this.maximumShelfQty;
    }

    public String getShelfId() {
        return this.shelfId;
    }

    public String getShelfIdNbr() {
        return this.shelfIdNbr;
    }

    public Stock getStock() {
        return this.stockBalance.getStock();
    }

    public StockBalance getStockBalance() {
        return stockBalance;
    }

    public String getStockDistributornumber() {
        return this.getStockBalance().getStock().getStockDistributorNbr();
    }

    public String getStockLocation() {
        if(this.getZone() == null && StringUtils.isNotBlank(this.getZoneId()))
            this.refreshReferenceObject(MMConstants.Bin.ZONE);
        return new StringBuffer().append(this.zone.getZoneCd()).append(" / ").append(
                this.getBinNbr()).append(" / ").append(this.getShelfId()).append(" / ").append(
                this.getShelfIdNbr()).toString();
    }

    // END OJB
    public Zone getZone() {
        return this.zone;
    }

    public String getZoneId() {
        return zoneId;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((binNbr == null) ? 0 : binNbr.hashCode());
        result = prime * result + ((shelfId == null) ? 0 : shelfId.hashCode());
        result = prime * result + ((shelfIdNbr == null) ? 0 : shelfIdNbr.hashCode());
        result = prime * result + ((zoneId == null) ? 0 : zoneId.hashCode());
        return result;
    }

    public boolean hasItems() {
        return !(ObjectUtils.isNull(stockBalance) || this.stockBalance.getQtyOnHand() < 1);
    }

    public void setBinHeight(KualiDecimal binHeight) {
        this.binHeight = binHeight;
    }

    public void setBinId(Integer binId) {
        this.binId = binId;
    }

    public void setBinLength(KualiDecimal binLength) {
        this.binLength = binLength;
    }

    public void setBinNbr(String binNbr) {
        this.binNbr = binNbr;
    }

    public void setBinWidth(KualiDecimal binWidth) {
        this.binWidth = binWidth;
    }

    public void setMaximumShelfQty(Integer maximumShelfQty) {
        this.maximumShelfQty = maximumShelfQty;
    }

    public void setShelfId(String shelfId) {
        this.shelfId = shelfId;
    }

    public void setShelfIdNbr(String shelfIdNbr) {
        this.shelfIdNbr = shelfIdNbr;
    }

    public void setStockBalance(StockBalance stockBalance) {
        this.stockBalance = stockBalance;
    }


    public void setStockDistributornumber(String numb) {
        this.getStockBalance().getStock().setStockDistributorNbr(numb);
    }

    public void setZone(Zone zone) {
        this.zone = zone;
    }
    
    public void setZoneId(String zoneId) {
        this.zoneId = zoneId;
    }
    
    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Bin other = (Bin) obj;
        if (binNbr == null) {
            if (other.binNbr != null)
                return false;
        }
        else if (!binNbr.equals(other.binNbr))
            return false;
        if (shelfId == null) {
            if (other.shelfId != null)
                return false;
        }
        else if (!shelfId.equals(other.shelfId))
            return false;
        if (shelfIdNbr == null) {
            if (other.shelfIdNbr != null)
                return false;
        }
        else if (!shelfIdNbr.equals(other.shelfIdNbr))
            return false;
        if (zoneId == null) {
            if (other.zoneId != null)
                return false;
        }
        else if (!zoneId.equals(other.zoneId))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return "Bin [binHeight=" + binHeight + ", binId=" + binId + ", binLength=" + binLength
                + ", binNbr=" + binNbr + ", binWidth=" + binWidth + ", maximumShelfQty="
                + maximumShelfQty + ", shelfId=" + shelfId + ", shelfIdNbr=" + shelfIdNbr
                + ", zone=" + zone + ", zoneId=" + zoneId + "]";
    }

    /**
     * toStringMapper
     *
     * @return LinkedHashMap
     */
    @Override
    public LinkedHashMap<String, String> toStringMapper() {
        LinkedHashMap<String, String> propMap = new LinkedHashMap<String, String>();
        propMap.put("binId", "binId");
        return propMap;
    }
}
