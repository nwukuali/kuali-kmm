package org.kuali.ext.mm.document;

// Generated May 11, 2009 11:03:40 AM by Hibernate Tools 3.2.4.GA

import java.util.LinkedHashMap;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import org.kuali.ext.mm.businessobject.PickListLine;
import org.kuali.ext.mm.businessobject.PickTicket;
import org.kuali.ext.mm.businessobject.StoresTransactionalDocumentBase;
import org.kuali.ext.mm.businessobject.Warehouse;
import org.kuali.ext.mm.common.sys.context.SpringContext;
import org.kuali.ext.mm.service.PickListService;
import org.kuali.rice.kew.dto.DocumentRouteStatusChangeDTO;
import org.kuali.rice.kns.util.TypedArrayList;
import org.kuali.rice.kns.workflow.service.KualiWorkflowDocument;


/**
 * PickListDoc generated by hbm2java
 */
@Entity
@Table(name = "MM_PICK_LIST_DOC_T")
public class PickListDocument extends StoresTransactionalDocumentBase {

	/**
     *
     */
    private static final long serialVersionUID = 5058144202990467832L;

    @ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "WAREHOUSE_CD", nullable = false)
	private Warehouse warehouse;

	//BEGIN OJB
	@Column(name = "WAREHOUSE_CD", nullable = false, length = 2)
	private String warehouseCd;
	//END OJB

	@Column(name = "MAX_ORDERS")
	private Integer maxOrders;
	@Column(name = "SORT_CD")
	private String sortCode;

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "pickListDocument")
	private List<PickTicket> pickTickets;

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "pickListDocument")
	private List<PickListLine> pickListLines;

	public PickListDocument() {
		super();
		this.setPickListLines(new TypedArrayList(PickListLine.class));
	}

	//BEGIN OJB
	public String getWarehouseCd() {
		return this.warehouseCd;
	}

	public void setWarehouseCd(String warehouseCd) {
		this.warehouseCd = warehouseCd;
	}
	//END OJB
	public void setWarehouse(Warehouse warehouse) {
		this.warehouse = warehouse;
	}

	public Warehouse getWarehouse() {
		return warehouse;
	}

	public Integer getMaxOrders() {
		return maxOrders;
	}

	public void setMaxOrders(Integer maxOrders) {
		this.maxOrders = maxOrders;
	}

	public String getSortCode() {
		return sortCode;
	}

	public void setSortCode(String sortCode) {
		this.sortCode = sortCode;
	}

	public List<PickTicket> getPickTickets() {
		return this.pickTickets;
	}

	public void setPickTickets(List<PickTicket> pickTickets) {
		this.pickTickets = pickTickets;
	}

	public List<PickListLine> getPickListLines() {
		return pickListLines;
	}

	public void setPickListLines(List<PickListLine> pickListLines) {
		this.pickListLines = pickListLines;
	}

	/**
     * @see org.kuali.rice.kns.document.Document#doRouteStatusChange(org.kuali.rice.kew.dto.DocumentRouteStatusChangeDTO)
     */
	@Override
    public void doRouteStatusChange(DocumentRouteStatusChangeDTO statusChangeEvent) {
        super.doRouteStatusChange(statusChangeEvent);
        KualiWorkflowDocument workflowDocument = getDocumentHeader().getWorkflowDocument();

        if (workflowDocument.stateIsProcessed()) {
        	SpringContext.getBean(PickListService.class).processNewPickList(this);
        }

        if (workflowDocument.stateIsCanceled() || workflowDocument.stateIsDisapproved() || workflowDocument.stateIsException()) {
        	SpringContext.getBean(PickListService.class).cancelPickList(this);

        }

    }

	/**
     * Overrides super to call super and then also add in the new list of pick list lines that have to be managed.
     *
     * @see org.kuali.rice.kns.document.TransactionalDocumentBase#buildListOfDeletionAwareLists()
     */
    @Override
    public List buildListOfDeletionAwareLists() {
        List managedLists = super.buildListOfDeletionAwareLists();
        managedLists.add(getPickListLines());

        return managedLists;
    }

	/**
	 * toStringMapper
	 * @return LinkedHashMap
	 */
	@Override
    public LinkedHashMap toStringMapper() {
		LinkedHashMap propMap = new LinkedHashMap();
		//TODO:  Autogenerated method
		propMap.put("documentNumber", documentNumber);
		return propMap;
	}

}
