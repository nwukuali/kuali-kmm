package org.kuali.ext.mm.document;

// Generated May 11, 2009 11:03:40 AM by Hibernate Tools 3.2.4.GA

import org.apache.commons.lang.StringUtils;
import org.kuali.ext.mm.businessobject.*;
import org.kuali.ext.mm.common.sys.MMConstants;
import org.kuali.ext.mm.common.sys.context.SpringContext;
import org.kuali.ext.mm.gl.GeneralLedgerPostable;
import org.kuali.ext.mm.gl.WarehouseGlGroup;
import org.kuali.ext.mm.gl.service.GeneralLedgerBuilderService;
import org.kuali.ext.mm.gl.service.GeneralLedgerProcessor;
import org.kuali.ext.mm.gl.service.TaxLiabilityGeneralLedgerService;
import org.kuali.ext.mm.integration.sys.businessobject.FinancialGeneralLedgerPendingEntry;
import org.kuali.ext.mm.service.PickVerifyService;
import org.kuali.ext.mm.service.WarehouseAccountingService;
import org.kuali.ext.mm.util.MMDecimal;
import org.kuali.rice.core.api.util.type.KualiDecimal;
import org.kuali.rice.kew.api.WorkflowDocument;
import org.kuali.rice.kew.framework.postprocessor.DocumentRouteStatusChange;
import org.kuali.rice.kns.service.DataDictionaryService;
import org.kuali.rice.krad.rules.rule.event.KualiDocumentEvent;
import org.kuali.rice.krad.rules.rule.event.SaveDocumentEvent;
import org.kuali.rice.krad.service.BusinessObjectService;
import org.kuali.rice.krad.util.ObjectUtils;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

//import org.kuali.rice.kew.dto.DocumentRouteStatusChangeDTO;
//import org.kuali.rice.kns.rule.event.KualiDocumentEvent;
//import org.kuali.rice.krad.service.BusinessObjectService;
//import org.kuali.rice.core.api.util.type.KualiDecimal;
//import org.kuali.rice.krad.util.ObjectUtils;
//import org.kuali.rice.kew.api.WorkflowDocument;


/**
 * PackListDoc generated by hbm2java
 */
@Entity
@Table(name = "MM_PICK_VERIFY_DOC_T")
@Transactional
public class PickVerifyDocument extends StoresTransactionalDocumentBase implements
        GeneralLedgerPostable {
    private static final long serialVersionUID = -2280658847013082028L;

    @OneToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "PICK_TICKET_NBR", nullable = false)
    private PickTicket pickTicket;

    // BEGIN OJB
    @Column(name = "PICK_TICKET_NBR")
    private String pickTicketNumber;

    private List<FinancialGeneralLedgerPendingEntry> financialGeneralLedgerPendingEntries;

    private List<String> relatedFinancialDocNumbers;

    // END OJB

    public PickVerifyDocument() {
        this.financialGeneralLedgerPendingEntries = new ArrayList<FinancialGeneralLedgerPendingEntry>();
        this.relatedFinancialDocNumbers = new ArrayList<String>();
    }

    public void setPickTicket(PickTicket pickTicket) {
        this.pickTicket = pickTicket;
    }

    public PickTicket getPickTicket() {
        return pickTicket;
    }

    // BEGIN OJB
    public void setPickTicketNumber(String pickTicketNumber) {
        this.pickTicketNumber = pickTicketNumber;
    }

    public String getPickTicketNumber() {
        return pickTicketNumber;
    }

    // END OJB

    /**
     * @see org.kuali.rice.kns.document.Document#doRouteStatusChange(org.kuali.rice.kew.dto.DocumentRouteStatusChangeDTO)
     */
    @Override
    public void doRouteStatusChange(DocumentRouteStatusChange statusChangeEvent) {
        super.doRouteStatusChange(statusChangeEvent);
        WorkflowDocument workflowDocument = getDocumentHeader().getWorkflowDocument();

        if (workflowDocument.isProcessed()
                && MMConstants.PickStatusCode.PICK_STATUS_PRTD.equals(pickTicket
                        .getPickStatusCodeCd())) {
            PickVerifyService pickVerifyService = SpringContext.getBean(PickVerifyService.class);
            pickVerifyService.processNewVerifyDocument(this);
            pickVerifyService.updateOrderStatus(pickTicket);
            // pickVerifyService.processInternalBilling(this);
            saveBillingGlpesInternally();
        }

        // Remove lock when doc status change. We don't include
        // stateIsFinal since document always go to 'processed' first.
        if (workflowDocument.isCanceled() || workflowDocument.isDisapproved()
                || workflowDocument.isException() || workflowDocument.isProcessed()) {
            // remove the lock
            // MMServiceLocator.getBusinessObjectLockingService().deleteLocks(getDocumentNumber());
        }
        // generate GL entries
        SpringContext.getBean(GeneralLedgerProcessor.class).doRouteStatusChange(this,
                getDocumentHeader());
        

    }

    /**
     * 
     */
    private void saveBillingGlpesInternally() {
        String warehouseCd = pickTicket.getPickListDocument().getWarehouseCd();
        HashMap<WarehouseGlGroup, WarehouseGlGroup> billGlGroups = new HashMap<WarehouseGlGroup, WarehouseGlGroup>();
        PickVerifyService pickVerifyService = SpringContext.getBean(PickVerifyService.class);
        pickVerifyService.processBillingGlpes(this, billGlGroups);
        ArrayList<FinancialGeneralLedgerPendingEntry> billEntries = new ArrayList<FinancialGeneralLedgerPendingEntry>();
        for (WarehouseGlGroup group : billGlGroups.values()) {            
            FinancialGeneralLedgerPendingEntry targetEntry = group.getTargetEntry();
            targetEntry.setWarehouseCode(warehouseCd);
            billEntries.add(targetEntry);
        }
        SpringContext.getBean(GeneralLedgerProcessor.class).saveInternally(billEntries);
    }

    @Override
    public void postProcessSave(KualiDocumentEvent event) {
        super.postProcessSave(event);
        // if(event.getName())
        if (!(event instanceof SaveDocumentEvent)) {
            // BusinessObjectLockingService lockService = MMServiceLocator
            // .getBusinessObjectLockingService();

            List<String> keyFieldsTicket = new ArrayList<String>(0);
            keyFieldsTicket.add(MMConstants.PickTicket.PICK_TICKET_NUMBER);
            this.refreshReferenceObject(MMConstants.PickVerifyDocument.PICK_TICKET);
            // lockService.createAndSaveLock(getDocumentNumber(), getPickTicket(), keyFieldsTicket);

            List<String> keyFieldsStockBalance = new ArrayList<String>(0);
            keyFieldsStockBalance.add(MMConstants.StockBalance.STOCK_BALANCE_ID);
            // for (PickListLine line : getPickTicket().getPickListLines()) {
            // lockService.createAndSaveLock(getDocumentNumber(), line.getBin().getStockBalance(),
            // keyFieldsStockBalance);
            // }
        }
    }

    /**
     * @see org.kuali.rice.kns.document.DocumentBase#prepareForSave()
     */
    @Override
    public void prepareForSave(KualiDocumentEvent event) {
        super.prepareForSave(event);

        List<PickListLine> newLineList = new ArrayList<PickListLine>();
        for (PickListLine line : getPickTicket().getPickListLines()) {
            newLineList.add(line);
            newLineList.addAll(line.getAdditionalLines());
        }

        getPickTicket().setPickListLines(newLineList);
    }


		protected void postUpdate() {
			super.postUpdate();
			if (ObjectUtils.isNotNull(this.getPickTicket()))
				SpringContext.getBean(BusinessObjectService.class).save(this.getPickTicket());
		}

		protected void postPersist() {
			super.postPersist();
			if (ObjectUtils.isNotNull(this.getPickTicket()))
				SpringContext.getBean(BusinessObjectService.class).save(this.getPickTicket());
		}

	/**
     * @see org.kuali.ext.mm.gl.GeneralLedgerPostable#generateGlpeEntries()
     */
    public List<FinancialGeneralLedgerPendingEntry> generateGlpeEntries() {
        HashMap<WarehouseGlGroup, WarehouseGlGroup> glGroups = new HashMap<WarehouseGlGroup, WarehouseGlGroup>();
        WarehouseAccountingService warehouseAcctService = SpringContext
                .getBean(WarehouseAccountingService.class);
        String warehouseCd = pickTicket.getPickListDocument().getWarehouseCd();
        Warehouse warehouse = SpringContext.getBean(BusinessObjectService.class)
                .findBySinglePrimaryKey(Warehouse.class, warehouseCd);
        if (warehouse == null || !warehouse.isActive()) {
            throw new RuntimeException("Warehouse is not valid.");
        }
        
        populateSalesTaxGlpes(glGroups, warehouse);
        populateInventoryGlpes(glGroups, warehouseAcctService, warehouse);
        
        ArrayList<FinancialGeneralLedgerPendingEntry> entries = new ArrayList<FinancialGeneralLedgerPendingEntry>();        
        for (WarehouseGlGroup group : glGroups.values()) {
            entries.add(group.getTargetEntry());
        }      

        return entries;
    }

    /**
     * @param entries
     * @param warehouseAcctService
     * @param warehouse
     */
    protected void populateInventoryGlpes(HashMap<WarehouseGlGroup, WarehouseGlGroup> glGroups,
            WarehouseAccountingService warehouseAcctService, Warehouse warehouse) {
        GeneralLedgerBuilderService generalLedgerBuilderService = SpringContext
                .getBean(GeneralLedgerBuilderService.class);
        WarehouseObject finObject = warehouseAcctService.findWarehouseObjectByReason(warehouse
                .getWarehouseCd(), MMConstants.StockTransReason.SALE);
        if (finObject == null) {
            throw new RuntimeException("Warehouse object code is not specified");
        }
        KualiDecimal inventoryCostAmount = KualiDecimal.ZERO;
        for (PickListLine line : pickTicket.getPickListLines()) {
            Integer pickStockQty = line.getPickStockQty();
            if (pickStockQty != null && pickStockQty > 0) {
                MMDecimal stockPrice = line.getStock().getStockPrice();
                inventoryCostAmount = inventoryCostAmount.add(new KualiDecimal(stockPrice
                        .doubleValue()
                        * pickStockQty));
            }
        }
        generalLedgerBuilderService.decrementCostOfGoods(glGroups, warehouse,MMConstants.StockTransReason.SALE,
                inventoryCostAmount, "Sale generated");

    }

    /**
     * Increments the Tax Liability of the warehouse
     * 
     * @param glGroups GL Account Lines
     * @param warehouse Warehouse
     */
    protected void populateSalesTaxGlpes(HashMap<WarehouseGlGroup, WarehouseGlGroup> glGroups,
            Warehouse warehouse) {
        TaxLiabilityGeneralLedgerService taxLiabilityService = SpringContext
                .getBean(TaxLiabilityGeneralLedgerService.class);
        KualiDecimal totalTax = KualiDecimal.ZERO;
        for (PickListLine line : pickTicket.getPickListLines()) {
            Integer pickStockQty = line.getPickStockQty();
            if (pickStockQty != null && pickStockQty > 0) {
                OrderDetail orderDetail = line.getOrderDetail();
                OrderDocument orderDocument = orderDetail.getOrderDocument();
                if (orderDetail.getOrderItemTaxAmt() != null
                        && orderDetail.getOrderItemTaxAmt().isNonZero()
                        && ObjectUtils.isNotNull(orderDocument)
                        && !MMConstants.OrderDocument.PROFILE_TYPE_PERSONAL.equals(orderDocument
                                .getProfileTypeCode())) {
                    totalTax = totalTax.add(new KualiDecimal(orderDetail.getOrderItemTaxAmt()
                            .doubleValue()
                            * pickStockQty));
                }
            }
        }
        if (totalTax.isNonZero()) {
            taxLiabilityService.incrementTaxLiability(glGroups, warehouse, totalTax,
                    "Tax liability");
        }
    }

    /**
     * @see org.kuali.ext.mm.gl.GeneralLedgerPostable#getDocumentTypeCode()
     */
    public String getDocumentTypeCode() {
        return SpringContext.getBean(DataDictionaryService.class).getDocumentTypeNameByClass(
                getClass());
    }

    /**
     * @see org.kuali.ext.mm.gl.GeneralLedgerPostable#getFinancialGeneralLedgerPendingEntries()
     */
    public List<FinancialGeneralLedgerPendingEntry> getFinancialGeneralLedgerPendingEntries() {
        return this.financialGeneralLedgerPendingEntries;
    }

    /**
     * @see org.kuali.ext.mm.gl.GeneralLedgerPostable#setFinancialGeneralLedgerPendingEntries(java.util.List)
     */
    public void setFinancialGeneralLedgerPendingEntries(
            List<FinancialGeneralLedgerPendingEntry> entries) {
        this.financialGeneralLedgerPendingEntries = entries;

    }

    /**
     * @return
     */
    public List<FinancialGeneralLedgerPendingEntry> getApprovedGeneralLedgerPendingEntries() {
        return SpringContext.getBean(GeneralLedgerProcessor.class)
                .getApprovedGeneralLedgerPendingEntries(getDocumentNumber());
    }

    /**
     * Gets the relatedFinancialDocNumbers property
     * 
     * @return Returns the relatedFinancialDocNumbers
     */
    public List<String> getRelatedFinancialDocNumbers() {
        if (this.relatedFinancialDocNumbers.isEmpty() && ObjectUtils.isNotNull(this.pickTicket)) {
            List<PickListLine> pickListLines = this.pickTicket.getPickListLines();
            for (PickListLine pickListLine : pickListLines) {
                String chargeDocumentNumber = pickListLine.getChargeDocumentNumber();
                if (StringUtils.isNotBlank(chargeDocumentNumber)
                        && !this.relatedFinancialDocNumbers.contains(chargeDocumentNumber)) {
                    this.relatedFinancialDocNumbers.add(chargeDocumentNumber);
                }
            }
        }
        return this.relatedFinancialDocNumbers;
    }

    /**
     * Sets the relatedFinancialDocNumbers property value
     * 
     * @param relatedFinancialDocNumbers The relatedFinancialDocNumbers to set
     */
    public void setRelatedFinancialDocNumbers(List<String> relatedFinancialDocNumbers) {
        this.relatedFinancialDocNumbers = relatedFinancialDocNumbers;
    }
}
