package org.kuali.ext.mm.document;

import org.apache.cxf.common.util.StringUtils;
import org.kuali.ext.mm.businessobject.CheckinDetail;
import org.kuali.ext.mm.businessobject.OrderDetail;
import org.kuali.ext.mm.businessobject.StoresTransactionalDocumentBase;
import org.kuali.ext.mm.businessobject.Warehouse;
import org.kuali.ext.mm.common.sys.MMConstants;
import org.kuali.ext.mm.common.sys.context.SpringContext;
import org.kuali.ext.mm.document.service.BusinessObjectLockingService;
import org.kuali.ext.mm.gl.GeneralLedgerPostable;
import org.kuali.ext.mm.gl.WarehouseGlGroup;
import org.kuali.ext.mm.gl.service.GeneralLedgerBuilderService;
import org.kuali.ext.mm.gl.service.GeneralLedgerProcessor;
import org.kuali.ext.mm.integration.sys.businessobject.FinancialGeneralLedgerPendingEntry;
import org.kuali.ext.mm.service.CheckinOrderService;
import org.kuali.ext.mm.service.MMServiceLocator;
import org.kuali.ext.mm.util.MMDecimal;
import org.kuali.ext.mm.util.MMUtil;
import org.kuali.rice.core.api.util.type.KualiDecimal;
import org.kuali.rice.kew.api.WorkflowDocument;
import org.kuali.rice.kew.framework.postprocessor.DocumentRouteStatusChange;
import org.kuali.rice.krad.rules.rule.event.KualiDocumentEvent;
import org.kuali.rice.krad.rules.rule.event.RouteDocumentEvent;
import org.kuali.rice.krad.rules.rule.event.SaveDocumentEvent;
import org.kuali.rice.krad.service.BusinessObjectService;
import org.kuali.rice.krad.service.DataDictionaryService;
import org.kuali.rice.krad.util.ObjectUtils;

import javax.persistence.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
//import org.kuali.rice.kew.dto.DocumentRouteStatusChangeDTO;
//import org.kuali.rice.kim.api.services.KimApiServiceLocator;
//import org.kuali.rice.krad.UserSession;
//import org.kuali.rice.kns.rule.event.KualiDocumentEvent;
//import org.kuali.rice.krad.service.BusinessObjectService;
//import org.kuali.rice.kns.service.DataDictionaryService;
//import org.kuali.rice.krad.util.GlobalVariables;
//import org.kuali.rice.core.api.util.type.KualiDecimal;
//import org.kuali.rice.krad.util.ObjectUtils;
//import org.kuali.rice.kew.api.WorkflowDocument;


/**
 * CheckinDoc generated by hbm2java
 */
@Entity
@Table(name = "MM_CHECKIN_DOC_T")
public class CheckinDocument extends StoresTransactionalDocumentBase implements
        java.io.Serializable, GeneralLedgerPostable, RentalTrackingDocument<CheckinDetail> {
    private static final long serialVersionUID = -6051241363435677189L;
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "ORDER_DOC_NBR", nullable = false)
    private OrderDocument orderDocument;
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "WAREHOUSE_CD")
    private Warehouse warehouse;

    private boolean finalInd;

    @Column(name = "ORDER_DOC_NBR", length = 45)
    private String orderDocNumber;

    // Dummy attibute added
    private Integer selectedOrderDetailId = null;

    private List<ReturnDocument> returnDocuments = new ArrayList<ReturnDocument>(0);
    // declarion ends

    @Column(name = "WAREHOUSE_CD", length = 45)
    private String warehouseCode;

    @Column(name = "VENDOR_REF_NBR", length = 45)
    private String vendorRefNbr;

    @Column(name = "VENDOR_SHIPMENT_NBR", length = 45)
    private String vendorShipmentNbr;
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "checkinDoc")
    private List<CheckinDetail> checkinDetails = new ArrayList<CheckinDetail>();
    private List<FinancialGeneralLedgerPendingEntry> financialGeneralLedgerPendingEntries;


    public CheckinDocument() {
        super();
    }

    public boolean isFinalInd() {
        return this.finalInd;
    }

    public void setFinalInd(boolean finalInd) {
        this.finalInd = finalInd;
    }

    public String getOrderDocNumber() {
        return orderDocNumber;
    }

    public void setOrderDocNumber(String orderDocNumber) {
        this.orderDocNumber = orderDocNumber;
    }

    public List<ReturnDocument> getReturnDocuments() {
        return returnDocuments;
    }

    public void setReturnDocuments(List<ReturnDocument> returnDocuments) {
        this.returnDocuments = returnDocuments;
    }

    public Integer getSelectedOrderDetailId() {
        return selectedOrderDetailId;
    }

    public void setSelectedOrderDetailId(Integer selectedOrderDetailId) {
        this.selectedOrderDetailId = selectedOrderDetailId;
    }


    public String getWarehouseCode() {
        return warehouseCode;
    }

    public void setWarehouseCode(String warehouseCode) {
        this.warehouseCode = warehouseCode;
    }


    public OrderDocument getOrderDocument() {
        return this.orderDocument;
    }

    public void setOrderDocument(OrderDocument orderDocument) {
        this.orderDocument = orderDocument;
    }

    public Warehouse getWarehouse() {
        return this.warehouse;
    }

    public void setWarehouse(Warehouse warehouse) {
        this.warehouse = warehouse;
    }

    public String getVendorRefNbr() {
        return this.vendorRefNbr;
    }

    public void setVendorRefNbr(String vendorRefNbr) {
        this.vendorRefNbr = vendorRefNbr;
    }

    public String getVendorShipmentNbr() {
        return this.vendorShipmentNbr;
    }

    public void setVendorShipmentNbr(String vendorShipmentNbr) {
        this.vendorShipmentNbr = vendorShipmentNbr;
    }

    public List<CheckinDetail> getCheckinDetails() {
        return this.checkinDetails;
    }

    public void setCheckinDetails(List<CheckinDetail> checkinDetails) {
        this.checkinDetails = checkinDetails;
    }

    public boolean isCorrectedDocument() {
        return this.documentHeader.getWorkflowDocument().getDocumentTypeId().equalsIgnoreCase(
                MMConstants.ReceiptCorrection.DOCUMENT_TYPE);
    }

    public List<String> getStockIds() {

        ArrayList<String> values = new ArrayList<String>();

        for (CheckinDetail cdetail : this.checkinDetails) {
            if (!StringUtils.isEmpty(cdetail.getStockId())
                    && !values.contains(cdetail.getStockId()) && cdetail.getAcceptedItemQty() > 0)
                values.add(cdetail.getStockId());
        }
        return values;
    }

    public int getCheckinLinesCount() {
        return this.checkinDetails.size();
    }

    @Override
    public void doRouteStatusChange(DocumentRouteStatusChange statusChangeEvent) {

        super.doRouteStatusChange(statusChangeEvent);

        if (this.isCorrectedDocument())
            return;

        Map<String, MMDecimal> stockCosts = null;
        CheckinOrderService checkinOrderService = MMServiceLocator.getCheckinOrderService();
        WorkflowDocument workflowDocument = getDocumentHeader().getWorkflowDocument();

        if (workflowDocument.isProcessed()) {
            applyProcessLocks();
            checkinOrderService = MMServiceLocator.getCheckinOrderService();
            stockCosts = checkinOrderService.processCheckinDocument(this);
            checkinOrderService.createCheckinHistory(this, stockCosts);
            try {
                checkinOrderService.createElectronicInvoiceXml(this);
//                UserSession curSession = GlobalVariables.getUserSession();
//                String name = KIMServiceLocator.getIdentityManagementService().getPrincipal(
//                        this.getDocumentHeader().getWorkflowDocument().getInitiatorPrincipalId())
//                        .getPrincipalName();
//                GlobalVariables.setUserSession(new UserSession(name));
//                MMServiceLocator.getCheckinOrderService()
//                        .createReturnDocumentForRejectedItems(this);
//                GlobalVariables.setUserSession(curSession);
            }
            catch (Exception e) {
                throw new RuntimeException(e);
            }
            removeProcessLocks();
        }
        this.setFinalInd(workflowDocument.isProcessed() || workflowDocument.isFinal());
        SpringContext.getBean(GeneralLedgerProcessor.class).doRouteStatusChange(this,
                getDocumentHeader());
    }

    /**
     * Convenience method to apply the process locks for business objects affected by this document's In-Process state
     */
    private void applyProcessLocks() {
        BusinessObjectLockingService lockingService = SpringContext
                .getBean(BusinessObjectLockingService.class);
        lockingService.deleteLocks(this.getDocumentNumber());
        for (CheckinDetail detail : this.getCheckinDetails()) {
            detail.refreshReferenceObject(MMConstants.CheckinDetail.STOCK);
            lockingService.createAndSaveLock(documentNumber, detail.getStock(),
                    MMConstants.Stock.STOCK_ID);
        }
    }

    /**
     * Convenience method to remove process locks for business objects affected by this document's In-Process state
     */
    private void removeProcessLocks() {
        BusinessObjectLockingService lockingService = SpringContext
                .getBean(BusinessObjectLockingService.class);
        lockingService.deleteLocks(this.getDocumentNumber());
    }

    public List<Integer> getCheckedinBins() {
        List<Integer> lisBins = new ArrayList<Integer>(0);
        for (CheckinDetail cdetail : this.checkinDetails) {
            if (cdetail.getBinId() != null)
                lisBins.add(cdetail.getBinId());
        }
        return lisBins;
    }

    public KualiDecimal getTotalCheckInOrderAmount() {
        Double totPrice = 0.0;
        for (CheckinDetail cdetail : checkinDetails) {
            MMDecimal qty = new MMDecimal(cdetail.getAcceptedItemQty());
            OrderDetail odetail = cdetail.getOrderDetail();
            MMDecimal price = MMDecimal.ZERO;

            if (odetail != null) {
                price = (odetail.getOrderItemCostAmt() == null ? MMDecimal.ZERO : odetail
                        .getOrderItemCostAmt());
            }
            else {
                MMDecimal sprice = cdetail.getStock().getStockPrice();
                price = ObjectUtils.isNull(sprice) ? MMDecimal.ZERO : sprice;

            }
            totPrice = totPrice + price.multiply(qty).doubleValue();
        }
        return new KualiDecimal(totPrice);
    }

    public boolean isRentalsCheckedin() {
        for (CheckinDetail cdetail : this.checkinDetails) {
            if (!MMUtil.isCollectionEmpty(cdetail.getRentals()))
                return true;
        }
        return false;
    }


    /**
     * @see org.kuali.ext.mm.gl.GeneralLedgerPostable#generateGlpeEntries()
     */
    public List<FinancialGeneralLedgerPendingEntry> generateGlpeEntries() {
        GeneralLedgerBuilderService generalLedgerBuilderService = SpringContext
                .getBean(GeneralLedgerBuilderService.class);
        Warehouse warehouse = SpringContext.getBean(BusinessObjectService.class)
                .findBySinglePrimaryKey(Warehouse.class, getWarehouseCode());
        if (warehouse == null || !warehouse.isActive()) {
            throw new RuntimeException("Warehouse is not valid.");
        }
        KualiDecimal totalCheckInOrderAmount = getTotalCheckInOrderAmount();
        if (totalCheckInOrderAmount == null || totalCheckInOrderAmount.isZero()) {
            return new ArrayList<FinancialGeneralLedgerPendingEntry>();
        }
        HashMap<WarehouseGlGroup, WarehouseGlGroup> glGroups = new HashMap<WarehouseGlGroup, WarehouseGlGroup>();
        generalLedgerBuilderService.incrementResaleItems(glGroups, warehouse,MMConstants.StockTransReason.TRANS_IN,
                totalCheckInOrderAmount, "Order received");
        ArrayList<FinancialGeneralLedgerPendingEntry> entries = new ArrayList<FinancialGeneralLedgerPendingEntry>();
        for (WarehouseGlGroup group : glGroups.values()) {
            entries.add(group.getTargetEntry());
        }
        return entries;

    }

    @Override
    public void prepareForSave(KualiDocumentEvent event) {


        if (event instanceof RouteDocumentEvent) {
            if (this.isCorrectedDocument()) {
                List<CheckinDetail> result = new ArrayList<CheckinDetail>(0);
                for (CheckinDetail cdetail : this.checkinDetails) {
                    if (!cdetail.isLineCorrected())
                        result.add(cdetail);
                }

                for (CheckinDetail cdetail : result) {
                    this.checkinDetails.remove(cdetail);
                }
            }
            else {
                MMServiceLocator.getCheckinOrderService().removeEmptyCheckinLines(this);
            }
        }

        if (event instanceof SaveDocumentEvent) {
            if (!this.isCorrectedDocument()) {
                for (CheckinDetail cdetail : this.checkinDetails) {
                    if (cdetail.getAcceptedItemQty() == null || cdetail.getAcceptedItemQty() == 0) {
                        if (cdetail.getRejectedItemQty() != null
                                && cdetail.getRejectedItemQty() > 0) {
                            cdetail.setBinId(null);
                            cdetail.setBin(null);
                        }
                    }
                }

            }

        }
    }

    public boolean isItemsReturned() {
        if (!MMUtil.isCollectionEmpty(this.getReturnDocuments())) {
            for (ReturnDocument rd : this.getReturnDocuments()) {
                return ObjectUtils.isNotNull(rd);
            }
        }
        return false;
    }

    /**
     * @see org.kuali.ext.mm.gl.GeneralLedgerPostable#getDocumentTypeCode()
     */
    public String getDocumentTypeCode() {
        return SpringContext.getBean(DataDictionaryService.class).getDocumentTypeNameByClass(
                getClass());
    }

    /**
     * @see org.kuali.ext.mm.gl.GeneralLedgerPostable#getFinancialGeneralLedgerPendingEntries()
     */
    public List<FinancialGeneralLedgerPendingEntry> getFinancialGeneralLedgerPendingEntries() {
        return this.financialGeneralLedgerPendingEntries;
    }

    /**
     * @see org.kuali.ext.mm.gl.GeneralLedgerPostable#setFinancialGeneralLedgerPendingEntries(java.util.List)
     */
    public void setFinancialGeneralLedgerPendingEntries(
            List<FinancialGeneralLedgerPendingEntry> entries) {
        this.financialGeneralLedgerPendingEntries = entries;

    }

    public List<FinancialGeneralLedgerPendingEntry> getApprovedGeneralLedgerPendingEntries() {
        return SpringContext.getBean(GeneralLedgerProcessor.class)
                .getApprovedGeneralLedgerPendingEntries(getDocumentNumber());
    }

    /**
     * Returns true if check in document should submit an electronic invoice
     * 
     * @return true
     */
    public boolean requireElectronicInvoice() {
        if (ObjectUtils.isNotNull(getOrderDocument()) || !this.isCorrectedDocument()) {
            if (getOrderDocument().getReqsId() != null
                    && ObjectUtils.isNotNull(getOrderDocument().getAgreement())
                    && getOrderDocument().getAgreement().isElectronicInvoiceInd()
                    && getOrderDocument().getVendorHeaderGeneratedId() != null
                    && getOrderDocument().getVendorDetailAssignedId() != null) {
                if (ObjectUtils.isNotNull(getCheckinDetails())) {
                    for (CheckinDetail checkInDetail : getCheckinDetails()) {
                        if (checkInDetail.getAcceptedItemQty() != null
                                && checkInDetail.getAcceptedItemQty() > 0) {
                            // at least one item that needs to be invoiced
                            if (ObjectUtils.isNotNull(checkInDetail.getOrderDetail())) {
                                if (checkInDetail.getOrderDetail().getOrderItemCostAmt() != null) {
                                    return true;
                                }
                            }
                        }
                    }

                }
            }
        }
        return false;
    }

    /**
     * @see org.kuali.rice.kns.bo.PersistableBusinessObjectBase#buildListOfDeletionAwareLists()
     */
    @Override
    public List buildListOfDeletionAwareLists() {
        List buildListOfDeletionAwareLists = super.buildListOfDeletionAwareLists();
        buildListOfDeletionAwareLists.add(getCheckinDetails());
        return buildListOfDeletionAwareLists;
    }

    /**
     * @see org.kuali.ext.mm.document.RentalTrackingDocument#getRentalTrackingDetails()
     */
    public List<CheckinDetail> getRentalTrackingDetails() {
        return this.checkinDetails;
    }
}
