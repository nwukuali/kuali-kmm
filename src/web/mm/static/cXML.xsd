<?xml version="1.0" encoding="UTF-8"?>
<!--
  For cXML license agreement information, please see
  http://www.cxml.org/home/license.asp
  
  $Id: //ariba/cxml/modules/Common.mod#6 $
-->
<!--
  A few character entities the XML recommendation says should be defined
  "for interoperability" with existing SGML parsers.  By default, these
  are not included to avoid warnings (about entity redefinition) from
  many XML parsers.
-->
<!--
  Common types used throughout the cXML definition.
  
  The types try to follow the XML DATA definition submitted to the W3C. See
  the following for more information,
  
      http://msdn.microsoft.com/xml/reference/schema/datatypes.asp
      http://www.w3c.org/TR/1998/NOTE-XML-data-0105/
  
-->
<!-- Atomic-level Types -->
<!-- 0 is false, 1 is true -->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
	elementFormDefault="qualified"
	xmlns:ds="http://www.w3.org/2000/09/xmldsig#"
	xmlns:xades="http://uri.etsi.org/01903/v1.3.2#"
	xmlns:jxb="http://java.sun.com/xml/ns/jaxb"
  	jxb:version="1.0"
	>

	<xs:simpleType name="date">
		<xs:restriction base="xs:string" />
	</xs:simpleType>
	<xs:simpleType name="datetime.tz">
		<xs:restriction base="xs:string" />
	</xs:simpleType>
	<!-- Time zone is required -->
	<xs:simpleType name="r8">
		<xs:restriction base="xs:string" />
	</xs:simpleType>
	<xs:simpleType name="number">
		<xs:restriction base="xs:string" />
	</xs:simpleType>
	<!--
		No limit on number of digits, unlike
		%r8;
	-->
	<xs:simpleType name="string">
		<xs:restriction base="xs:string" />
	</xs:simpleType>
	<xs:simpleType name="time.tz">
		<xs:restriction base="xs:string" />
	</xs:simpleType>
	<!-- Time zone is required -->
	<!-- ISO8601 duration http://www.w3.org/TR/xmlschema-2/#duration -->
	<xs:simpleType name="ui8">
		<xs:restriction base="xs:string" />
	</xs:simpleType>
	<xs:simpleType name="uint">
		<xs:restriction base="ui8" />
	</xs:simpleType>
	<!-- Unique to this specification -->
	<xs:simpleType name="uri">
		<xs:restriction base="xs:string" />
	</xs:simpleType>
	<!-- Higher-level Types -->
	<!--
		NOTE: The following is a temporary *hack* to allow empty values for
		some attributes with these types.  The nmtoken entity should resolve to
		NMTOKEN.
	-->
	<xs:simpleType name="nmtoken">
		<xs:restriction base="xs:string" />
	</xs:simpleType>
	<!-- Any combination of XML name chars. -->
	<!-- ISO 639 Language Code -->
	<xs:simpleType name="isoCountryCode">
		<xs:restriction base="nmtoken" />
	</xs:simpleType>
	<!-- ISO 3166 Country Code -->
	<xs:simpleType name="isoCurrencyCode">
		<xs:restriction base="nmtoken" />
	</xs:simpleType>
	<!-- ISO 4217 Currency Code -->
	<xs:simpleType name="xmlLangCode">
		<xs:restriction base="nmtoken" />
	</xs:simpleType>
	<!--
		Language code as defined by XML
		recommendation: Language and
		country.
	-->
	<xs:simpleType name="URL">
		<xs:restriction base="uri" />
	</xs:simpleType>
	<!--
		For cXML license agreement information, please see
		http://www.cxml.org/home/license.asp
		
		$Id: //ariba/cxml/schema/Modules/Base.mod#8 $
	-->
	<!--
		This file defines the basic elements used to build higher level
		constructs in cXML.
	-->
	<!-- Basic Name/Data Elements -->
	<!--
		Name is used to provide an identifier for other elements.
		
		xml:lang
		The language in which the name is written.
	-->
	<xs:element name="Name">
		<xs:complexType mixed="true">
			<xs:attribute ref="lang" use="required" />
		</xs:complexType>
	</xs:element>
	<!-- string -->
	<!--
		An Extrinsic is an element which can be used to extend the data
		associated with known elements.
		
		Since this Element is of type ANY, it could contain any arbitrary XML
		document within itself, or a binary ![CDATA[]] document.
		
		name
		Name used to identify this extrinsic.
	-->
	<xs:element name="Extrinsic" substitutionGroup="Object.ANY">
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="any">
					<xs:attribute name="name" use="required"
						type="string" />
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<!--
		Description is a string which describes something.
		Though text may be interspersed with ShortName elements in this content
		model, placing the ShortName at the beginning or end of the element is
		much preferred.  At most one ShortName element is allowed per
		Description.  The intended content model would be more like
		(( ShortName, #PCDATA ) | ( #PCDATA | ShortName? )) if DTD syntax
		supported it.
		
		xml:lang
		The language in which the description is written.
	-->
	<xs:element name="Description">
		<xs:complexType mixed="true">
			<xs:sequence>
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="ShortName" />
			</xs:sequence>
			<xs:attribute ref="lang" use="required" />
		</xs:complexType>
	</xs:element>
	<!--
		mixed: string and
		ShortName
	-->
	<!--
		A short string which describes something in fewer characters than the
		entire Description.  This should be used when limited space is available.
		For example, a table of elements might show the ShortName's of each.  A
		linked "details" view would show the entire Description (including the
		ShortName).  Without a ShortName, the user interface must default to a
		truncation of the Description.
		This element does not require an xml:lang attribute since it appears only
		within a Description element.  The language of the ShortName must match
		that of the surrounding Description.
	-->
	<xs:element name="ShortName" type="xs:string" />
	<!-- string -->
	<!-- Telephone Number Elements -->
	<!--
		International ITU dial code for the country code in question.  This
		code would be entered after any escape code necessary to begin
		International dialing.  That is, the escape code does not appear in the
		content of this element.
		
		isoCountryCode
		The ISO 3166 2-letter country code for the dial code in question.
	-->
	<xs:element name="CountryCode">
		<xs:complexType mixed="true">
			<xs:attribute name="isoCountryCode" use="required"
				type="isoCountryCode" />
		</xs:complexType>
	</xs:element>
	<!-- uint -->
	<!-- The areacode or city code within a CountryCode. -->
	<xs:element name="AreaOrCityCode" type="xs:string" />
	<!-- uint -->
	<!-- The local number part of a telephone number. -->
	<xs:element name="Number" type="xs:string" />
	<!-- string -->
	<!--
		An extension within relative to the Number element. This element has no
		meaning without an associated Number element.
	-->
	<xs:element name="Extension" type="xs:string" />
	<!-- uint -->
	<!-- TelephoneNumber represents international telephone numbers. -->
	<xs:element name="TelephoneNumber">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="CountryCode" />
				<xs:element ref="AreaOrCityCode" />
				<xs:element ref="Number" />
				<xs:element minOccurs="0" ref="Extension" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		Phone is a "named" TelephoneNumber.
		
		name
		specifies an identifier which indicates the type of phone number.
		US examples would include "work","home", etc.
	-->
	<xs:element name="Phone">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="TelephoneNumber" />
			</xs:sequence>
			<xs:attribute name="name" type="string" />
		</xs:complexType>
	</xs:element>
	<!-- Fax number. -->
	<xs:element name="Fax">
		<xs:complexType>
			<xs:choice>
				<xs:element ref="TelephoneNumber" />
				<xs:element ref="URL" />
				<xs:element ref="Email" />
			</xs:choice>
			<xs:attribute name="name" type="string" />
		</xs:complexType>
	</xs:element>
	<!-- Addressing Elements -->
	<!-- URL. A string which represents a URL -->
	<xs:element name="URL">
		<xs:complexType mixed="true">
			<xs:attribute name="name" type="string" />
		</xs:complexType>
	</xs:element>
	<!-- URL -->
	<!--
		An email address. Address must conform to RFC 821 (SMTP Standard).
		
		preferredLang
		optional language that the email owner prefers to receive
		emails in. Refer to the definition of xmlLangCode entity.
		
	-->
	<xs:element name="Email">
		<xs:complexType mixed="true">
			<xs:attribute name="name" type="string" />
			<xs:attribute name="preferredLang" type="xmlLangCode" />
		</xs:complexType>
	</xs:element>
	<!-- string -->
	<!--
		Contact represents an entity at a location. The nature of this
		element is that it represents a communication "end point" for a
		location.
		
		role
		Position this person or group plays in the procurement process.
		Likely values include endUser, administrator, purchasingAgent,
		technicalSupport, customerService, sales,
		supplierCorporate, supplierMasterAccount, supplierAccount,
		buyerCorporate, buyerMasterAccount, buyerAccount, buyer,
		subsequentBuyer. Other values may be allowed in some cases.
		
		from and to roles are reserved for future use.
		
		addressID
		An id for the address. Needed to support address codes for
		relationships that require id references.
	-->
	<xs:element name="Contact">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Name" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="PostalAddress" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="Email" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="Phone" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="Fax" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="URL" />
			</xs:sequence>
			<xs:attribute name="role" type="xs:NMTOKEN" />
			<xs:attribute name="addressID" type="string" />
		</xs:complexType>
	</xs:element>
	<!--
		The DeliverTo part of an Address. This would be internal to the actual
		address know to the outside world. Similar to what an extension is to a
		TelephoneNumber.
	-->
	<xs:element name="DeliverTo" type="xs:string" />
	<!-- string -->
	<!-- Street is a single line of an Address' location. -->
	<xs:element name="Street" type="xs:string" />
	<!-- string -->
	<!-- City is the name of the city in an Address' location. -->
	<xs:element name="City" type="xs:string" />
	<!-- string -->
	<!-- State is an optional state identifier in an Address' location. -->
	<xs:element name="State" type="xs:string" />
	<!-- string -->
	<!-- PostalCode (I have no idea how to describe it) -->
	<xs:element name="PostalCode" type="xs:string" />
	<!-- string -->
	<!--
		Country is the name of the country in an Address' location.  The
		content of this element is a string which may (for example) be printed
		directly to a shipping label.  The content is the human-readable
		equivalent of the isoCountryCode used by applications.
		
		isoCountryCode
		The ISO 3166 2-letter country code for this country.
	-->
	<xs:element name="Country">
		<xs:complexType mixed="true">
			<xs:attribute name="isoCountryCode" use="required"
				type="isoCountryCode" />
		</xs:complexType>
	</xs:element>
	<!-- string -->
	<!-- PostalAddress is a real-world location for a business or person. -->
	<xs:element name="PostalAddress">
		<xs:complexType>
			<xs:sequence>
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="DeliverTo" />
				<xs:element maxOccurs="unbounded" ref="Street" />
				<xs:element ref="City" />
				<xs:element minOccurs="0" ref="State" />
				<xs:element minOccurs="0" ref="PostalCode" />
				<xs:element ref="Country" />
			</xs:sequence>
			<xs:attribute name="name" type="string" />
		</xs:complexType>
	</xs:element>
	<!--
		Address is the association of a Contact and an Location.
		
		isoCountryCode
		The ISO 3166 2-letter country code for the country containing this
		location.
		
		addressID
		An id for the address.  Needed to support address codes for
		relationships that require id references.  An example would be a
		shipping code.
	-->
	<xs:element name="Address">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Name" />
				<xs:element minOccurs="0" ref="PostalAddress" />
				<xs:element minOccurs="0" ref="Email" />
				<xs:element minOccurs="0" ref="Phone" />
				<xs:element minOccurs="0" ref="Fax" />
				<xs:element minOccurs="0" ref="URL" />
			</xs:sequence>
			<xs:attribute name="isoCountryCode" type="isoCountryCode" />
			<xs:attribute name="addressID" type="string" />
		</xs:complexType>
	</xs:element>
	<!-- Financial Elements -->
	<!--
		Money is the representation of the object used to pay for items.
		
		currency
		specifies the currency in which amount is stated, must conform to ISO
		4217 currency codes.
		
		alternateAmount
		the amount of money in the alternateCurrency. Optional and used to
		support dual-currency requirements such as the Euro.
		
		alternateCurrency
		specifies the currency in which the alternateAmount is stated, must
		conform to ISO 4217 currency codes.
	-->
	<xs:complexType name="Money.element">
		<xs:sequence>
			<xs:element ref="Money" />
		</xs:sequence>
	</xs:complexType>
	<xs:element name="Money">
		<xs:complexType mixed="true">
			<xs:attribute name="currency" use="required"
				type="isoCurrencyCode" />
			<xs:attribute name="alternateAmount" type="number" />
			<xs:attribute name="alternateCurrency"
				type="isoCurrencyCode" />
		</xs:complexType>
	</xs:element>
	<!-- number -->
	<!--
		Optional textual child for communicating arbitrary comments or
		description along with the parent.
		Though text may be interspersed with Attachment elements in this content
		model, grouping the Attachment list at the begging or end of the element
		is much preferred.  The intended content model would be more like
		(( Attachment+, #PCDATA ) | ( #PCDATA | Attachment* )) if the DTD syntax
		supported it.
		
		xml:lang
		The language in which the Comments are written.  This attribute
		will be required in a future version of cXML.  (Leaving it out is
		deprecated.)
	-->
	<xs:element name="Comments">
		<xs:complexType mixed="true">
			<xs:sequence>
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="Attachment" />
			</xs:sequence>
			<xs:attribute ref="lang" />
		</xs:complexType>
	</xs:element>
	<!--
		mixed: string and
		opt. Attachment list
	-->
	<!--
		Optional child of Comments element referencing a part in a multipart MIME
		transmission.
		
		The contained URL must use the scheme "cid:".  This is the identifier for
		the referenced attachment within the larger transmission.  Must match the
		Content-ID header of one (and only one) part of the MIME transmission
		containing this cXML document.  May also be used to retrieve the
		attachment file separately.
	-->
	<xs:element name="Attachment">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="URL" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		-
		Reference to a remote attachment. 
		
		AttachmentReference is used inside Extrinsic elements that have a
		predefined name of "Attachments".
		
		In the context of AttachmentReference, the domain attribute of
		InternalID is currently optional. However, as a way to prevent
		circular request paths, the sending application may use a
		predefined value of "local" to indicate that the attachment
		requested is local to the other application.
		
		length
		length of the attachment in bytes.
	-->
	<xs:element name="AttachmentReference">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Name" />
				<xs:element ref="Description" />
				<xs:element ref="InternalID" />
			</xs:sequence>
			<xs:attribute name="length" type="uint" />
		</xs:complexType>
	</xs:element>
	<!-- Price per unit of item. -->
	<xs:element name="UnitPrice" type="Money.element" />
	<!--
		Reference to an earlier document (for example, OrderRequest).  In a
		StatusUpdateRequest, this element identifies the purchase order to be
		updated.
		
		payloadID
		A unique identifier for the document.  Copied directly from the
		cXML element of the original document.
	-->
	<xs:element name="DocumentReference">
		<xs:complexType>
			<xs:attribute name="payloadID" use="required" type="string" />
		</xs:complexType>
	</xs:element>
	<xs:element name="InternalID">
		<xs:complexType mixed="true">
			<xs:attribute name="domain" type="string" />
		</xs:complexType>
	</xs:element>
	<!-- string -->
	<!--
		====
		Common to most variants of the PunchOut transaction set.  Defined here
		to be easily shared between multiple DTD files without requiring
		inclusion of Transaction.mod in all of them.
		
		All of the PunchOut transaction sets include an originating Request
		(ProviderSetupRequest for example), relatively simple Response
		(PunchOutSetupResponse for example) and final Message
		(ProviderDoneMessage or PunchOutOrderMessage).  The Request and
		Response comprise a back-end transaction between two cooperating
		applications that wish to extend an interactive session from one to the
		other.  The Request provides the destination application with
		authentication, identification and other setup information.  The
		Response provides the originating application with a unique starting
		location for the interactive (HTML) session at the destination system.
		
		After receiving a Response of this type, the originating application
		redirects the user's browser to the provided location.  (For some
		non-HTML applications, opening a new browser window at that location
		may be more appropriate.)  The destination system eventually provides
		an HTML form to the user's browser.  This form submits the final
		Message to close the remote session, return that user to the
		originating application and carry any required information back to the
		originating application.
		====
	-->
	<!--
		OriginatorCookie - Identification of a specific PunchOut session.  Used
		in both originating Request and later Message that returns user to
		originating application.
		
		Note: The BuyerCookie element used in a 'regular' PunchOut transaction
		(defined in Transaction.mod) is of type ANY.  That does not seem
		useful.  The string required below better matches the needs for this
		element.  Future transactions similar to the PunchOut transaction will
		use this element.
	-->
	<xs:element name="OriginatorCookie" type="xs:string" />
	<!--
		BrowserFormPost - Location to which the user's browser must submit the
		final Message.  This location (carried in the originating Request) does
		not need to be specific to a PunchOut session since the
		OriginatorCookie is returned in the Message.
	-->
	<xs:element name="BrowserFormPost">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="URL" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		SelectedService - Identification of a service offered by this provider
		and requested in this transaction.  Used only in the originating
		Request.
	-->
	<xs:element name="SelectedService" type="xs:string" />
	<!--
		StartPage - Location to which the user's browser must be redirected to
		begin the interactive portion of the session at the remote site.  The
		destination system returns this information in the Response document.
		This location must be specific to a particular session.  It is
		effectively a one time key, providing authenticated entry into the
		destination system.
	-->
	<xs:complexType name="StartPage.element">
		<xs:sequence>
			<xs:element ref="StartPage" />
		</xs:sequence>
	</xs:complexType>
	<xs:element name="StartPage">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="URL" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		ReturnData - Any information the originator must know about the
		completed operation at the provider site.  The ReturnValue is for
		applications; the Name is for human consumption (direct presentation in
		the User Interface of the application).  Where appropriate for the
		possible services, this element may appear in the final Message for a
		PunchOut session.
		
		name
		An identifier for the data returned.  Provides a meaning for the
		contents of a ReturnData element.
	-->
	<xs:element name="ReturnData">
		<xs:complexType>			
			<xs:sequence>
				<xs:element ref="ReturnValue"/>
				<xs:element ref="Name">
				<xs:annotation>
					<xs:appinfo>
						<jxb:property name="returnDataName" />
					</xs:appinfo>
				</xs:annotation>
				</xs:element>
			</xs:sequence>
			<xs:attribute name="name" type="string">
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="ReturnValue" type="xs:string" />
	<!--
		Defines a time range. The start and end can be unbounded
		startDate
		The starting date of the time range
		endDate
		The ending date of the range
	-->
	<xs:element name="TimeRange">
		<xs:complexType>
			<xs:attribute name="startDate" type="datetime.tz" />
			<xs:attribute name="endDate" type="datetime.tz" />
		</xs:complexType>
	</xs:element>
	<!--
		Defines a period in time.
		
		startDate
		The starting date of the period
		
		endDate
		The ending date of the period
	-->
	<xs:element name="Period">
		<xs:complexType>
			<xs:attribute name="startDate" use="required"
				type="datetime.tz" />
			<xs:attribute name="endDate" use="required"
				type="datetime.tz" />
		</xs:complexType>
	</xs:element>
	<!-- Must be a UN/CEFACT (Recommendation 20) unit of measure code. -->
	<xs:element name="UnitOfMeasure" type="xs:string" />
	<!-- nmtoken -->
	<!--
		Defines a reference to a term which is defined
		in another document.
		
		termName
		The name of the ID attribute containing the term.
		
		term
		The value of that attribute (i.e., the term itself).
		
	-->
	<xs:element name="TermReference">
		<xs:complexType>
			<xs:attribute name="termName" use="required" type="string" />
			<xs:attribute name="term" use="required" type="string" />
		</xs:complexType>
	</xs:element>
	<!--
		Defines an optionally named monetary rate at which goods or services are
		charged or paid. 
		
		Money
		The amount of Money per UnitOfMeasure to be charged or paid. 
		
		UnitOfMeasure
		Unit of measure.
		
		TermReference 
		Identifies the definition of this UnitRate 
		(found, for example,  in contracts, master agreements, and other documents
		which may or may not be cXML documents).
	-->
	<xs:element name="UnitRate">
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Money.element">
					<xs:sequence>
						<xs:element ref="UnitOfMeasure" />
						<xs:element minOccurs="0" ref="TermReference" />
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<!--
		The rate information used to define the rate of a purchase.  For
		example, this could be the total room rate for 4 nights of stay
		at a hotel.
		
		Total
		The total amount for the rate.  The total amount must equal
		to quantity x UnitRate.
		
		UnitRate
		The single unit rate.
		
		Description
		Textual description for the rate.  For example, hotel nightly rate.
		
		Quantity
		The quantity.  For example, a 4 nights stay at a hotel will
		have quantity set to 4 with UnitofMesure in UnitRate set to Day.
	-->
	<xs:element name="Rate">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Total" />
				<xs:element ref="UnitRate" />
				<xs:element minOccurs="0" ref="Description" />
			</xs:sequence>
			<xs:attribute name="quantity" use="required" type="r8" />
		</xs:complexType>
	</xs:element>
	<!-- The total for something. -->
	<xs:element name="Total" type="Money.element" />
	<!--
		For cXML license agreement information, please see
		http://www.cxml.org/home/license.asp
		
		$Id: //ariba/cxml/modules/Version.mod#4 $
	-->
	<!--
		Another top-level entity used in Transport.mod.  Defined here to allow
		easy updates to the release version of cXML without opening
		Transport.mod.  This should also provide an easy file to search for
		the current release version string.
	-->
	<!--
		cxml.version
		Current default string for the cXML@version attribute.  Corresponds to
		the final directory of the SYSTEM identifier used in all up-to-date
		cXML documents.
		For easy parsing of this file, do not remove whitespace surrounding the
		actual version string.
	-->
	<!--
		For cXML license agreement information, please see
		http://www.cxml.org/home/license.asp
		
		$Id: //ariba/cxml/schema/Modules/Supplier.mod#1 $
	-->
	<!--
		Supplier of goods and services. Includes a list of SupplierIDs which
		identify the Supplier.
		
		corporateURL
		URL to web site about the supplier
		
		storeFrontURL
		URL to web site where a user can shop or browse
	-->
	<xs:element name="Supplier">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Name" />
				<xs:element minOccurs="0" ref="Comments" />
				<xs:element maxOccurs="unbounded" ref="SupplierID" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="SupplierLocation" />
			</xs:sequence>
			<xs:attribute name="corporateURL" type="URL" />
			<xs:attribute name="storeFrontURL" type="URL" />
		</xs:complexType>
	</xs:element>
	<!--
		One of the locations for a supplier. Supplier location is
		generally a physical location.
	-->
	<xs:element name="SupplierLocation">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Address" />
				<xs:element ref="OrderMethods" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		OrderMethods is the list of methods by which one can order
		from a supplier. The contact element is the technical contact
		who should be able to assist with order processing issues.
		The list is to be ordered by supplier preference, the first
		element having the highest degree of preference.
	-->
	<xs:element name="OrderMethods">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" ref="OrderMethod" />
				<xs:element minOccurs="0" ref="Contact" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		OrderMethod is a method for ordering. It is comprised of a
		target address for the order and the protocol expected by
		the address.
	-->
	<xs:element name="OrderMethod">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="OrderTarget" />
				<xs:element minOccurs="0" ref="OrderProtocol" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		OrderTarget represents an address to which orders can be
		sent.
	-->
	<xs:element name="OrderTarget">
		<xs:complexType>
			<xs:choice>
				<xs:element ref="Phone" />
				<xs:element ref="Email" />
				<xs:element ref="Fax" />
				<xs:element ref="URL" />
				<xs:element ref="OtherOrderTarget" />
			</xs:choice>
		</xs:complexType>
	</xs:element>
	<!--
		OrderProtocol is the communication method to be used when
		communicating an order to a supplier. An example would be "cXML".
	-->
	<xs:element name="OrderProtocol" type="xs:string" />
	<!-- string -->
	<!--
		OtherOrderTarget represents an address which is not enumerated by
		default in the OrderTarget Element. This may contain address targets
		beyond the ability of this document to describe.
		
		name
		Optional name for target.
	-->
	<xs:element name="OtherOrderTarget">
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="any">
					<xs:attribute name="name" type="string" />
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<!--
		Definition of a supplier id.  A supplier id is a (domain, value)
		pair so that suppliers have the flexibility to define their id's
		according to an arbitrary convention (e.g., (DUNS, 12345),
		(TaxID, 88888888)).
		
		domain
		the domain of the id
	-->
	<xs:element name="SupplierID">
		<xs:complexType mixed="true">
			<xs:attribute name="domain" use="required" type="string" />
		</xs:complexType>
	</xs:element>
	<!-- string -->
	<!--
		Defines a List of Suppliers that might be associated with a quote Item. Used in
		ItemOut. 
	-->
	<xs:element name="SupplierList">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" ref="Supplier" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		For cXML license agreement information, please see
		http://www.cxml.org/home/license.asp
		
		$Id: //ariba/cxml/modules/Item.mod#6 $
	-->
	<!-- ID with which the item's manufacturer identifies the item. -->
	<xs:element name="ManufacturerPartID" type="xs:string" />
	<!-- string -->
	<!--
		Name of the item's manufacturer.
		
		xml:lang
		The language in which the ManufacturerName is written.  This
		attribute will be required in a future version of cXML.  (Leaving it
		out is deprecated.)
	-->
	<xs:element name="ManufacturerName">
		<xs:complexType mixed="true">
			<xs:attribute ref="lang" />
		</xs:complexType>
	</xs:element>
	<!-- string -->
	<!--
		Classification is used to group items into similar categories.
		
		domain
		"name" of classification, ie., SPSC
	-->
	<xs:element name="Classification">
		<xs:complexType mixed="true">
			<xs:attribute name="domain" use="required" type="string" />
		</xs:complexType>
	</xs:element>
	<!-- string -->
	<!--
		LeadTime specifies, in days, the amount of time required to
		receive the item.
	-->
	<xs:element name="LeadTime" type="xs:string" />
	<!-- uint -->
	<!--
		How the supplier identifies an item they sell.
		
		If SupplierPartID does not provide a unique key to identify the item,
		then the supplier should generate a key which identifies the part
		uniquely when combined with the SupplierID and SupplierPartID. The
		key is called SupplierPartAuxiliaryID.
		
		
		An example is where a Supplier would use the same PartID for an
		item but have a different price for units of "EA" versus "BOX".
		In this case, the ItemIDs should be:
		<ItemID>
		<SupplierPartID>pn12345</SupplierPartID>
		<SupplierPartAuxiliaryID>EA</SupplierPartAuxiliaryID>
		</ItemID>
		<ItemID>
		<SupplierPartID>pn12345</SupplierPartID>
		<SupplierPartAuxiliaryID>
		<foo>well formed XML here</foo>
		</SupplierPartAuxiliaryID>
		</ItemID>
		In this case, the "foo" element must be defined in an internal subset
		sent with the cXML document.  Otherwise, parsers will not be able to
		validate that document.
		
		In a preferred approach, the sending application may escape the contained
		XML using CDATA sections.  This would appear as:
		...
		<SupplierPartAuxiliaryID>
		<![CDATA[<foo>well formed XML here</foo>]]>
		</SupplierPartAuxiliaryID>
		...
		
		Finally, the angle brackets could be escaped using XML character
		entities.  This might be a bit harder for humans to read.  For example:
		...
		<SupplierPartAuxiliaryID>
		&lt;foo&gt;well formed XML here&lt;/foo&gt;
		</SupplierPartAuxiliaryID>
		...
		
		
	-->
	<xs:element name="SupplierPartID" type="xs:string" />
	<!-- string -->
	<xs:element name="SupplierPartAuxiliaryID" type="any" />
	<!--
		A unique identification of an item. SupplierID is not required since
		ItemIDs never travel alone.
		
		ItemIDs used to define a Supplier/Commodity level Blanket Order Item should
		use Empty SupplierPartID tag. These type of items do not have specific part numbers
		at the time of placing the Blanket Order. There will be subsequent release orders
		or invoices that will define the SupplierID.
	-->
	<xs:complexType name="ItemID.element">
		<xs:sequence>
			<xs:element ref="ItemID" />
		</xs:sequence>
	</xs:complexType>
	<xs:element name="ItemID">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="SupplierPartID" />
				<xs:element minOccurs="0" ref="SupplierPartAuxiliaryID" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		ItemDetail contains detailed information about an item. All the data that
		a user would want to see about an item instead of the bare essentials
		that are represented in the ItemID.
		
		LeadTime
		time in days to receive the item
	-->
	<xs:element name="ItemDetail">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="UnitPrice" />
				<xs:element maxOccurs="unbounded" ref="Description" />
				<xs:element ref="UnitOfMeasure" />
				<xs:element maxOccurs="unbounded" ref="Classification" />
				<xs:element minOccurs="0" ref="ManufacturerPartID" />
				<xs:element minOccurs="0" ref="ManufacturerName" />
				<xs:element minOccurs="0" ref="URL" />
				<xs:element minOccurs="0" ref="LeadTime" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="Extrinsic" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		Item details specific for items that describe blanket purchase order items. 
		This element should only be used for items in a purchase order of 
		type "blanket"	
	-->
	<xs:element name="BlanketItemDetail">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" ref="Description" />
				<xs:element minOccurs="0" ref="MaxAmount" />
				<xs:element minOccurs="0" ref="MinAmount" />
				<xs:element minOccurs="0" ref="MaxQuantity" />
				<xs:element minOccurs="0" ref="MinQuantity" />
				<xs:element minOccurs="0" ref="UnitPrice" />
				<xs:element minOccurs="0" ref="UnitOfMeasure" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="Classification" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="Extrinsic" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		For cXML license agreement information, please see
		http://www.cxml.org/home/license.asp
		
		$Id$
	-->
	<!--
		This element captures travel information.  It could be one of four
		types: air, car rental, hotel or rail.
		
		AirDetail
		Air travel detail.
		
		CarRentalDetail
		Car rental detail.
		
		HotelDetail
		Hotel detail.
		
		RailDetail
		Rail detail.
		
		PolicyViolation
		List of policy violations (if any) associated with this
		travel line item.
		
		Comments
		Top level comments for this travel line item (if any).  This
		is not the policy violation comment but a top level comment
		given by the user for this travel line item while in Travel
		Booking Provider's web site.
		
		TermsAndConditions
		List of Terms and conditions (if any) associated with this
		travel line item.
		
		confirmationNumber
		A unique confirmation number that is useful to both the
		traveler and the vendor who is providing the service for this
		travel line item.  For example, hotel reservation number or
		e-ticket number from the airline.
		
		pnrLocator
		Passenger Name Record (PNR) Locator that is useful to the
		Travel Booking Provider.
		
		quoteExpirationTime
		Date and time that this quote will expire.  This value is
		normally supplied in the PunchoutOrderMessage.  If no value is
		supplied, it is assumed that there is no expiration time or
		date for this quote.
	-->
	<xs:element name="TravelDetail">
		<xs:complexType>
			<xs:sequence>
				<xs:choice>
					<xs:element ref="AirDetail" />
					<xs:element ref="CarRentalDetail" />
					<xs:element ref="HotelDetail" />
					<xs:element ref="RailDetail" />
				</xs:choice>
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="PolicyViolation" />
				<xs:element minOccurs="0" ref="Comments" />
				<xs:element minOccurs="0" ref="TermsAndConditions" />
			</xs:sequence>
			<xs:attribute name="confirmationNumber" use="required"
				type="string" />
			<xs:attribute name="pnrLocator" type="string" />
			<xs:attribute name="quoteExpirationTime" type="datetime.tz" />
		</xs:complexType>
	</xs:element>
	<!-- Air -->
	<!--
		Air detail information for the air trip.
		
		TripType
		Round Trip, One Way, or Multi Leg
		
		AirLeg
		Different air leg that makes up this air detail.
		For example a round trip from SFO -> TPE with no stops
		will have two air legs.  One air leg from SFO -> TPE
		and another from TPE -> SFO.
		
		AvailablePrice
		Other available airfare prices that the user did not pick.
		
		Penalty
		Penalty amount (if any).  This is normally due to changes or
		cancelation of the ticket.
	-->
	<xs:element name="AirDetail">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="TripType" />
				<xs:element maxOccurs="unbounded" ref="AirLeg" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="AvailablePrice" />
				<xs:element minOccurs="0" ref="Penalty" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		Define a single leg in the air travel.
		
		Vendor
		Airline vendor name and information.
		
		AirLegOrigin
		Originating airport for this air leg.
		
		AirLegDestination
		Destination airport for this air leg.
		
		BookingClassCode
		Airline booking class code.  This is the de-facto
		airline standard.  For example,
		
		F, FN, P, R, A      - first class
		C, CN, D, J, I, Z   - business class.
		Y, YN, B, BN, M, H, V, VN, O, Q, QN, S, 
		K, KN, L, U, T, W - coach class.
		
		Rate
		Rate for this particular air leg.  If specify, the total
		of all the rate for the different air legs must add up
		to the total the line item level.
		
		Meal
		Meal information for this air leg (if any)
		
		travelSegment
		Textual information to identify this travel segment.
		This information is specific to the Travel Booking Provider.
		
		departureTime
		Departure date and time for this air leg
		
		arrivalTime
		Arrival date and time for this air leg
		
		flightNumber
		Flight number for this air leg
		
		seatNumber
		Seat number for this air leg
		
		seatType
		Seat type
		aisle       - Aisle
		window      - Window
		middle      - Middle
		
		upgrade
		Is this ticket an upgrade?
		
		stops
		The number of stop for this air leg.
		0 if it is a direct flight.  If no information is supplied
		it is defaulted to 0.
		
		equipment
		The plane equipment information for this air leg
	-->
	<xs:element name="AirLeg">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Vendor" />
				<xs:element ref="AirLegOrigin" />
				<xs:element ref="AirLegDestination" />
				<xs:element minOccurs="0" ref="BookingClassCode" />
				<xs:element minOccurs="0" ref="Rate" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="Meal" />
			</xs:sequence>
			<xs:attribute name="travelSegment" use="required"
				type="string" />
			<xs:attribute name="departureTime" use="required"
				type="datetime.tz" />
			<xs:attribute name="arrivalTime" use="required"
				type="datetime.tz" />
			<xs:attribute name="flightNumber" use="required"
				type="string" />
			<xs:attribute name="seatNumber" type="string" />
			<xs:attribute name="seatType">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="window" />
						<xs:enumeration value="aisle" />
						<xs:enumeration value="middle" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="upgrade">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="yes" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="stops" type="r8" />
			<xs:attribute name="equipment" type="string" />
		</xs:complexType>
	</xs:element>
	<!--
		Originating airport for this Air Leg.
		
		Airport
		Originating airport
	-->
	<xs:element name="AirLegOrigin">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Airport" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		Destination airport for this Air Leg.
		
		Airport
		Destination airport
	-->
	<xs:element name="AirLegDestination">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Airport" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		Airport information that includes the iso airport code
		
		Address
		Physical adress of the airport.
		
		airportCode
		The 3 letter IATA airport code.
	-->
	<xs:element name="Airport">
		<xs:complexType>
			<xs:sequence>
				<xs:element minOccurs="0" ref="Address" />
			</xs:sequence>
			<xs:attribute name="airportCode" use="required"
				type="string" />
		</xs:complexType>
	</xs:element>
	<!--
		-
		Meal information used by air, hotel and rail.
		
		BookingClassCode
		Code for the meal.  For example, airlines use
		B     - Breakfast
		C     - Complimentary liquor
		D     - Dinner
		F     - Food for purchase
		G     - Food and beverage for purchase
		H     - Hot meal
		K     - Continental breakfast
		L     - Lunch
		M     - Meal
		N     - No meal service 
		O     - Cold meal
		P     - Liquor for purchase
		R     - Refreshments
		S     - Snack or brunch
		V     - Refreshments for purchase
		
		Description
		Textual description of the meal, including any special needs
		such as vegetarian or dairy-free.
	-->
	<xs:element name="Meal">
		<xs:complexType>
			<xs:sequence>
				<xs:element minOccurs="0" ref="BookingClassCode" />
				<xs:element minOccurs="0" ref="Description" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!-- Car Rental -->
	<!--
		Car rental information.
		
		Vendor
		Car rental vendor information.
		
		CarRentalPickup
		Pickup location for the rental car.
		
		CarRentalDropoff
		Drop off location for the rental car.
		
		BookingClassCode
		4 letter code for car.
		
		1st Letter - M (Mini), E (Economy), C (Compact), S (Standard),
		I (Intermediate), F (Full size), P (Premium), L (Luxury)
		V (MiniVan), X (Special)
		2nd Letter - B (2 door), C (2/4 door), D (4 door), T (Convertible),
		F (Four wheel drive), V (Van), W (Wagon), S (Sport)
		X (Special)
		3rd Letter - A (Automatic), M (Manual)
		4th Letter - R (A/c), N (No A/C)
		
		CarRentalFee
		Mutliple car rental fee can be specified to capture the
		break down of different fees.  The total of these fees must
		add up to the total at the line item level.
		
		LimitedMileage
		Mileage limit information
		
		AvailablePrice
		Other available prices for car rental that the user did not pick.
		
		travelSegment
		Textual information to identify this travel segment.
		This information is specific to the Travel Booking Provider.
		
		pickupTime
		The intended pickup date and time
		
		dropoffTime
		The intended dropoff date and time
	-->
	<xs:element name="CarRentalDetail">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Vendor" />
				<xs:element ref="CarRentalPickup" />
				<xs:element ref="CarRentalDropoff" />
				<xs:element minOccurs="0" ref="BookingClassCode" />
				<xs:element maxOccurs="unbounded" ref="CarRentalFee" />
				<xs:element minOccurs="0" ref="LimitedMileage" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="AvailablePrice" />
			</xs:sequence>
			<xs:attribute name="travelSegment" use="required"
				type="string" />
			<xs:attribute name="pickupTime" use="required"
				type="datetime.tz" />
			<xs:attribute name="dropoffTime" use="required"
				type="datetime.tz" />
		</xs:complexType>
	</xs:element>
	<!--
		Physical location where the rental car should be picked up.  This
		is either an Airport or off airport car rental location.
		
		Airport
		An airport location.
		
		Address
		Physical address of the car rental location
	-->
	<xs:element name="CarRentalPickup">
		<xs:complexType>
			<xs:choice>
				<xs:element ref="Airport" />
				<xs:element ref="Address" />
			</xs:choice>
		</xs:complexType>
	</xs:element>
	<!--
		Physical location where the rental car should be dropped off.
		This is either an Airport or off-airport car rental location.
		
		Airport
		An airport location.
		
		Address
		Physical address of the car rental location
	-->
	<xs:element name="CarRentalDropoff">
		<xs:complexType>
			<xs:choice>
				<xs:element ref="Airport" />
				<xs:element ref="Address" />
			</xs:choice>
		</xs:complexType>
	</xs:element>
	<!--
		This specifies the quantity and the unit of measure of the mileage
		limit.
		
		UnitOfMeasure
		Unit of measure either miles or kilometers.
		
		quantity
		The mileage limit amount.
	-->
	<xs:element name="LimitedMileage">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="UnitOfMeasure" />
			</xs:sequence>
			<xs:attribute name="quantity" use="required" type="r8" />
		</xs:complexType>
	</xs:element>
	<!--
		Car rental fee information.  CarRentalFee captures the actual
		charges and fee that applies to this rental.  Conditional charges
		such as extra mileages that are over the mileage limit should not
		be specified here but rather in the TermsAndConditions text.
		
		Total
		Total amount for this car rental fee.  All the total for the rates
		must add up to this amount.
		
		Rate
		The individual broken-down fee information.
		
		type
		Type of rate
		baseRate            - Base rental rate
		additionalDriver    - Additional driver fee
		airportAccessFee    - Airport Access fee
		dropOffCharge       - Drop off charge
		vehicleLicensingFee - Vehicle lincensing fee
		touristTax          - Tourist tax
		prepaidGasoline     - Prepaid gasoline charge
		navigationSystem    - Navigation system
		childSeat           - Child seat charge
		luggageRack         - Luggage rack charge
		collisionDamageInsurance    - Collision damage insurance
		liabilityInsurance          - Liability insurance
		mobilePhone         - Mobile phone base charge
		other               - Other charges.
	-->
	<xs:element name="CarRentalFee">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Total" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="Rate" />
			</xs:sequence>
			<xs:attribute name="type" default="baseRate">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="baseRate" />
						<xs:enumeration value="additionalDriver" />
						<xs:enumeration value="airportAccessFee" />
						<xs:enumeration value="dropOffCharge" />
						<xs:enumeration value="vehicleLicensingFee" />
						<xs:enumeration value="touristTax" />
						<xs:enumeration value="prepaidGasoline" />
						<xs:enumeration value="navigationSystem" />
						<xs:enumeration value="childSeat" />
						<xs:enumeration value="luggageRack" />
						<xs:enumeration
							value="collisionDamageInsurance" />
						<xs:enumeration value="liabilityInsurance" />
						<xs:enumeration value="mobilePhone" />
						<xs:enumeration value="other" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<!-- Hotel -->
	<!--
		Hotel detail information.
		
		Vendor
		Hotel vendor information.
		
		Address
		Physical address of the hotel.  This is might be different
		from the address specified in the Vendor field as the vendor
		address might be the head quarter address.
		
		RoomType
		The type of room reserved.
		
		BookingClassCode
		Hotel booking class code.
		
		Meal
		Any complementary meals that are included with the room.  For
		example, complementary continental breakfast.
		
		Rate
		Hotel rate information.  Multiple rates can be specified.  For
		example, the night rate, valet parking rate, and other rates.
		
		AvailablePrice
		Other available prices that user did not pick.  Available
		prices can be from the same vendor or different vendor.
		
		travelSegment
		Textual information to identify this travel segment.  This
		information is specific to the Travel Booking Provider.
		
		arrivalTime
		Date and time of arrival at the hotel.  This is used as an
		advisory to the hotel vendor for the arrival time.
		
		departureTime
		Date and time of departure from the hotel.  This is used as an
		advisory to the hotel vendor for the departure time.
		
		checkinTime
		The official checkin time.  For example, most hotel checkin
		time is 3:00 PM.
		
		checkoutTime
		The official checkout time.  For example, most hotel checkout
		time is 12:00 PM (noon).
		
		earlyCheckinAllowed
		Does the hotel allow early checkin?
		
		lateCheckoutAllowed
		Does the hotel allow late checkout?
	-->
	<xs:element name="HotelDetail">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Vendor" />
				<xs:element ref="Address" />
				<xs:element ref="RoomType" />
				<xs:element minOccurs="0" ref="BookingClassCode" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="Meal" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="Rate" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="AvailablePrice" />
			</xs:sequence>
			<xs:attribute name="travelSegment" use="required"
				type="string" />
			<xs:attribute name="arrivalTime" use="required"
				type="datetime.tz" />
			<xs:attribute name="departureTime" use="required"
				type="datetime.tz" />
			<xs:attribute name="checkinTime" use="required"
				type="time.tz" />
			<xs:attribute name="checkoutTime" use="required"
				type="time.tz" />
			<xs:attribute name="earlyCheckinAllowed">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="yes" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="lateCheckoutAllowed">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="yes" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<!--
		Information about a hotel room.
		
		Description
		Textual description of the hotel room.
		
		Amenities
		List of amenities for this hotel room.
		
		smoking
		Is the room a smoking or non-smoking room
		
		numberOfBed
		The number of beds in this room
		
		bedType
		The bed type in this room.
	-->
	<xs:element name="RoomType">
		<xs:complexType>
			<xs:sequence>
				<xs:element minOccurs="0" ref="Description" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="Amenities" />
			</xs:sequence>
			<xs:attribute name="smoking" use="required">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="yes" />
						<xs:enumeration value="no" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="numberOfBed" type="r8" />
			<xs:attribute name="bedType">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="king" />
						<xs:enumeration value="queen" />
						<xs:enumeration value="full" />
						<xs:enumeration value="double" />
						<xs:enumeration value="single" />
						<xs:enumeration value="other" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<!--
		Textual description of the amenities for the hotel room.
		
		Description
		Text description of this amenities.  For example,
		DSL connection, two telephone lines, and other information
		about a hotel room.
	-->
	<xs:element name="Amenities">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Description" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!-- Rail -->
	<!--
		Rail detail information.  A rail detail can have multiple legs.
		
		TripType
		Trip type for this rail.
		
		Rail leg
		The different rail legs that make up this rail detail.
		
		AvailablePrice
		Other available prices that the user did not pick for for this
		rail trip.
		
		Penalty
		Penalty (if any) associated with this rail trip.
	-->
	<xs:element name="RailDetail">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="TripType" />
				<xs:element maxOccurs="unbounded" ref="RailLeg" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="AvailablePrice" />
				<xs:element minOccurs="0" ref="Penalty" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		Rail leg is used to express information regarding a single leg for
		a rail travel.
		
		Vendor
		Rail vendor information.
		
		RailLegOrigin
		Rail originating location.
		
		RailLegDestination
		Rail Destination location.
		
		BookingClassCode
		Rail booking class code.
		
		Rate
		Rate information (if any) for this rail leg.  If specified,
		all the rates in all rail legs must add up to the total at the
		travel line item level.
		
		Meal
		Meal served for this leg (if any).
		
		travelSegment
		Textual information to identify this travel segment.  This
		information is specific to the Travel Booking Provider.
		
		departureTime
		Date and time of departure at the originating location.
		
		arrivalTime
		Date and time of arrival at the destination location.
		
		trainNumber
		Train number for this rail leg.
		
		seatNumber
		Seat number.
		
		carType
		Type of the rail car.
	-->
	<xs:element name="RailLeg">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Vendor" />
				<xs:element ref="RailLegOrigin" />
				<xs:element ref="RailLegDestination" />
				<xs:element minOccurs="0" ref="BookingClassCode" />
				<xs:element minOccurs="0" ref="Rate" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="Meal" />
			</xs:sequence>
			<xs:attribute name="travelSegment" use="required"
				type="string" />
			<xs:attribute name="departureTime" use="required"
				type="datetime.tz" />
			<xs:attribute name="arrivalTime" use="required"
				type="datetime.tz" />
			<xs:attribute name="trainNumber" use="required"
				type="string" />
			<xs:attribute name="seatNumber" type="string" />
			<xs:attribute name="carType">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="sleeper" />
						<xs:enumeration value="seat" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<!--
		The origin of a particular rail leg.  This can be an airport or a
		physical address of a rail station.
		
		Airport
		An airport location
		
		Address
		A physical address of a rail station
	-->
	<xs:element name="RailLegOrigin">
		<xs:complexType>
			<xs:choice>
				<xs:element ref="Airport" />
				<xs:element ref="Address" />
			</xs:choice>
		</xs:complexType>
	</xs:element>
	<!--
		The destination of a particular rail leg.  This can be an airport
		or a physical address of a rail station.
		
		Airport
		An airport location
		
		Address
		A physical address of a rail station
	-->
	<xs:element name="RailLegDestination">
		<xs:complexType>
			<xs:choice>
				<xs:element ref="Airport" />
				<xs:element ref="Address" />
			</xs:choice>
		</xs:complexType>
	</xs:element>
	<!-- Travel/Expense common definitions -->
	<!--
		The type of the trip. This is used by Air and Rail to indicate
		round trip, one way or multi-leg trip.
		
		type
		Type of the trip
		round       - a round trip
		oneWay      - a one way trip
		multiLeg    - a multi leg or open jaw trip
	-->
	<xs:element name="TripType">
		<xs:complexType>
			<xs:attribute name="type" use="required">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="round" />
						<xs:enumeration value="oneWay" />
						<xs:enumeration value="multiLeg" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<!--
		Information about a vendor that is providing this service.
		
		Address
		The physical address of the vendor.  This address normally is
		the business or head quarter address of the vendor.
		
		SupplierID
		Supplier id for this vendor.  This is just a (domain, value)
		pair so that Travel Booking Providers have the flexibility to
		define their id's according to an arbitrary convention (e.g.,
		(DUNS, 12345), (TaxID, 88888888)).
		
		Note that multiple supplier id can be specified.  This is so
		that Travel Booking Provider can have a single implementation
		that works with different Buyer implementations that use
		different supplier id domain.
		
		preferred
		Is this vendor a preferred vendor?
	-->
	<xs:element name="Vendor">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Address" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="SupplierID" />
			</xs:sequence>
			<xs:attribute name="preferred" use="required">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="yes" />
						<xs:enumeration value="no" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<!--
		Textual terms and conditions associated with an air fare, car
		rental, hotel, or rail.  For example, a car rental terms and
		conditions normally include boundary limit, additional mileage
		charges, gasoline charge and other restriction information.
		
		Multiple terms and conditions can be attached to a single travel
		line item.
		
		Description
		Textual terms and conditions.
	-->
	<xs:element name="TermsAndConditions">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" ref="Description" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		Policy violation (if any) that results from the user picking this
		particular travel.  Policy violations are associated with an
		individual line item of travel and not associated at the header
		level.  This allows for clear identification of the violation with
		the individual line item.
		
		Description
		Textual description of this violation.
		
		PolicyViolationJustification
		Justification for this violation given by user normally picked
		from a standard list of justifications at the Travel Booking
		Provider web site.
		
		Comments
		Additional comments to further clarify the justification given
		by user.
		
		level
		Violation level.
		warning     - a non serious violation.
		violation   - a serious violation of company policy.
	-->
	<xs:element name="PolicyViolation">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Description" />
				<xs:element ref="PolicyViolationJustification" />
				<xs:element minOccurs="0" ref="Comments" />
			</xs:sequence>
			<xs:attribute name="level" use="required">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="warning" />
						<xs:enumeration value="violation" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<!--
		Justification given by the user why they violate the company
		travel policy.  This justification value is normally picked from a
		pick list at the Travel Booking Provider web site.
		
		Description
		The justification of the violation picked from a standard list
		at the Travel Booking Provider web site.
	-->
	<xs:element name="PolicyViolationJustification">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Description" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		Penalty (if any) for this travel segment
		
		Money
		The penalty amount
		
		Description
		Textual description of the cause of the penalty.  For example,
		change fee associated with air ticket.
	-->
	<xs:element name="Penalty">
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Money.element">
					<xs:sequence>
						<xs:element ref="Description" />
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<!--
		Other avaible price.  AvailablePrice is used to express what other
		prices are available that the traveler did not pick.
		AvailablePrice is can be used to capture the lowest price, the
		highest price, the lowest compliant price, and the hight compliant
		price.
		
		Money
		The amount of the other available price.
		
		Description
		Textual description of the available price.  It explain
		how this price was derived at.  For example, a non direct flight
		exists with the flight number can be put here.
		
		Type
		Type of available price.  Currently we capture four
		different type.
		lowest              - The lowest price possible regardless of the
		traveling policies
		lowestCompliant     - The lowest price that still complies with
		the travel policies
		highestCompliant    - The highest price that still complies with
		the travel policies
		highest             - The highest price possible regardless of the travel
		policies
		other               - Other, specify in the description
	-->
	<xs:element name="AvailablePrice">
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Money.element">
					<xs:sequence>
						<xs:element minOccurs="0" ref="Description" />
					</xs:sequence>
					<xs:attribute name="type" use="required">
						<xs:simpleType>
							<xs:restriction base="xs:token">
								<xs:enumeration value="lowest" />
								<xs:enumeration value="lowestCompliant" />
								<xs:enumeration
									value="highestCompliant" />
								<xs:enumeration value="highest" />
								<xs:enumeration value="other" />
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<!--
		Booking class code used by airfare, car rental, hotel, and rail to
		indicate the class.
		
		Description
		Textual description of the code
		
		code
		code
	-->
	<xs:element name="BookingClassCode">
		<xs:complexType>
			<xs:sequence>
				<xs:element minOccurs="0" ref="Description" />
			</xs:sequence>
			<xs:attribute name="domain" use="required" type="string" />
			<xs:attribute name="code" use="required" type="string" />
		</xs:complexType>
	</xs:element>
	<!--
		Define a physical location and its address.  This can be used to 
		describe places such as airport, bus station, ferry dock, railway
		station and so on.
		
		Address
		Indicates the address of the place
		
		code
		Indicates the code the may represent the place.  For example,
		airport can have an airport code.
		
		domain
		Qualifier or domain for the code.  For example, airport code
		is IATA standard, the domain value would be "IATA"; however
		bus station code may be local specific.
	-->
	<xs:complexType name="Place.element">
		<xs:sequence>
			<xs:element ref="Place" />
		</xs:sequence>
	</xs:complexType>
	<xs:element name="Place">
		<xs:complexType>
			<xs:sequence>
				<xs:element minOccurs="0" ref="Address" />
			</xs:sequence>
			<xs:attribute name="code" type="string" />
			<xs:attribute name="domain" type="string" />
		</xs:complexType>
	</xs:element>
	<!-- Defines places such as city, airport or railway where trip or leg originated. -->
	<xs:element name="LegOrigin" type="Place.element" />
	<!-- Defines places such as city, airport or railway code where trip or leg ended. -->
	<xs:element name="LegDestination" type="Place.element" />
	<!--
		For cXML license agreement information, please see
		http://www.cxml.org/home/license.asp
		
		$Id: //ariba/cxml/schema/Modules/Transaction.mod#27 $
	-->
	<!--
		For better definitions of these Elements/Entities, refer to the cXML
		Transaction Specification documents.
	-->
	<!--
		Detailed per-unit asset information for a line item.
		
		Extrinsic
		Additional per-unit asset information
		
		serialNumber
		Manufacturer's serial number for the unit
		
		tagNumber
		Asset tag number for the unit
		
		location
		location of the unit
	-->
	<xs:element name="AssetInfo">
		<xs:complexType>
			<xs:sequence>
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="Extrinsic" />
			</xs:sequence>
			<xs:attribute name="tagNumber" type="string" />
			<xs:attribute name="serialNumber" type="string" />
			<xs:attribute name="location" type="string" />
		</xs:complexType>
	</xs:element>
	<!-- Basic transactional elements used throughout -->
	<!-- Defines gross amount in posted currency. -->
	<xs:element name="TotalAmountInPostedCurrency" type="Money.element" />
	<!--
		Defines gross amount in billing currency. If specified, customer
		needs to pay this amount.
	-->
	<xs:element name="TotalAmountInBillingCurrency"
		type="Money.element" />
	<!-- The bill to for an item. -->
	<xs:element name="BillTo">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Address" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!-- The ship to for a item. -->
	<xs:element name="ShipTo">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Address" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		Definition of a cXML Shipping item. Represents a shipping cost in the
		shopping basket (PunchOutOrderMessage) or an order to the supplier
		(OrderRequest). There could be one of these for the entire order, or one
		per lineitem.
		
		trackingDomain
		represents the logistics supplier, I.E., "FedEx", "UPS", etc.
		
		trackingId
		an optional element value that represents the logistics supplier
		tracking number
		
		tracking
		Deprecated - Do Not Use
	-->
	<xs:element name="Shipping">
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Money.element">
					<xs:sequence>
						<xs:element ref="Description" />
					</xs:sequence>
					<xs:attribute name="trackingDomain" type="string" />
					<xs:attribute name="trackingId" type="string" />
					<xs:attribute name="tracking" type="string" />
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<!--
		Defines discount applied.
		
		DiscountAmount
		The discount expressed as a flat amount with currency.
		
		DiscountPercent
		The discount rate expressed as a percentage.
	-->
	<xs:element name="Discount">
		<xs:complexType>
			<xs:choice>
				<xs:element ref="DiscountPercent" />
				<xs:element ref="DiscountAmount" />
			</xs:choice>
		</xs:complexType>
	</xs:element>
	<!--
		Defines the discount rate
		
		percent
		The discount rate expressed as a percentage.  A negative discount percent
		represents a penalty.
	-->
	<xs:element name="DiscountPercent">
		<xs:complexType>
			<xs:attribute name="percent" use="required" type="r8" />
		</xs:complexType>
	</xs:element>
	<!--
		Defines a payment term in an invoice or order.  This deprecates the
		InvoiceDetailPaymentTerm previously defined.  Payment term can be the 
		net term (without discount) or discount term (with discount).
		
		payInNumberOfDays
		The number of days after invoice effective date for the invoice to be paid.
		
		Discount
		The percentage or amount of the discount term.  This element should be omitted
		if the payment term is a net term.
	-->
	<xs:element name="PaymentTerm">
		<xs:complexType>
			<xs:sequence>
				<xs:element minOccurs="0" ref="Discount" />
			</xs:sequence>
			<xs:attribute name="payInNumberOfDays" use="required"
				type="uint" />
		</xs:complexType>
	</xs:element>
	<!-- The list of valid payment types. -->
	<xs:element name="Payment">
		<xs:complexType>
			<xs:sequence>
				<xs:element minOccurs="0" ref="PostalAddress" />
			</xs:sequence>
			<xs:attribute name="number" use="required" type="number" />
			<xs:attribute name="expiration" use="required" type="date" />
			<xs:attribute name="name" type="string" />
		</xs:complexType>		
	</xs:element>	
	<xs:element name="PCard">
		<xs:complexType>
			<xs:sequence>
				<xs:element minOccurs="0" ref="PostalAddress" />
			</xs:sequence>
			<xs:attribute name="number" use="required" type="number" />
			<xs:attribute name="expiration" use="required" type="date" />
			<xs:attribute name="name" type="string" />
		</xs:complexType>		
	</xs:element>	
	<!--
		Defines an accounting segment.  Segment is an older, deprecated way to
		transport this information.
		
		type
		The accounting type of this segment.
		
		id
		The unique key of this Segment against the type.
		
		description
		Textual description of the Segment. For human readability.
	-->
	<xs:element name="Segment">
		<xs:complexType>
			<xs:attribute name="type" use="required" type="string" />
			<xs:attribute name="id" use="required" type="string" />
			<xs:attribute name="description" use="required"
				type="string" />
		</xs:complexType>
	</xs:element>
	<!--
		Defines an accounting segment.  AccountingSegment is the newer, better
		way to transport this information.  Name corresponds to the type
		attribute of Segment; Description corresponds to description.  Both add
		required locale attributes to the strings.
		
		id
		The unique key of this Segment against the type.
	-->
	<xs:element name="AccountingSegment">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Name" />
				<xs:element ref="Description" />
			</xs:sequence>
			<xs:attribute name="id" use="required" type="string" />
		</xs:complexType>
	</xs:element>
	<!--
		An accounting object.  Use of the Segment element here is deprecated.
		
		name
		The name of the object containing the specified accounting segments.
	-->
	<xs:complexType name="cxml.accounting">
		<xs:choice>
			<xs:element maxOccurs="unbounded" ref="Segment" />
			<xs:element maxOccurs="unbounded" ref="AccountingSegment" />
		</xs:choice>
	</xs:complexType>
	<xs:element name="Accounting">
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="cxml.accounting">
					<xs:attribute name="name" use="required"
						type="string" />
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<!-- A charge against an Accounting element. -->
	<xs:element name="Charge" type="Money.element" />
	<!--
		The combination of a Charge against an Accounting Element. A distribution
		represents the breakdown of one overall amount into sub-amounts.
	-->
	<xs:element name="Distribution">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Accounting" />
				<xs:element ref="Charge" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="TaxAmount" type="Money.element" />
	<xs:element name="TaxableAmount" type="Money.element" />
	<!--
		One language-specific string for the location of tax,
		e.g. London, Canada, California, etc.
		
		xml:lang
		The language or locale in which the location of tax is written.
	-->
	<xs:element name="TaxLocation">
		<xs:complexType mixed="true">
			<xs:attribute ref="lang" use="required" />
		</xs:complexType>
	</xs:element>
	<!-- string -->
	<!--
		
		TriangularTransactionLawReference indicates the relevant law as
		titled for the local jurisdiction in the scenario of a triangular
		transaction.  ex: Triangulation, article 28c,E paragraph 3 of the
		6th EU VAT Directive
		
		xml:lang
		the language in which the law reference is written.
	-->
	<xs:element name="TriangularTransactionLawReference">
		<xs:complexType mixed="true">
			<xs:attribute ref="lang" use="required" />
		</xs:complexType>
	</xs:element>
	<!--
		Defines details of one type of tax.
		
		TaxableAmount
		The taxable amount.
		
		TaxAmount
		The tax amount.
		
		TaxLocation
		The tax location.
		
		Description
		The textual description of the current type of tax.
		
		TriangularTransactionLawReference
		The law reference for transactions where isTriangularTransaction is True
		
		purpose
		The purpose of the tax, e.g., tax (tax), custom duty, shippingTax, 
		specialHandlingTax, etc.
		
		category
		The tax category, Sales tax (sales), Use tax (usage), VAT (vat),
		GST (gst) are defined categories. Other values are permitted.
		
		percentageRate
		The tax rate in number of percentage.
		
		isVatRecoverable
		True if the VAT is recoverable.  Default is false.
		
		taxPointDate
		refers to the date on which VAT becomes due.
		
		paymentDate
		indicate the date when payment must be made.
		
		isTriangularTransaction
		True if the transaction is triangular.  Default is false.
		
		exemptDetail
		If the TaxAmount is zero, VAT or other regulations may require
		a reason why.  zeroRated means the tax rate is zero.  exempt
		means the item or items are exempt from taxation.
		
	-->
	<xs:element name="TaxDetail">
		<xs:complexType>
			<xs:sequence>
				<xs:element minOccurs="0" ref="TaxableAmount" />
				<xs:element ref="TaxAmount" />
				<xs:element minOccurs="0" ref="TaxLocation" />
				<xs:element minOccurs="0" ref="Description" />
				<xs:element minOccurs="0"
					ref="TriangularTransactionLawReference" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="Extrinsic" />
			</xs:sequence>
			<xs:attribute name="purpose" type="string" />
			<xs:attribute name="category" use="required" type="string" />
			<xs:attribute name="percentageRate" type="r8" />
			<xs:attribute name="isVatRecoverable">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="yes" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="taxPointDate" type="datetime.tz" />
			<xs:attribute name="paymentDate" type="datetime.tz" />
			<xs:attribute name="isTriangularTransaction">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="yes" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="exemptDetail">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="zeroRated" />
						<xs:enumeration value="exempt" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<!--
		Definition of a cXML Tax item. This represents what a Tax element should
		be in the classic notion of a line on a PO or Invoice. It can also
		represent a per-lineitem tax element depending on where it appears
		(inside of a item ELEMENT or inside of a something like a supplierOrder
		ELEMENT).
		
		Represents a tax item in the shopping basket. There could be one of these
		for the entire order, or one per lineitem.
		
		The total amount of taxes for the line item or order should be reflected
		in the Money element. The breakdown of taxes, for example, tax on shipping
		or tax on goods should be represented in separate TaxDetail elements.
	-->
	<xs:element name="Tax">
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Money.element">
					<xs:sequence>
						<xs:element ref="Description" />
						<xs:element minOccurs="0" maxOccurs="unbounded"
							ref="TaxDetail" />
						<xs:element minOccurs="0" maxOccurs="unbounded"
							ref="Extrinsic" />
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<!-- Item Elements -->
	<!--
		The representation of a line item as it needs to be for sending to a
		supplier.
		
		quantity
		How many items are desired. Supplier and Commodity level items in an order of type
		"blanket" will use a default value of "1". The quantity in this case will not be
		used to compute the sub total. The MaxAmount in the BlanketItemDetail will be 
		used to indicate any line level amounts.
		lineNumber
		Position (counting from 1) of this item in an order.  Used to
		maintain a reference between items in create and update OrderRequest
		documents.
		requisitionID
		The buyers system requisition id for this line item. It might be the
		same as orderID, and it might not be included at all.  Must not be
		included if requisitionID is specified in the OrderRequestHeader.
		requestedDeliveryDate
		The date this item was requested for delivery.
		agreementItemNumber 
		The corresponding Item Number of the Item in the Master Agreement if this is 
		a 'release' order item.
	-->
	<xs:element name="ItemOut">
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="ItemID.element">
					<xs:sequence>
						<xs:element minOccurs="0" ref="Path" />
						<xs:choice minOccurs="0">
							<xs:element ref="ItemDetail" />
							<xs:element ref="BlanketItemDetail" />
						</xs:choice>
						<xs:choice minOccurs="0">
							<xs:element ref="SupplierID" />
							<xs:element ref="SupplierList" />
						</xs:choice>
						<xs:element minOccurs="0" ref="ShipTo" />
						<xs:element minOccurs="0" ref="Shipping" />
						<xs:element minOccurs="0" ref="Tax" />
						<xs:element minOccurs="0" ref="SpendDetail" />
						<xs:element minOccurs="0" maxOccurs="unbounded"
							ref="Distribution" />
						<xs:element minOccurs="0" maxOccurs="unbounded"
							ref="Contact" />
						<xs:element minOccurs="0" ref="Comments" />
					</xs:sequence>
					<xs:attribute name="quantity" use="required"
						type="r8" />
					<xs:attribute name="lineNumber" type="uint" />
					<xs:attribute name="requisitionID" type="string" />
					<xs:attribute name="agreementItemNumber"
						type="string" />
					<xs:attribute name="requestedDeliveryDate"
						type="date" />
					<xs:attribute name="isAdHoc">
						<xs:simpleType>
							<xs:restriction base="xs:token">
								<xs:enumeration value="yes" />
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<!--
		The representation of a line item as it needs to be for sending to a
		buyer.
		
		quantity
		How many items are desired.
		lineNumber
		Position (counting from 1) of this item in an order.  Used to
		maintain a reference between items in create and update OrderRequest
		documents.
	-->
	<xs:element name="ItemIn">
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="ItemID.element">
					<xs:sequence>
						<xs:element minOccurs="0" ref="Path" />
						<xs:element ref="ItemDetail" />
						<xs:element minOccurs="0" ref="SupplierID" />
						<xs:element minOccurs="0" ref="ShipTo" />
						<xs:element minOccurs="0" ref="Shipping" />
						<xs:element minOccurs="0" ref="Tax" />
						<xs:element minOccurs="0" ref="SpendDetail" />
					</xs:sequence>
					<xs:attribute name="quantity" use="required"
						type="r8" />
					<xs:attribute name="lineNumber" type="uint" />
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<!--
		StatusUpdate for Confirmation (type=RequestToPay) request.
		
		transactionTimestamp
		time when the XMLPay transaction was submitted
		
		transactionID
		an identifier assisgned to the transaction by the payment processing gateway
		
		authorizationID
		the authorization code for the transaction provided by the bank
		
		isFailed
		should have a status code greater than zero.  Zero implies a successful transaction.
	-->
	<xs:element name="PaymentStatus"
		substitutionGroup="cxml.statuses">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="PCard" />
				<xs:element ref="Total" />
				<xs:element minOccurs="0" ref="Shipping" />
				<xs:element minOccurs="0" ref="Tax" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="Extrinsic" />
			</xs:sequence>
			<xs:attribute name="orderID" use="required" type="string" />
			<xs:attribute name="transactionTimestamp" use="required"
				type="datetime.tz" />
			<xs:attribute name="type" use="required">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="Authorization" />
						<xs:enumeration value="Settlement" />
						<xs:enumeration value="Sale" />
						<xs:enumeration value="Credit" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="isFailed">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="yes" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="transactionID" type="string" />
			<xs:attribute name="authorizationID" type="string" />
		</xs:complexType>
	</xs:element>
	<!--
		Partial amount paid against an InvoiceDetail request. Used in InvoiceStatus.
		If this element exists in an InvoiceStatus element, it should mean that the buyer
		does not pay the full amount as the InvoiceDetail request specified. 
	-->
	<xs:element name="PartialAmount" type="Money.element" />
	<!--
		StatusUpdate for InvoiceDetail request.
		
		InvoiceIDInfo
		ID of an invoice known to the supplier system. This attribute is used to reference an invoice in StatusUpdateRequest when DocumentReference is omitted.
		
		PartialAmount
		The partial amount paid against the InvoiceDetail document.  This attribute is
		only relevant when the status type is "paid".
		
		Comments
		Comments associated with the status update.
		
		type
		Type of the invoice status. 
		processing - The invoice is received and being processed.
		canceled - The invoice has been canceled.
		reconciled - The invoice is reconciled. 
		rejected - The invoice is rejected.
		paying - The invoice is being paid. 
		paid - The InvoiceDetail request is paid.  
	-->
	<xs:element name="InvoiceStatus"
		substitutionGroup="cxml.statuses">
		<xs:complexType>
			<xs:sequence>
				<xs:element minOccurs="0" ref="InvoiceIDInfo" />
				<xs:element minOccurs="0" ref="PartialAmount" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="Comments" />
			</xs:sequence>
			<xs:attribute name="type" use="required">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="processing" />
						<xs:enumeration value="canceled" />
						<xs:enumeration value="reconciled" />
						<xs:enumeration value="rejected" />
						<xs:enumeration value="paying" />
						<xs:enumeration value="paid" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<!-- OrderRequest* Elements -->
	<!--
		Definition of an order.  This is the data that is sent to the supplier
		to have them place an order in their order management system. The new
		world order equivalent of a PO.
	-->
	<xs:element name="OrderRequest" substitutionGroup="cxml.requests">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="OrderRequestHeader" />
				<xs:element maxOccurs="unbounded" ref="ItemOut" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		Header of an order.  This is the data that is sent to the supplier
		to have them place an order in their order management system. Money
		represents the total amount of this order.
		
		orderID
		The buyer system orderID for this request.  This is an internal
		Buyer unique number.
		
		orderVersion
		The buyer system order version number for this request. Relevant when
		the OrderRequest represents a change order request. The version number
		for the original document should be 1 and should be incremented by 1 for
		each subsequent version (2,3,4...).
		
		isInternalVersion
		A value of yes indicates that this OrderRequest is a version whose changes from
		the previous version are deemed internal to the buyer system. Relevant when the
		version being sent to the supplier is not the first version.
		
		orderDate
		The date and time the order request was created.
		
		type
		The type of the order request. Defaults to "new".
		
		requisitionID
		The buyers system requisition id for this entire order. It might be
		the same as orderID, and it might not be included at all.  Must not
		be included if requisitionID is specified in any ItemOut elements.
		
		shipComplete
		Optional preference for "hold until complete" processing.  Defaults
		to shipping when available if not specified.  Future versions of the
		protocol may extend the datatype of this attribute to include
		additional possible values (such as "unlessGreatlyBackOrdered"?).
		orderType
		"release", indicates that this is a Release Order from an existing
		Master Agreement/ Contract. Default is regular. Type "blanket" indicates
		that this order is a Blanket Order.
		releaseRequired
		"yes" if the blanket order allows released. Currently used only if 
		orderType is "blanket".
		effectiveDate
		Date the order is available for ordering. If orderType is "blanket", 
		effectiveDate is required. Otherwise it is optional. Currently only
		used with blanket orders.
		expirationDate
		Date the order is no longer available. If not defined, end date is open
		ended. Currently only used with blanket orders.
		agreementID
		Identifies associated agreement corresponding to the Release Order.
		At an implementation level it has to be validated that if the orderType
		is 'release' then the appropriate agreementID is also provided.
		agreementPayloadID
		Optional PayloadID for the corresponding Master Agreement.
		
		parentAgreementID
		Used only in the context of a Order of type "blanket". This identifies the
		parent blanket order if the current order is part of an hierarchy.
		
		parentAgreementPayloadID
		Optional PayloadID for the corresponding Master Agreement.
		
		Total 
		If the Order is of type "blanket", the Total element is not used to compute
		the sum of the item level subtotals. The total is used to indicate the maximum
		commitment with the supplier. The total will not add upto the individual item
		level sub total or MaxAmounts. The item level MaxAmounts should not exceed the
		header level total. If the item level MaxAmount is not specified it is assumed
		that the Item level maximum amount is the same as the Total.
		
		The contained DocumentReference element would appear in a document only
		when the type is "update" or "delete".  In that case, the
		DocumentReference would reference the most recent OrderRequest document
		for the order.  For example when an order is created, updated and then
		deleted, the final document should contain a DocumentReference
		referring to the OrderRequest with type="update".  That document would,
		in turn, refer to the original (type="new") OrderRequest document.
	-->
	<xs:element name="OrderRequestHeader">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Total" />
				<xs:element minOccurs="0" ref="ShipTo" />
				<xs:element ref="BillTo" />
				<xs:element minOccurs="0" ref="Shipping" />
				<xs:element minOccurs="0" ref="Tax" />
				<xs:element minOccurs="0" ref="Payment" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="PaymentTerm" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="Contact" />
				<xs:element minOccurs="0" ref="Comments" />
				<xs:element minOccurs="0" ref="Followup" />
				<xs:element minOccurs="0" ref="DocumentReference" />
				<xs:element minOccurs="0" ref="SupplierOrderInfo" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="Extrinsic" />
			</xs:sequence>
			<xs:attribute name="orderID" use="required" type="string" />
			<xs:attribute name="orderDate" use="required"
				type="datetime.tz" />
			<xs:attribute name="orderType" default="regular">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="release" />
						<xs:enumeration value="regular" />
						<xs:enumeration value="blanket" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="releaseRequired">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="yes" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="type" default="new">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="new" />
						<xs:enumeration value="update" />
						<xs:enumeration value="delete" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="orderVersion" type="number" />
			<xs:attribute name="isInternalVersion">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="yes" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="parentAgreementID" type="string" />
			<xs:attribute name="parentAgreementPayloadID" type="string" />
			<xs:attribute name="effectiveDate" type="datetime.tz" />
			<xs:attribute name="expirationDate" type="datetime.tz" />
			<xs:attribute name="agreementID" type="string" />
			<xs:attribute name="agreementPayloadID" type="string" />
			<xs:attribute name="requisitionID" type="string" />
			<xs:attribute name="shipComplete">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="yes" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<!--
		Definition of a Master Agreement.  This is the electronic document representing the 
		Master Agreement that was created and agreed upon in the Buying organizations.
	-->
	<xs:element name="MasterAgreementRequest"
		substitutionGroup="cxml.requests">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="MasterAgreementRequestHeader" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="AgreementItemOut" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		Header of an Agreement.  This is the header level information in the Agreement.
		agreementID
		The buyer system agreementID for this request.  the Master Agreement Number in Buyer.
		agreementDate
		The date and time the agreement request was created. 
		This is different from the effective and expiry date of the agreement.
		agreementType
		Identifies if this is a Value based agreement or quantity based Agreement.
		requestType
		The type of the agreement request. Defaults to "new".
		effectiveDate
		Date the Master Agreement is available for ordering/releases.
		expirationDate
		Date the Master Agreement is no longer available.
		parentAgreementPayloadID
		PayloadID for the corresponding parent document that this agreement is derived from.
		operation: 
		"delete" operation will be used to cancel an existing Master Agreement, the
		assumption here is that the delete request will be an exact replica of the 
		original request.
		"new" operation identifies a new MasterAgreement transaction.
		"update" operation identified an update to an existing transaction. 
		the DocumentReference attribute should be used to indicate the Orignal
		Document information.
		Note: 
		Use "Contact" element to supply any additional Address or Location information.
	-->
	<xs:element name="MasterAgreementRequestHeader">
		<xs:complexType>
			<xs:sequence>
				<xs:element minOccurs="0" ref="MaxAmount" />
				<xs:element minOccurs="0" ref="MinAmount" />
				<xs:element minOccurs="0" ref="MaxReleaseAmount" />
				<xs:element minOccurs="0" ref="MinReleaseAmount" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="Contact" />
				<xs:element minOccurs="0" ref="Comments" />
				<xs:element minOccurs="0" ref="DocumentReference" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="Extrinsic" />
			</xs:sequence>
			<xs:attribute name="agreementID" use="required"
				type="string" />
			<xs:attribute name="agreementDate" use="required"
				type="datetime.tz" />
			<xs:attribute name="type" default="value">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="value" />
						<xs:enumeration value="quantity" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="effectiveDate" use="required"
				type="datetime.tz" />
			<xs:attribute name="expirationDate" use="required"
				type="datetime.tz" />
			<xs:attribute name="parentAgreementPayloadID" type="string" />
			<xs:attribute name="operation" default="new">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="new" />
						<xs:enumeration value="update" />
						<xs:enumeration value="delete" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<!--
		The representation of a  agreement line item as it needs to be for sending to a
		supplier.
		maxQuantity 
		maximum quantity for this particular lineItem
		minQuantity 
		minimum quantity for this particular lineItem
		maxReleaseQuantity 
		maximum quantity per release for this particular lineItem
		minReleaseQuantity 
		minimum quantity per release for this particular lineItem
		
		Note :
		The #lineNumber attribute in the <ItemOut> will be used to specify the corresponding 
		lineNumber on the Master Agreement in the Procurement Application.
		At an implementation, level checks should be made to validate this.
		Note :
		The quantity attribute in the ItemOut tag should be set to one and ignored at 
		the Mater Agreement implementation processing stage. 
		Note :
		The MaxReleaseAmount/Quantity and MinReleaseAmount/Quantity at an item level i
		indicate the ItemLevel amounts and quantities per release.
	-->
	<xs:element name="AgreementItemOut">
		<xs:complexType>
			<xs:sequence>
				<xs:element minOccurs="0" ref="MaxAmount" />
				<xs:element minOccurs="0" ref="MinAmount" />
				<xs:element minOccurs="0" ref="MaxReleaseAmount" />
				<xs:element minOccurs="0" ref="MinReleaseAmount" />
				<xs:element ref="ItemOut" />
			</xs:sequence>
			<xs:attribute name="maxQuantity" type="r8" />
			<xs:attribute name="minQuantity" type="r8" />
			<xs:attribute name="maxReleaseQuantity" type="r8" />
			<xs:attribute name="minReleaseQuantity" type="r8" />
		</xs:complexType>
	</xs:element>
	<!-- The maximum amount  for something. -->
	<xs:element name="MaxAmount" type="Money.element" />
	<!-- The minimum amount  for something. -->
	<xs:element name="MinAmount" type="Money.element" />
	<!-- The contractual maximum amount per Release of this Master Agreement. -->
	<xs:element name="MaxReleaseAmount" type="Money.element" />
	<!-- The contractual minimum amount per Release of this Master Agreement -->
	<xs:element name="MinReleaseAmount" type="Money.element" />
	<!-- The maximum quantity  for something. -->
	<xs:element name="MaxQuantity" type="xs:string" />
	<!-- number -->
	<!-- The minimum quantity  for something. -->
	<xs:element name="MinQuantity" type="xs:string" />
	<!-- number -->
	<!--
		Followup
		
		Location to which future StatusUpdateRequest documents should be
		posted.  In general, this is the input location for any later
		documents which reference the current OrderRequest document.
	-->
	<xs:element name="Followup">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="URL" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!-- PunchOut* Elements -->
	<!--
		Definition of a PunchOut Setup Request.  This is the data that is sent
		to the external system that the procurement application is going to
		extract catalog data from.
		
		The BrowserFormPost element contains the URL we would like the browser
		re-directed to when the PunchOut shopping experience is finished (where
		the PunchOutOrder message should be returned).
	-->
	<xs:element name="PunchOutSetupRequest"
		substitutionGroup="cxml.requests">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="BuyerCookie" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="Extrinsic" />
				<xs:element minOccurs="0" ref="BrowserFormPost" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="Contact" />
				<xs:element minOccurs="0" ref="SupplierSetup" />
				<xs:element minOccurs="0" ref="ShipTo" />
				<xs:element minOccurs="0" ref="SelectedItem" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="ItemOut" />
			</xs:sequence>
			<xs:attribute name="operation" use="required">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="create" />
						<xs:enumeration value="inspect" />
						<xs:enumeration value="edit" />
						<xs:enumeration value="source" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="BuyerCookie" type="any" />
	<!-- any valid XML data -->
	<xs:element name="SelectedItem" type="ItemID.element" />
	<xs:element name="SupplierSetup">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="URL" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="PunchOutSetupResponse" type="StartPage.element" />
	<!--
		Definition of a PunchOut Order Message.  This is the data that is sent
		back to the procurement application from the external system that the
		PunchOut Request was targeted at.
	-->
	<xs:element name="PunchOutOrderMessage"
		substitutionGroup="cxml.messages">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="BuyerCookie" />
				<xs:element ref="PunchOutOrderMessageHeader" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="ItemIn" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		Header of a PunchOut Order Request.  This is the data that is sent from
		the supplier to transfer the supplier acquired shopping basket back to
		the buyer system.
		
		operationAllowed
		Highest operation allowed on the PunchOut shopping basket.
		"create" allows only later OrderRequest operations on these items.
		"inspect" adds a PunchOutSetupRequest with operation="inspect".
		And, "edit" allows operation="edit" in that later Setup request.
		
		quoteStatus 
		"pending"  - Identifies that the transaction is still pending
		"final" - Identifies that the transaction is complete
	-->
	<xs:element name="PunchOutOrderMessageHeader">
		<xs:complexType>
			<xs:sequence>
				<xs:element minOccurs="0" ref="SourcingStatus" />
				<xs:element ref="Total" />
				<xs:element minOccurs="0" ref="ShipTo" />
				<xs:element minOccurs="0" ref="Shipping" />
				<xs:element minOccurs="0" ref="Tax" />
				<xs:element minOccurs="0" ref="SupplierOrderInfo" />
			</xs:sequence>
			<xs:attribute name="operationAllowed" use="required">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="create" />
						<xs:enumeration value="inspect" />
						<xs:enumeration value="edit" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="quoteStatus" default="final">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="pending" />
						<xs:enumeration value="final" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<!--
		====
		Other small Request elements.
		====
	-->
	<!--
		Request to update the status of an earlier transaction.
		
		DocumentReference 
		A reference by payloadID to a cXML document to be updated.  This 
		element can be omitted only when InvoiceStatus is specified and
		the InvoiceStatus contains InvoiceIDInfo.
		
	-->
	<xs:element name="cxml.statuses" abstract="true" />
	<xs:element name="StatusUpdateRequest"
		substitutionGroup="cxml.requests">
		<xs:complexType>
			<xs:sequence>
				<xs:element minOccurs="0" ref="DocumentReference" />
				<xs:element ref="Status" />
				<xs:element minOccurs="0" ref="cxml.statuses" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="Extrinsic" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		A reference to an attachment containing cXML document. 
		
		Attachment
		A reference to the attachment containing a cXML document.  The 
		attachment must be either a single, complete cXML document or another 
		MIME envelope containing a single, complete cXML document with 
		attachments.
	-->
	<xs:element name="cXMLAttachment">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Attachment" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		Request to forward a cXML document to another party.  This Request
		occurs in multiple DTD files and is used depending on where (in which
		DTD) the forwarded message resides.
		
		cXMLAttachment
		A reference to the attachment containing the cXML document being 
		forwarded.  Refer to cXMLAttachment for more details.
		
		cXML
		Deprecated - Do Not Use.
	-->
	<xs:element name="CopyRequest" substitutionGroup="cxml.requests">
		<xs:complexType>
			<xs:choice>
				<xs:element ref="cXMLAttachment" />
				<xs:element ref="cXML" />
			</xs:choice>
		</xs:complexType>
	</xs:element>
	<!--
		Status for a pre-existing sourcing transaction. The textual content indicates
		the display information. "action" attribute defines the context of this message
		based on the value.
		
		approve : Approve the pending transaction
		deny : deny pending transaction
		cancel : cancel any preexisting transaction.
		
	-->
	<xs:element name="SourcingStatus"
		substitutionGroup="cxml.statuses">
		<xs:complexType mixed="true">
			<xs:attribute name="action">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="approve" />
						<xs:enumeration value="cancel" />
						<xs:enumeration value="deny" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute ref="lang" use="required" />
		</xs:complexType>
	</xs:element>
	<!--
		For cXML license agreement information, please see
		http://www.cxml.org/home/license.asp
		
		$Id: //ariba/cxml/schema/Modules/Transaction.mod#5 $
	-->
	<!--
		For better definitions of these Elements/Entities, refer to the cXML
		Transaction Specification documents.
	-->
	<!-- Basic financial elements used throughout -->
	<!--
		The following defines a list of money amounts.
		
		DepositAmount
		The amount of deposit or prepayment.
		
		SubtotalAmount
		The subtotal amount.
		
		DiscountAmount
		Defines the discount amount
		
		SpecialHandlingAmount
		The special handling amount.
		
		ShippingAmount
		The shipping amount.
		
		GrossAmount
		The gross amount.
		
		NetAmount
		The net amount.
		
		DueAmount
		The due amount.
		
		FeeAmount
		Defines gross amount of the fee associated with a purchase
		in original currency.
	-->
	<xs:element name="DepositAmount" type="Money.element" />
	<xs:element name="SubtotalAmount" type="Money.element" />
	<xs:element name="SpecialHandlingAmount">
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Money.element">
					<xs:sequence>
						<xs:element minOccurs="0" ref="Description" />
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="ShippingAmount" type="Money.element" />
	<xs:element name="GrossAmount" type="Money.element" />
	<xs:element name="NetAmount" type="Money.element" />
	<xs:element name="DueAmount" type="Money.element" />
	<xs:element name="DiscountAmount" type="Money.element" />
	<xs:element name="FeeAmount" type="Money.element" />
	<!-- Defines a Purchasing Card element used for payment -->
	
	<!--
		For cXML license agreement information, please see
		http://www.cxml.org/home/license.asp
		
		$Id$
	-->
	<!--
		This element captures spend detail information.  SpendDetail can
		be used in the ItemIn and ItemOut and for the following types of
		messages:
		
		PunchOutSetupRequest
		PunchOutOrderMessage
		OrderRequest
		ConfirmationRequest
		
		But not for:
		
		MasterAgreementRequest
		
		TravelDetail
		Travel details for the current travel line item.
		
		LaborDetail
		Labor details for the current temporary labor line item.
		
		FeeDetail
		Fee details for the current fee line item.
		
		Extrinsic
		Detail information for the any undefined spend category.  The name
		attribute of the Extrinsic element should specify the type of the
		spend category (e.g., (PrintDetail, ProjectLaborDetail))
		
	-->
	<xs:element name="SpendDetail">
		<xs:complexType>
			<xs:choice>
				<xs:element ref="TravelDetail" />
				<xs:element ref="FeeDetail" />
				<xs:element ref="LaborDetail" />
				<xs:element ref="Extrinsic" />
			</xs:choice>
		</xs:complexType>
	</xs:element>
	<!--
		FeeDetail contains additional information about a line item for a fee, 
		which may or may not be recurring.
		
		UnitRate
		The amount(s) to be paid per unit (of time or other measure).
		In the case of multiple UnitRates (i.e., a "rate schedule"), it is
		customary and expected that each UnitRate will include a
		TermReference to distinguish them.
		
		Period
		The Period of time over which the fee is charged, if applicable.
		
		isRecurring 
		Indicates that the fee is recurring (charged more than once).
	-->
	<xs:element name="FeeDetail">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" ref="UnitRate" />
				<xs:element minOccurs="0" ref="Period" />
			</xs:sequence>
			<xs:attribute name="isRecurring">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="yes" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<!--
		For cXML license agreement information, please see
		http://www.cxml.org/home/license.asp
		
		$Id: $
	-->
	<!--
		LaborDetail contains information about an item for a temporary
		labor engagement. 
		
		UnitRate
		The amount(s) to be paid per unit (of time or other measure).
		In the case of multiple UnitRates (i.e., a "rate schedule"), it is
		customary and expected that each UnitRate will include a
		TermReference to distinguish them.
		
		Period
		The Period of time over which the service occurs.
		
		Contractor
		Identifies the contractor being engaged
		
		JobDescription
		Description of the job or work to be performed.
		
		Supervisor
		The person who is expected to supervise the contractor.
		
		WorkLocation
		Place where the work is expected to be performed.
		
		supplierReferenceCode
		The supplier's quote or proposal id, for cross-reference.
	-->
	<xs:element name="LaborDetail">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" ref="UnitRate" />
				<xs:element ref="Period" />
				<xs:element minOccurs="0" ref="Contractor" />
				<xs:element minOccurs="0" ref="JobDescription" />
				<xs:element minOccurs="0" ref="Supervisor" />
				<xs:element minOccurs="0" ref="WorkLocation" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="Extrinsic" />
			</xs:sequence>
			<xs:attribute name="supplierReferenceCode" type="string" />
		</xs:complexType>
	</xs:element>
	<!--     Text description of a job (service) -->
	<xs:element name="JobDescription">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Description" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--     Contact information for the person supervising a job (service) -->
	<xs:element name="Supervisor">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Contact" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--     Address of the location where a service is to be performed -->
	<xs:element name="WorkLocation">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Address" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		Definition of a Contractor used in the context of temp labor. 
		The contractor is uniquely identified by a contractor identifier. 
		The piece of identification for a contractor is exchanged between 
		the buyer and the supplier prior to sending out order/timecards.
	-->
	<!--
		Definition of a Contractor used in the context of temp labor. 
		The contractor is uniquely identified by a contractor identifier. 
		The piece of identification for a contractor is exchanged between 
		the buyer and the supplier prior to sending out order/timecards.
	-->
	<xs:element name="Contractor">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="ContractorIdentifier" />
				<xs:element ref="Contact" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		Definition of a ContractorIdentifier. uniquely identifies a contractor.
		
		domain
		in what domain the identity is represented. This is for the
		end systems to know who assigned the id. buyerReferenceID 
		implies that it is something generated by the buyer system 
		and supplierReferenceID implies that it is something generated 
		by the supplier system/entered by the supplier.
	-->
	<xs:element name="ContractorIdentifier">
		<xs:complexType mixed="true">
			<xs:attribute name="domain" use="required">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="supplierReferenceID" />
						<xs:enumeration value="buyerReferenceID" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<!--
		For cXML license agreement information, please see
		http://www.cxml.org/home/license.asp
		
		$Id: //ariba/cxml/schema/Modules/Reference.mod#6 $
	-->
	<!--
		For better definitions of these Elements/Entities, refer to the cXML
		User's Guide and related documents.
	-->
	<!--
		The OrderReference element provides a clear reference to a prior
		OrderRequest document.  While the contained DocumentReference provides
		an unambiguous reference, the additional attributes of the
		OrderReference may allow the ConfirmationRequest and ShipNoticeRequest
		to be viewed independently.
		
		orderID
		The buyer system orderID for this request. Basically, what the PO
		number is today.  If present, must be copied directly from the
		referenced OrderRequest document's OrderRequestHeader.
		orderDate
		The date and time the order request was created.  If present, must
		be copied directly from the referenced OrderRequest document's
		OrderRequestHeader.
	-->
	<xs:element name="OrderReference">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="DocumentReference" />
			</xs:sequence>
			<xs:attribute name="orderID" type="string" />
			<xs:attribute name="orderDate" type="datetime.tz" />
		</xs:complexType>
	</xs:element>
	<!--
		Defines the ID of an order known to the buyer system.
		
		orderID
		The id of an order known to the buyer system.  Basically,
		what the PO number is today.
		
		orderDate
		The date and time the order was created.
	-->
	<xs:element name="OrderIDInfo">
		<xs:complexType>
			<xs:attribute name="orderID" use="required" type="string" />
			<xs:attribute name="orderDate" type="datetime.tz" />
		</xs:complexType>
	</xs:element>
	<!--
		Defines information related to an order.
		
		OrderReference
		The reference to the order being paid.
		
		OrderIDInfo
		The buyer system order id of the order.
	-->
	<xs:element name="OrderInfo">
		<xs:complexType>
			<xs:choice>
				<xs:element ref="OrderReference" />
				<xs:element ref="OrderIDInfo" />
			</xs:choice>
		</xs:complexType>
	</xs:element>
	<!--
		The InvoiceReference element provides a clear reference to a prior
		InvoiceDetailRequest document.
		
		invoiceID
		The suplier system invoiceID for this request. Basically, what
		the Invoice number is today.  If present, must be copied
		directly from the referenced InvoiceDetailRequest document's
		InvoiceDetailRequestHeader.
		
		invoiceDate
		The invoice date.
	-->
	<xs:element name="InvoiceReference">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="DocumentReference" />
			</xs:sequence>
			<xs:attribute name="invoiceID" type="string" />
			<xs:attribute name="invoiceDate" type="datetime.tz" />
		</xs:complexType>
	</xs:element>
	<!--
		Defines the ID of an invoice known to the supplier system.
		
		invoiceID
		The id of an invoice known to the supplier system.
		
		invoiceDate
		The invoice date.
	-->
	<xs:element name="InvoiceIDInfo">
		<xs:complexType>
			<xs:attribute name="invoiceID" use="required" type="string" />
			<xs:attribute name="invoiceDate" type="datetime.tz" />
		</xs:complexType>
	</xs:element>
	<!--
		Defines the ID of a master agreement known to the buyer system.
		In InvoiceDetailRequest, this element identifies the master agreement
		of the release order to be invoiced.
		
		agreementID
		The id of a master agreement known to the buyer system.  Basically,
		what the master agreement number is today.
		
		agreementDate
		The date and time the master agreement request was created.
	-->
	<xs:element name="MasterAgreementIDInfo">
		<xs:complexType>
			<xs:attribute name="agreementID" use="required"
				type="string" />
			<xs:attribute name="agreementDate" type="datetime.tz" />
		</xs:complexType>
	</xs:element>
	<!--
		Defines a reference to an earlier MasterAgreementRequest document.
		In InvoiceDetailRequest, this element identifies the master agreement
		of the release order to be invoiced.
		
		DocumentReference
		The reference to an earlier MasterAgreementRequest document.
		
		agreementID
		The id of a master agreement known to the buyer system.  Basically,
		what the master agreement number is today.
		
		agreementDate
		The date and time the master agreement request was created.
	-->
	<xs:element name="MasterAgreementReference">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="DocumentReference" />
			</xs:sequence>
			<xs:attribute name="agreementID" type="string" />
			<xs:attribute name="agreementDate" type="datetime.tz" />
		</xs:complexType>
	</xs:element>
	<!--
		Identifies the carrier who will transport a shipment.
		
		domain
		Domain in which this value has meaning.  Recognized domains
		include:
		companyName - The legal name for this company.  In some cases, this
		could also be provided in a Contact element with role
		"carrierCorporate".  That option should be reserved for cases
		in which additional detail about the carrier appears in this
		element.
		SCAC - Standard Carrier Alpha Code (see
		http://users.erols.com/nmfta/Codes.htm)
		IATA - International Air Transport Association (see
		http://www.iata.org)
		AAR  - Association of American Railroads (see http://www.aar.org/)
		UIC  - International Union of Railways (see
		http://www.uic.asso.fr/)
		EAN  - European Article Numbering (see http://www.ean-ucc.org/)
		DUNS - D&B's Data Universal Numbering System (see
		http://www.dnb.com/dnbhome.htm)
	-->
	<xs:element name="CarrierIdentifier">
		<xs:complexType mixed="true">
			<xs:attribute name="domain" use="required" type="string" />
		</xs:complexType>
	</xs:element>
	<!-- string -->
	<!--
		Identifier that appears on a shipment and through which additional
		detail about the shipment may be retrieved.  Defined by the carrier.
		Has meaning in the domain described by the CarrierIdentifier values.
		Therefore, CarrierIdentifier and ShipmentIdentifier should normally
		be used together.
		
		Conceptually, this is a tracking number.  Different carriers have
		different names for shipment identifiers.  Some call it a way bill
		number, others call it a pro number, and still others call it a bill of
		lading.  They all represent tracking numbers.
	-->
	<xs:element name="ShipmentIdentifier" type="xs:string" />
	<!-- string -->
	<!--
		One language-specific string for the creator of an IdReference,
		e.g. IRS, BofA, UPS, Cisco, etc.
		
		xml:lang
		The language or locale in which the name of the creator is written.
	-->
	<xs:element name="Creator">
		<xs:complexType mixed="true">
			<xs:attribute ref="lang" use="required" />
		</xs:complexType>
	</xs:element>
	<!-- string -->
	<!--
		Defines an ID reference.  Within the application context (for example,
		a certain pair of buyer and supplier), the (identifier, domain) pair
		should be unique.
		
		Creator
		The creator of this IdReference, e.g. BofA, UPS, Cisco, etc.
		
		Description
		Textual description of the IdReference. For human readability.
		
		identifier
		The unique identifier of the IdReference within the domain.
		
		domain
		The domain of the IdReference.  It should be one of the
		following:
		accountID, bankRoutingID, accountPayableID,
		accountReceivableID, bankAccountID, ibanID, abaRoutingNumber,
		bankNationalID, isoBicID, swiftID, bankBranchID, federalTaxID,
		stateTaxID, provincialTaxID, vatID, gstID, and taxExemptionID.
		supplierTaxID is deprecated and will be treated as federalTaxID.
		Other possible values could be 1099ID, courtRegisterID, etc.
	-->
	<xs:element name="IdReference">
		<xs:complexType>
			<xs:sequence>
				<xs:element minOccurs="0" ref="Creator" />
				<xs:element minOccurs="0" ref="Description" />
			</xs:sequence>
			<xs:attribute name="identifier" use="required"
				type="string" />
			<xs:attribute name="domain" use="required" type="string" />
		</xs:complexType>
	</xs:element>
	<!--
		Defines supplier sales order information related to an order.
		
		This is also used in PunchOutOrderMessage to indicate that the 
		supplier has created an order associated with the punchout order message.  
		The buyer can later cancel the sales order by sending an OrderRequest 
		of type "delete" that refers to the sales order by including the 
		SupplierOrderInfo element in the OrderRequestHeader
		
		orderID
		Supplier sales order id of this order.
	-->
	<xs:element name="SupplierOrderInfo">
		<xs:complexType>
			<xs:attribute name="orderID" use="required" type="string" />
		</xs:complexType>
	</xs:element>
	<!--
		The ShipNoticeReference element provides a clear reference to a prior
		ShipNoticeRequest document.  While the contained DocumentReference provides
		an unambiguous reference, the additional attributes of the
		ShipNoticeReference may allow the ReceiptRequest to be viewed independently.
		
		DocumentReference
		The reference to an earlier ShipNoticeRequest.
		
		shipNoticeID
		Unique identifier of the referenced ShipNoticeRequest.
		
		shipNoticeDate
		Date and time of the referenced ShipNoticeRequest.
	-->
	<xs:element name="ShipNoticeReference">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="DocumentReference" />
			</xs:sequence>
			<xs:attribute name="shipNoticeID" type="string" />
			<xs:attribute name="shipNoticeDate" type="datetime.tz" />
		</xs:complexType>
	</xs:element>
	<!--
		Defines ID of a Ship Notice known to the Buyer system.
		
		shipNoticeID
		Unique identifier of the referenced ShipNoticeRequest.
		
		shipNoticeDate
		Date and time of the referenced ShipNoticeRequest.
	-->
	<xs:element name="ShipNoticeIDInfo">
		<xs:complexType>
			<xs:attribute name="shipNoticeID" use="required"
				type="string" />
			<xs:attribute name="shipNoticeDate" type="datetime.tz" />
		</xs:complexType>
	</xs:element>
	<!--
		For cXML license agreement information, please see
		http://www.cxml.org/home/license.asp
		
		$Id: //ariba/cxml/schema/Modules/Entities.mod#5 $
	-->
	<!--
		Top-level entities used in Transport.mod.  Defined here to allow easy
		extention of the cXML specification (using additional DTDs) without
		redefining these entities.
	-->
	<!--
		cxml.messages
		Possible elements (for particular situations) within Message.  These
		are all of the messages defined in the base cXML protocol.
	-->
	<xs:element name="cxml.messages" abstract="true" />
	<!--
		cxml.requests
		Possible elements (for particular situations) within Request.  These
		are all of the requests defined in the base cXML protocol.
	-->
	<xs:element name="cxml.requests" abstract="true" />
	<xs:complexType name="cxml.requests">
		<xs:sequence>
			<xs:element ref="cxml.requests" />
		</xs:sequence>
	</xs:complexType>
	<!--
		cxml.responses
		Possible elements (for particular situations) within Response.  These
		are all of the responses (corresponding to a subset of the possible
		requests) defined in the base cXML protocol.
	-->
	<xs:group name="cxml.responses">
		<xs:sequence>
			<xs:choice minOccurs="0">
				<xs:element ref="ProfileResponse" />
				<xs:element ref="PunchOutSetupResponse" />
				<xs:element ref="ProviderSetupResponse" />
				<xs:element ref="GetPendingResponse" />
				<xs:element ref="SubscriptionListResponse" />
				<xs:element ref="SubscriptionContentResponse" />
				<xs:element ref="SupplierListResponse" />
				<xs:element ref="SupplierDataResponse" />
				<xs:element ref="AuthResponse" />
				<xs:element ref="DataResponse" />
				<xs:element ref="OrganizationDataResponse" />
			</xs:choice>
		</xs:sequence>
	</xs:group>
	<!--
		For cXML license agreement information, please see
		http://www.cxml.org/home/license.asp
		
		$Id: //ariba/cxml/schema/Modules/Profile.mod#1 $
	-->
	<!--
		Request for the latest profile from the server.  May also be used as
		a 'ping' transaction (to check if the server is available).
	-->
	<xs:element name="ProfileRequest"
		substitutionGroup="cxml.requests">
		<xs:complexType />
	</xs:element>
	<!--
		Static profile response describing the transactions supported by this
		server.  The content should not change frequently.
		
		effectiveDate
		When these services were first available.  Should not be in the
		future since new clients may need to interact with a server.
		
		lastRefresh
		When service information was last received from the end server.
		
		a-dtype
		Datatype enumeration for the attributes of this element.  May be
		ignored by most XML parsers (used for documentation purposes).
	-->
	<xs:element name="ProfileResponse">
		<xs:complexType>
			<xs:sequence>
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="Option" />
				<xs:element maxOccurs="unbounded" ref="Transaction" />
			</xs:sequence>
			<xs:attribute name="effectiveDate" use="required"
				type="datetime.tz" />
			<xs:attribute name="lastRefresh" type="datetime.tz" />
			<xs:attribute name="a-dtype"
				default="effectiveDate dateTime.tz                              lastRefresh dateTime.tz">
				<xs:simpleType>
					<xs:restriction base="xs:NMTOKENS">
						<xs:enumeration
							value="effectiveDate dateTime.tz                              lastRefresh dateTime.tz" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<!--
		Value for a defined option (either for the overall service or a
		specific transaction.  At this time, no options are defined at either
		level.
		
		name
		The name of this option.  Future versions of cXML will define
		values for this attribute.  This is not intended to be viewed
		directly (the profile is intended mostly for machine consumption).
		
		a-dtype
		Datatype enumeration for the attributes of this element.  May be
		ignored by most XML parsers (used for documentation purposes).
	-->
	<xs:element name="Option">
		<xs:complexType mixed="true">
			<xs:attribute name="name" use="required" type="string" />
			<xs:attribute name="a-dtype" default="name string">
				<xs:simpleType>
					<xs:restriction base="xs:NMTOKENS">
						<xs:enumeration value="name string" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<!-- string -->
	<!--
		A transaction supported by this server.
		
		requestName
		A specific request this server accepts at the given URL.  The
		%cxml.requests entity (defined in transport.mod) contains the
		possible values for this attribute.
		
		a-dtype
		Datatype enumeration for the attributes of this element.  May be
		ignored by most XML parsers (used for documentation purposes).
	-->
	<xs:element name="Transaction">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="URL" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="Option" />
			</xs:sequence>
			<xs:attribute name="requestName" use="required"
				type="nmtoken" />
			<xs:attribute name="a-dtype"
				default="requestName NMTOKEN">
				<xs:simpleType>
					<xs:restriction base="xs:NMTOKENS">
						<xs:enumeration value="requestName NMTOKEN" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<!--
		For cXML license agreement information, please see
		http://www.cxml.org/home/license.asp
		
		$Id: //ariba/cxml/schema/Modules/Transport.mod#6 $
	-->
	<!--
		For better definitions of these Elements/Entities, refer to the cXML
		Protocol Specification documents.
	-->
	<!-- Defines the set of known valid cXML digital signature versions -->
	<xs:simpleType name="cxml.signatureVersions">
		<xs:restriction base="xs:token">
			<xs:enumeration value="1.0" />
		</xs:restriction>
	</xs:simpleType>
	<!--
		cXML envelope
		
		version
		Version of this cXML transmission.  Should be less than or equal
		to the version portion of the SYSTEM identifier for this document.
		
		payloadID
		A unique identifier for this document.
		
		timestamp
		The date and time at which this document was originally created.
		
		signatureVersion
		If present, specifies the cXML digital signature version to
		which this document conforms.  This implies that the
		ds:Signature element must be present.  It is an error if this
		attribute is present and the document does not conform to the
		specified signature version.  If absent, the document is not
		signed.
		
		xml:lang
		The default locale for all strings (not formatted items such as
		dates, times and numbers) in this document.  This attribute will be
		required in a future version of cXML.  (Leaving it out is
		deprecated.)
	-->
	<xs:element name="cXML">
		<xs:complexType>
			<xs:sequence>
				<xs:choice>
					<xs:sequence>
						<xs:element ref="Header" />
						<xs:choice>
							<xs:element ref="Message" />
							<xs:element ref="Request" />
						</xs:choice>
					</xs:sequence>
					<xs:element ref="Response" />
				</xs:choice>
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="Signature" />
			</xs:sequence>
			<xs:attribute name="version" default="1.2.021"
				type="string" />
			<xs:attribute name="payloadID" use="required" type="string" />
			<xs:attribute name="timestamp" use="required"
				type="datetime.tz" />
			<xs:attribute name="signatureVersion"
				type="cxml.signatureVersions" />
			<xs:attribute ref="lang" />
		</xs:complexType>
	</xs:element>
	<!-- header -->
	<xs:element name="Header">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="From" />
				<xs:element ref="To" />
				<xs:element ref="Sender" />
				<xs:sequence minOccurs="0">
					<xs:element ref="Path" />
					<xs:element ref="OriginalDocument" />
				</xs:sequence>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="From">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" ref="Credential" />
				<xs:element minOccurs="0" ref="Correspondent" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="To">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" ref="Credential" />
				<xs:element minOccurs="0" ref="Correspondent" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="Sender">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" ref="Credential" />
				<xs:element ref="UserAgent" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		Path. A list of nodes that records the path taken by a user through 
		a punchout chaining scenario.
	-->
	<xs:element name="Path">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" ref="Node" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		A Node is any entity connected to a Network.
		
		type
		A node can define itself as a router node or a copy node.  Routers
		assume responsibility for the transaction.  Copy Nodes request to only
		be aware of the transaction.
		
		itemDetailsRequired
		Intermediary Nodes may want to support special operations without
		having to store specific information required to fulfill that operation.
		This attribute tells the previous node to send ItemDetail information
		when performing a PunchOutSetupRequest edit/inspect operation.
	-->
	<xs:element name="Node">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" ref="Credential" />
			</xs:sequence>
			<xs:attribute name="type" use="required">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="copy" />
						<xs:enumeration value="route" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="itemDetailsRequired">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="yes" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<!--
		Identifies the previous document in the situation that a router node
		forwards a message or request on to a more distant node.
		
		payloadID
		The payloadId of the original document.
	-->
	<xs:element name="OriginalDocument">
		<xs:complexType>
			<xs:attribute name="payloadID" use="required" type="string" />
		</xs:complexType>
	</xs:element>
	<!--
		A textual string representing who the UserAgent is conducting the cXML
		conversation. Analogous to UserAgent for HTTP conversations.
	-->
	<xs:element name="UserAgent" type="xs:string" />
	<!--
		DEPRECATED 
		Do not use this element.
	-->
	<xs:element name="DigitalSignature"
		substitutionGroup="cxml.authentication">
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="any">
					<xs:attribute name="type"
						default="PK7 self-contained" type="string" />
					<xs:attribute name="encoding" default="Base64"
						type="string" />
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<!--
		A shared secret. Typically, this is a username/password type of secret
		exchanged through a secure transport before communication takes place.
	-->
	<xs:element name="SharedSecret"
		substitutionGroup="cxml.authentication" type="any" />
	<!--
		Represents an identity for a credential.
		
		lastChangedTimestamp
		When the underlying object last changed in the originating system.
		This is used in cases where the same object (e.g. a buyer
		organization) is replicated, and kept synchronized, across two
		systems.
	-->
	<xs:element name="Identity">
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="any">
					<xs:attribute name="lastChangedTimestamp"
						type="datetime.tz" />
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<!--
		A Credential Message Authentication Code (MAC).  This is used in
		situations where one party (the sender) must prove to another (the
		receiver) that it is authenticated by a shared secret with a third
		party trusted by both.
		
		The MAC should be computed by the trusted third party and
		transferred to the sender.  The MAC should be opaque to the sender
		(i.e., it should be secure and non-reversible).  The MAC should
		use as its inputs enough information to accomplish the following
		goals:
		
		(1) The MAC must prove to the receiver that it really originated
		with the trusted third party.  E.g., the MAC could use a shared
		secret between the receiver and the trusted third party as its
		secret key.
		
		(2) The MAC should be usable only by a certain sender.  E.g., the
		MAC could authenticate an identifier for the sending organization.
		
		(3) The MAC should prove that the sender is authorized to send on
		behalf of the From organization.  E.g., the MAC could authenticate
		an identifier for the From organization.
		
		(4) The MAC should limit the risk of the MAC being compromised and
		used to impersonate the sender by another party communicating with
		the receiver.  E.g., the MAC could authenticate an expiration date
		or sequence number.
		
		type
		An implementation-dependent identifier for the exact data
		being authenticated and the method in which it is formatted
		for authentication.  Currently the only supported value is
		"FromSenderCredentials".
		
		algorithm
		An implementation-dependent identifier for the exact MAC
		algorithm used on the data.  Currently the only supported
		value is "HMAC-SHA1-96".
		
		creationDate
		The time at which this MAC was issued.  The receiver must not
		accept the MAC before this time.
		
		expirationDate
		The time at which this MAC expires.  The receiver must not
		accept the MAC after this time.
	-->
	<xs:element name="CredentialMac"
		substitutionGroup="cxml.authentication">
		<xs:complexType mixed="true">
			<xs:attribute name="type" use="required" type="string" />
			<xs:attribute name="algorithm" use="required" type="string" />
			<xs:attribute name="creationDate" use="required"
				type="datetime.tz" />
			<xs:attribute name="expirationDate" use="required"
				type="datetime.tz" />
		</xs:complexType>
	</xs:element>
	<!--
		A combination of an Identity and authentication element. If the
		authentication element is present, it strongly authenticates who/what
		someone is.  The authentication element should not be sent within Message
		documents transported via an end user's browser.  One-way communication
		must be authenticated in the transport layer.
		
		domain
		In what domain is this Credential represented?
		type
		Does this Credential identify a marketplace or one of its member
		companies?  A Credential without this attribute describes a member
		company or unaffiliated buying organization.
	-->
	<xs:element name="cxml.authentication" abstract="true" />
	<xs:element name="Credential">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Identity" />
				<xs:element minOccurs="0" ref="cxml.authentication" />
			</xs:sequence>
			<xs:attribute name="domain" use="required" type="string" />
			<xs:attribute name="type">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="marketplace" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<!--
		Status of a Response or Message.  If present, the element content
		describes specifics of a problem.
		
		code
		HTTP or cXML-specific status code.
		
		text
		Textual version of the status code (not specific issue).
		
		xml:lang
		The language in which the text attribute and element content are
		written.  This attribute will be required in a future version of
		cXML.  (Leaving it out is deprecated.)
	-->
	<xs:element name="Status">
		<xs:complexType mixed="true">
			<xs:attribute name="code" use="required" type="uint" />
			<xs:attribute name="text" use="required" type="string" />
			<xs:attribute ref="lang" />
		</xs:complexType>
	</xs:element>
	<!--
		Message
		
		When Status not present, '<Status code="200" text="OK" />' is implied.
	-->
	<xs:element name="Message">
		<xs:complexType>
			<xs:choice>
				<xs:element minOccurs="0" ref="Status" />
				<xs:element ref="cxml.messages" />
			</xs:choice>
			<xs:attribute name="deploymentMode" default="production">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="production" />
						<xs:enumeration value="test" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="inReplyTo" type="string" />
			<xs:attribute name="Id" type="xs:ID" />
		</xs:complexType>
	</xs:element>
	<!-- request -->
	<xs:element name="Request">
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="cxml.requests">
					<xs:attribute name="deploymentMode"
						default="production">
						<xs:simpleType>
							<xs:restriction base="xs:token">
								<xs:enumeration value="production" />
								<xs:enumeration value="test" />
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
					<xs:attribute name="Id" type="xs:ID" />
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<!-- response -->
	<xs:element name="Response">
		<xs:complexType>
			<xs:choice>
				<xs:element ref="Status" />
				<xs:group ref="cxml.responses" />
			</xs:choice>
			<xs:attribute name="Id" type="xs:ID" />
		</xs:complexType>
	</xs:element>
	<!--
		This element includes signed cXML-specific details about the
		document being signed.  When a cXML document is signed, this
		element must appear inside the first ds:Object element in the
		ds:Signature element.
		
		signatureVersion
		This specifies the cXML signature version to which this
		document conforms.  It is an error if this attribute value
		does not exactly match the value of the signatureVersion
		attribute from the top-level cXML element.  It is an error if
		the document does not conform to the specified cXML signature
		version.
		
		payloadID
		Specifies the payloadID of the document.  It is an error if
		the value of this attribute does not exactly match the value
		of the payloadID attribute from the top-level cXML element.
		
		Id
		This identifies this cXMLSignedInfo element for purposes of
		the signature.  This attribute must always be present and
		should always have the value "cXMLSignedInfo"
		
	-->
	<xs:element name="cXMLSignedInfo" substitutionGroup="Object.ANY">
		<xs:complexType>
			<xs:attribute name="signatureVersion" use="required"
				type="cxml.signatureVersions" />
			<xs:attribute name="payloadID" use="required" type="string" />
			<xs:attribute name="Id" use="required" type="xs:ID" />
		</xs:complexType>
	</xs:element>
	<!--
		This element includes the contact information of the organisation
		to/from whom the document is sent/received.
		
		preferredLanguage
		optional language which the organisation, identified by this 
		element, would prefer to use. Refer to the definition of 
		xmlLangCode entity.
	-->
	<xs:element name="Correspondent">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" ref="Contact" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="Extrinsic" />
			</xs:sequence>
			<xs:attribute name="preferredLanguage" type="xmlLangCode" />
		</xs:complexType>
	</xs:element>
	<!--
		For cXML license agreement information, please see
		http://www.cxml.org/home/license.asp
		
		$Id: //ariba/cxml/modules/Contract.mod#6 $
	-->
	<!--
		Use of the Contract element is deprecated
		
		A  mechanism for sending static contract pricing information.
	-->
	<xs:element name="Contract">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" ref="SupplierID" />
				<xs:element minOccurs="0" ref="Comments" />
				<xs:element maxOccurs="unbounded" ref="ItemSegment" />
			</xs:sequence>
			<xs:attribute name="effectiveDate" use="required"
				type="datetime.tz" />
			<xs:attribute name="expirationDate" use="required"
				type="datetime.tz" />
		</xs:complexType>
	</xs:element>
	<!--
		Use of the ItemSegment element is deprecated.
		
		Defines an item segment for the index.  An item segment is an
		overlay for index items, allowing suppliers to override certain
		item attributes on a per-contract basis.
		
		Items may be segmented by some agreed-upon user-specific key that
		is used to determine who is eligible for these particular overlaid
		attributes (such as reduced or different prices).  Omitting the
		segmentKey indicates that the supplier wishes to set the given
		contract price system wide (for all users).
		
		segmentKey      - optional agreed-upon string used to segment
		custom prices
	-->
	<xs:element name="ItemSegment">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" ref="ContractItem" />
			</xs:sequence>
			<xs:attribute name="segmentKey" type="string" />
		</xs:complexType>
	</xs:element>
	<!--
		Use of the ContractItem element is deprecated
		
		A particular (custom) item overlay for a index item.  The item is
		referenced by the supplierPartID.
		
		ItemID - ID for the part to be overlaid.
		UnitPrice - Contract price for item
		Extrinsic - Named overlay. The Extrinsic should be named with the
		item field name it is to overlay. The Extrinsic must contain a
		<value> element which supplies the replacement value for the item
		field.
		For example:
		<ContractItem>
		<ItemID>
		<SupplierPartID>123456</SupplierPartID>
		</ItemID>
		<Extrinsic name="URL">http://www.newaddress.com</Extrinsic>
		</ContractItem>
	-->
	<xs:element name="ContractItem">
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="ItemID.element">
					<xs:sequence>
						<xs:element minOccurs="0" ref="UnitPrice" />
						<xs:element minOccurs="0" maxOccurs="unbounded"
							ref="Extrinsic" />
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<!--
		For cXML license agreement information, please see
		http://www.cxml.org/home/license.asp
		
		$Id: //ariba/cxml/schema/Modules/Index.mod#6 $
	-->
	<!--
		IndexItemAdd is the element used to insert an item in an index.
		
		ItemID          - uniquely identifies the item
		ItemDetail      - general information about the item
		IndexItemDetail - Index specific item detail
		
		Note that for historical reasons there is a LeadTime element in
		both ItemDetail and IndexItemDetail.  For interoperability, it is
		recommended to specify the same value in both LeadTime elements.
		If different values are specified in the different LeadTime
		elements for the same IndexItemAdd, the meaning of this is
		undefined.
	-->
	<xs:element name="IndexItemAdd">
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="ItemID.element">
					<xs:sequence>
						<xs:element ref="ItemDetail" />
						<xs:element ref="IndexItemDetail" />
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<!--
		IndexItemDelete is the element used to remove an item from the
		index.
		ItemID          - uniquely identifies the item
		
	-->
	<xs:element name="IndexItemDelete" type="ItemID.element" />
	<!--
		IndexItemPunchout is the element used to dynamically connect an
		index item to the supplier's resource for that item.
		
		ItemID          - uniquely identifies the item
		PunchoutDetail  - Describes the item being accessed
	-->
	<xs:element name="IndexItemPunchout">
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="ItemID.element">
					<xs:sequence>
						<xs:element ref="PunchoutDetail" />
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<!--
		IndexItem is the general ELEMENT for the list of items in an
		index.
		
		IndexItemAdd      - Item(s) to be added to the index
		IndexItemDelete   - Item(s) to be removed from the index
		IndexItemPunchout - PunchOut Item(s) to be added to the index
		
	-->
	<xs:element name="IndexItem">
		<xs:complexType>
			<xs:choice>
				<xs:element maxOccurs="unbounded" ref="IndexItemAdd" />
				<xs:element maxOccurs="unbounded" ref="IndexItemDelete" />
				<xs:element maxOccurs="unbounded"
					ref="IndexItemPunchout" />
			</xs:choice>
		</xs:complexType>
	</xs:element>
	<!--
		PunchoutDetail is the description of an item which is referenced
		in the index.
		
	-->
	<xs:element name="PunchoutDetail">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" ref="Description" />
				<xs:element ref="URL" />
				<xs:element maxOccurs="unbounded" ref="Classification" />
				<xs:element minOccurs="0" ref="UnitPrice" />
				<xs:element minOccurs="0" ref="UnitOfMeasure" />
				<xs:element minOccurs="0" ref="ManufacturerName" />
				<xs:element minOccurs="0" ref="ManufacturerPartID" />
				<xs:element minOccurs="0" ref="LeadTime" />
				<xs:element minOccurs="0" ref="ExpirationDate" />
				<xs:element minOccurs="0" ref="EffectiveDate" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="SearchGroupData" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="TerritoryAvailable" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="Extrinsic" />
			</xs:sequence>
			<xs:attribute name="punchoutLevel" default="store">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="store" />
						<xs:enumeration value="aisle" />
						<xs:enumeration value="shelf" />
						<xs:enumeration value="product" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<!--
		Index is the element used to update the list of goods and/or
		services which are being handled by the system.
		
		SupplierID  - One or more identities by which this supplier is
		known. NOTE: These are to be considered synonyms
		for the same Supplier.
		SearchGroup - Description(s) of parametric search(es) for this
		index.  Use of the SearchGroup element is
		deprecated.
		IndexItem   - The list of items with which to modify the index
		
		loadmode    - The mode in which the Index is loaded, either Full
		or Incremental.  A full index load will
		completely replace a previously loaded index. The
		recommended application default is incremental.
	-->
	<xs:element name="Index">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" ref="SupplierID" />
				<xs:element minOccurs="0" ref="Comments" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="SearchGroup" />
				<xs:element maxOccurs="unbounded" ref="IndexItem" />
			</xs:sequence>
			<xs:attribute name="loadmode">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="Full" />
						<xs:enumeration value="Incremental" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<!--
		Use of the SearchGroup element is deprecated.  Parametric search
		shapes should be defined using TypeDefinition and its child
		elements.
		
		SearchGroup is a grouping of attributes which constitute a search
		which can be performed against an index.
		
		Name            - Name of the search
		SearchAttribute - List of searchable index fields.
	-->
	<xs:element name="SearchGroup">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Name" />
				<xs:element maxOccurs="unbounded" ref="SearchAttribute" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		Use of the SearchAttribute element is deprecated.  Parametric
		search shapes should be defined using TypeDefinition and its
		child elements.
		
		An attribute that can searched parametrically.
		
		name - name of the attribute.
		type - the type of the attribute
	-->
	<xs:element name="SearchAttribute">
		<xs:complexType>
			<xs:attribute name="name" use="required" type="string" />
			<xs:attribute name="type" type="string" />
		</xs:complexType>
	</xs:element>
	<!--
		ExpirationDate is the date and time after which the element is no longer
		valid.  Must be specified in ISO 8601 format.
		
	-->
	<xs:element name="ExpirationDate" type="xs:string" />
	<!-- datetime.tz -->
	<!--
		EffectiveDate date and time at which the element becomes valid.
		Must be specified in ISO 8601 format.
	-->
	<xs:element name="EffectiveDate" type="xs:string" />
	<!-- datetime.tz -->
	<!--
		IndexItemDetail contains various index specific elements which
		help to define an index item.
		LeadTime           - time in days to receive the item
		ExpirationDate     - Expiration date and time for the item in this index
		EffectiveDate      - Effective date and time for the item in this index
		SearchGroupData    - Parametric search data
		TerritoryAvailable - Country codes
	-->
	<xs:element name="IndexItemDetail">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="LeadTime" />
				<xs:element minOccurs="0" ref="ExpirationDate" />
				<xs:element minOccurs="0" ref="EffectiveDate" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="SearchGroupData" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="TerritoryAvailable" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		Specification of a territory (using ISO country and/or region codes)
		in which the particular index item is available.
	-->
	<xs:element name="TerritoryAvailable" type="xs:string" />
	<!--
		SearchGroupData specifies the data which should be used to identify
		this item in a search.
	-->
	<xs:element name="SearchGroupData">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Name" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="SearchDataElement" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		SearchDataElement is a field and value which are used to provide the
		parametric data to a search.
	-->
	<xs:element name="SearchDataElement">
		<xs:complexType>
			<xs:attribute name="name" use="required" type="string" />
			<xs:attribute name="value" use="required" type="string" />
		</xs:complexType>
	</xs:element>
	<!--
		For cXML license agreement information, please see
		http://www.cxml.org/home/license.asp
		
		$Id: //ariba/cxml/modules/Pending.mod#6 $
	-->
	<!--
		For better definitions of these Elements/Entities, refer to the cXML
		Specification documents.
	-->
	<!--
		A request used for polling for waiting messages. A waiting message, if
		any, will be included in the returned stream. The lastReceivedTimestamp
		attribute, if present, provides the timestamp of the last received
		message. When the Receiver sees this, it can remove messages with earlier
		timestamps from the pending queue.
		
		The maxMessages attribute is used to indicate the maximum number of
		pending messages that can be included in the response.
		
		
	-->
	<xs:element name="GetPendingRequest"
		substitutionGroup="cxml.requests">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" ref="MessageType" />
			</xs:sequence>
			<xs:attribute name="maxMessages" type="uint" />
			<xs:attribute name="lastReceivedTimestamp"
				type="datetime.tz" />
		</xs:complexType>
	</xs:element>
	<!--
		Indicates the type of message(s) being polled for. The valid values are
		the corresponding element names e.g. SubscriptionChangeMessage.
	-->
	<xs:element name="MessageType" type="xs:string" />
	<!-- nmtoken -->
	<!--
		The data elements being carried back in the response. These are fully
		formed cXML messages being carried through the Request/Response channel.
	-->
	<xs:element name="GetPendingResponse">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" ref="cXML" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		For cXML license agreement information, please see
		http://www.cxml.org/home/license.asp
		
		$Id: //ariba/cxml/schema/Modules/Subscription.mod#2 $
	-->
	<!--
		Indicates that something changed in a buyer's content subscription.
		Since this is a Message, it can come at any time - no explicit Request
		needs to be sent first.
	-->
	<xs:element name="SubscriptionChangeMessage"
		substitutionGroup="cxml.messages">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" ref="Subscription" />
			</xs:sequence>
			<xs:attribute name="type" use="required">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="new" />
						<xs:enumeration value="update" />
						<xs:enumeration value="delete" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<!-- A content subscription. -->
	<xs:element name="Subscription">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="InternalID" />
				<xs:element minOccurs="0" ref="SubscriptionVersion" />
				<xs:element ref="Name" />
				<xs:element ref="Changetime" />
				<xs:element maxOccurs="unbounded" ref="SupplierID" />
				<xs:element minOccurs="0" ref="Format" />
				<xs:element minOccurs="0" ref="Description" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="Changetime" type="xs:string" />
	<!-- datetime.tz -->
	<xs:element name="Format">
		<xs:complexType mixed="true">
			<xs:attribute name="version" use="required" type="string" />
		</xs:complexType>
	</xs:element>
	<!-- string -->
	<!-- Requests a complete list of catalog subscriptions for a buyer. -->
	<xs:element name="SubscriptionListRequest"
		substitutionGroup="cxml.requests">
		<xs:complexType />
	</xs:element>
	<!-- The list of Subscriptions for the given buyer. -->
	<xs:element name="SubscriptionListResponse">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" ref="Subscription" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!-- Requests the contents of a catalog that the buyer is subscribed to. -->
	<xs:element name="SubscriptionContentRequest"
		substitutionGroup="cxml.requests">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="InternalID" />
				<xs:element minOccurs="0" ref="SubscriptionVersion" />
				<xs:element maxOccurs="unbounded" ref="SupplierID" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!-- The data associated with a particular subscription. -->
	<xs:element name="SubscriptionContentResponse">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Subscription" />
				<xs:element maxOccurs="unbounded"
					ref="SubscriptionContent" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		The actual content associated with a particular subscription.
		
		Use of the Contract element is deprecated.
	-->
	<xs:element name="SubscriptionContent">
		<xs:complexType>
			<xs:choice>
				<xs:element ref="CIFContent" />
				<xs:element ref="Index" />
				<xs:element ref="Contract" />
			</xs:choice>
			<xs:attribute name="filename" type="string" />
		</xs:complexType>
	</xs:element>
	<!-- Contents of CIF file in base64 encoding. -->
	<xs:element name="CIFContent" type="xs:string" />
	<!-- bin.base64 -->
	<!--
		Indicates that something has changed in the supplier data for
		a supplier the buyer has a relationship with. Since this is a message, no
		Request needs to be sent to receive this Message.
	-->
	<xs:element name="SupplierChangeMessage"
		substitutionGroup="cxml.messages">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" ref="Supplier" />
			</xs:sequence>
			<xs:attribute name="type" use="required">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="new" />
						<xs:enumeration value="update" />
						<xs:enumeration value="delete" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<!--
		Requests for a complete list of suppliers the buyer currently has
		relationships with.
	-->
	<xs:element name="SupplierListRequest"
		substitutionGroup="cxml.requests">
		<xs:complexType />
	</xs:element>
	<!-- The list of suppliers requested by SupplierListRequest. -->
	<xs:element name="SupplierListResponse">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" ref="Supplier" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		Requests for a data associated with a particular supplier identified by
		SupplierID.
	-->
	<xs:element name="SupplierDataRequest"
		substitutionGroup="cxml.requests">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" ref="SupplierID" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!-- The data associated with the desired supplier. -->
	<xs:element name="SupplierDataResponse">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Supplier" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		Reference to the Subscription Version. To be used with InternalID of a catalog.
		vesionNumber
		To uniquely identify a catalog with the given InternalID and versionNumber.
	-->
	<xs:element name="SubscriptionVersion">
		<xs:complexType>
			<xs:attribute name="versionNumber" use="required"
				type="uint" />
		</xs:complexType>
	</xs:element>
	<!-- Catalog subscription status from buyer. -->
	<xs:element name="SubscriptionStatus">
		<xs:complexType>
			<xs:sequence>
				<xs:element minOccurs="0" ref="Comments" />
			</xs:sequence>
			<xs:attribute name="status" use="required">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="received" />
						<xs:enumeration value="validation_error" />
						<xs:enumeration value="validated" />
						<xs:enumeration value="approved" />
						<xs:enumeration value="rejected" />
						<xs:enumeration value="activated" />
						<xs:enumeration value="deactivated" />
						<xs:enumeration value="deleted" />
						<xs:enumeration value="changed" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<!--
		SubscriptionStatusUpdateRequest
		A request to update the subscription status of a Catalog. 
		
		InternalID
		ID of the catalog.
		
		SubscriptionStatus
		Element representing the status updates to the catalog.
	-->
	<xs:element name="SubscriptionStatusUpdateRequest"
		substitutionGroup="cxml.requests">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="InternalID" />
				<xs:element minOccurs="0" ref="SubscriptionVersion" />
				<xs:element ref="SubscriptionStatus" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		For cXML license agreement information, please see
		http://www.cxml.org/home/license.asp
		
		$Id: //ariba/cxml/schema/Modules/Provider.mod#1 $
	-->
	<!--
		====
		Provider* transaction is used to visually integrate an application with
		a UI provided by a service provider.
		====
	-->
	<!--
		ProviderSetupRequest
		
		The originating application would provide the BrowserFormPost location
		only if it wished the provider site to display a "Done" button or
		would like information (at least Status) returned at the end of the
		interactive session.  Inclusion should lead to a ProviderDoneMessage
		from the provider at the end of a session.
		
		The originating application would provide the Followup location if it
		wished the provider to provide information about later status changes
		in the service (after the end of a particular Provider session).  This
		applies only when the initial status (transmitted via a
		ProviderDoneMessage) was an interim value.
	-->
	<xs:element name="ProviderSetupRequest"
		substitutionGroup="cxml.requests">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="OriginatorCookie" />
				<xs:sequence minOccurs="0">
					<xs:element ref="BrowserFormPost" />
					<xs:element minOccurs="0" ref="Followup" />
				</xs:sequence>
				<xs:element ref="SelectedService" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="Extrinsic" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!-- ProviderSetupResponse -->
	<xs:element name="ProviderSetupResponse" type="StartPage.element" />
	<!-- ProviderDoneMessage -->
	<xs:element name="ProviderDoneMessage"
		substitutionGroup="cxml.messages">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="OriginatorCookie" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="ReturnData" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		For cXML license agreement information, please see
		http://www.cxml.org/home/license.asp
		
		$Id: //ariba/cxml/schema/Modules/DataAvailable.mod#1 $
	-->
	<!-- DataAvailable message. -->
	<xs:element name="DataAvailableMessage"
		substitutionGroup="cxml.messages">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="InternalID" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		For cXML license agreement information, please see
		http://www.cxml.org/home/license.asp
		
		$Id: //ariba/cxml/schema/Modules/DataRequest.mod#1 $
	-->
	<!-- Definition of a DataRequest. -->
	<xs:element name="DataRequest" substitutionGroup="cxml.requests">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="InternalID" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		DataResponse. Contains the attachments if any for this response.
		Only a successful response to a download attempt would include this element
	-->
	<xs:element name="DataResponse">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" ref="Attachment" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		For cXML license agreement information, please see
		http://www.cxml.org/home/license.asp
		
		$Id: //ariba/cxml/schema/Modules/CatalogUpload.mod#1 $
	-->
	<!--
		Contain all the information related to the catalog upload, the same
		functionality as the catalog upload provided by supplier.ariba.com
	-->
	<xs:element name="CatalogUploadRequest"
		substitutionGroup="cxml.requests">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="CatalogName" />
				<xs:element ref="Description" />
				<xs:element ref="Attachment" />
				<xs:element minOccurs="0" ref="Commodities" />
				<xs:element minOccurs="0" ref="AutoPublish" />
				<xs:element ref="Notification" />
			</xs:sequence>
			<xs:attribute name="operation" use="required">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="new" />
						<xs:enumeration value="update" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<!--
		CatalogName is the name of the uploaded/published catalog. The
		name is unique per supplier, and it can be defined in the
		different languages
	-->
	<xs:element name="CatalogName">
		<xs:complexType mixed="true">
			<xs:attribute ref="lang" use="required" />
		</xs:complexType>
	</xs:element>
	<!-- string -->
	<!-- The list of the commodity codes. -->
	<xs:element name="Commodities">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" ref="CommodityCode" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!-- The two-digit code -->
	<xs:element name="CommodityCode" type="xs:string" />
	<!-- string -->
	<!--
		If the attribute "enabled" set to be "true", the updated catalog
		will be published to the same buyers according to its previous
		publish
	-->
	<xs:element name="AutoPublish">
		<xs:complexType>
			<xs:attribute name="enabled" use="required" type="string" />
		</xs:complexType>
	</xs:element>
	<!--
		The information used by Ariba CSN to send the notification (the
		status of the catalog upload) to the suppliers.
	-->
	<xs:element name="Notification">
		<xs:complexType>
			<xs:sequence>
				<xs:element minOccurs="0" ref="Email" />
				<xs:element minOccurs="0" ref="URLPost" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		The URL to receive the StatusUpdateRequest, which describes the
		status of the catalog upload, such as the "success" (means the
		catalog is validated, or the catalog is published),
		the "failed" (the catalog has errors, ......)
	-->
	<xs:element name="URLPost">
		<xs:complexType>
			<xs:attribute name="enabled" use="required" type="string" />
		</xs:complexType>
	</xs:element>
	<!--
		For cXML license agreement information, please see
		http://www.cxml.org/home/license.asp
		
		$Id: //ariba/cxml/Modules/Profile.mod#6 $
	-->
	<!--
		AuthRequest
		
		An AuthRequest is used when one party (the "receiver") receives
		credentials from another party (the "principal") and the receiver
		needs a trusted third party to validate the credentials.  The
		receiver should enclose the credentials in an AuthRequest and send
		them to the trusted third party for validation.
		
		If the principal attempts to authenticate by revealing the shared
		secret between itself and the trusted third party (not
		recommended), the receiver should forward the credentials as they
		were received, including the shared secret.
		
		If the principal attempts to authenticate through a client
		certificate (recommended), the receiver should forward the
		credentials as well as an X509Data element containing an
		X509IssuerSerial element describing the certificate used by the
		principal (the receiver normally obtains this information from its
		webserver or SSL/TLS implementation).
		
		If the supplied credential is invalid, the trusted third party
		should respond with an empty cXML response of status 403
		(Forbidden).  If the supplied credential is valid, the trusted
		third party should respond with an AuthResponse that contains the
		valid credentials.
	-->
	<xs:element name="AuthRequest" substitutionGroup="cxml.requests">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" ref="Credential" />
				<xs:element minOccurs="0" ref="X509Data" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		X509Data
		
		An X509Data element is constructed to describe an X.509 client
		certificate being used for authentication.  This element (and its
		children) are derived from the XML Digital Signature standard ().
	-->
	<xs:element name="X509Data">
		<xs:complexType>
			<xs:choice>
				<xs:choice maxOccurs="unbounded">
					<xs:element ref="X509IssuerSerial" />
					<xs:element ref="X509SKI" />
					<xs:element ref="X509SubjectName" />
					<xs:element ref="X509Certificate" />
				</xs:choice>
				<xs:element ref="X509CRL" />
			</xs:choice>
		</xs:complexType>
	</xs:element>
	<!--
		X509IssuerSerial
		
		This element is a container for the serial number and issuer name
		of the X.509 certificate.
	-->
	<xs:element name="X509IssuerSerial">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="X509IssuerName" />
				<xs:element ref="X509SerialNumber" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		X509IssuerName
		
		This element contains the distinguished name of the issuer of the
		X.509 certificate.  The distinguished name should be a string 
		representation of an LDAP Distinguished Name, as described in RFC 
		2253.  For example,
		
		C=US, O="John Doe Data Security, Inc.", OU=Secure Server
		Certification Authority
		
	-->
	<xs:element name="X509IssuerName" type="xs:string" />
	<!-- string -->
	<!--
		X509 SubjectName
		
		This element contains the distinguished name of the subject of the
		X.509 certificate.  This should be a string representation of an 
		LDAP distinguished name, as described in RFC 2253.
	-->
	<xs:element name="X509SubjectName" type="xs:string" />
	<!-- string -->
	<!--
		X509SerialNumber
		
		This element contains the serial number of the X.509 certificate.
	-->
	<xs:element name="X509SerialNumber" type="xs:string" />
	<!-- string -->
	<!--
		X509SKI
		
		This element contains the Subject Key Identifier of the X.509
		certificate.
	-->
	<xs:element name="X509SKI" type="xs:string" />
	<!-- string -->
	<!--
		X509Certificate
		
		This element contains a Base 64-encoded X.509v3 certificate.
	-->
	<xs:element name="X509Certificate" type="xs:string" />
	<!-- string -->
	<!--
		X509CRL
		
		This element contains a Base 64-encoded X.509v3 Certificate
		Revocation List.
	-->
	<xs:element name="X509CRL" type="xs:string" />
	<!-- string -->
	<!--
		AuthResponse
		
		This response returns a list of valid credentials of the person
		entity in the AuthRequest.  An AuthResponse is returned only for a
		successful authentication; for failed authentications, an empty
		response with status 403 (Forbidden) will be returned.
		
		expirationDate
		Specifies the time beyond which the information contained in
		the AuthResponse must be discarded.  In other words, the
		inclusion of the expirationDate attribute specifies that the
		receiver of the AuthResponse may cache the information therein
		until the expirationDate.
		
		The absence of an expirationDate should be interpreted to
		forbid caching.
	-->
	<xs:element name="AuthResponse">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" ref="Credential" />
			</xs:sequence>
			<xs:attribute name="expirationDate" type="datetime.tz" />
		</xs:complexType>
	</xs:element>
	<!--
		For cXML license agreement information, please see
		http://www.cxml.org/home/license.asp
		
		$Id: //ariba/cxml/schema/Modules/Payment.mod#1 $
	-->
	<!-- This file contains all the payment related elements -->
	<!-- Defines different payment methods -->
	<xs:simpleType name="cxml.paymentMethod">
		<xs:restriction base="xs:token">
			<xs:enumeration value="ach" />
			<xs:enumeration value="cash" />
			<xs:enumeration value="check" />
			<xs:enumeration value="creditCard" />
			<xs:enumeration value="debitCard" />
			<xs:enumeration value="draft" />
			<xs:enumeration value="wire" />
			<xs:enumeration value="other" />
		</xs:restriction>
	</xs:simpleType>
	<!--
		Defines a payment method
		
		Description
		The description of the payment method. Description is
		mandatory if the type is set to "other". The <ShortName>
		element in Description must indicate the name of the payment
		method.
		
		type
		the payment method type
	-->
	<xs:element name="PaymentMethod">
		<xs:complexType>
			<xs:sequence>
				<xs:element minOccurs="0" ref="Description" />
			</xs:sequence>
			<xs:attribute name="type" use="required"
				type="cxml.paymentMethod" />
		</xs:complexType>
	</xs:element>
	<!--
		Defines payable information related to a invoice.
		
		InvoiceReference
		The reference to invoice being paid. Copied from the InvoiceDetailRequest message.
		
		InvoiceIDInfo
		The reference to invoice in the Supplier system being paid.
		
		PayableOrderInfo
		Supplementary information related to the invoice. For example,
		if you are making a payment against a consolidated invoice,
		you may also include associated order information.
		
		PayableMasterAgreementInfo
		Supplementary information related to the invoice. For example,
		if you are making a payment against a Consolidated Invoice,
		you may also include associated master agreement information.
	-->
	<xs:element name="PayableInvoiceInfo">
		<xs:complexType>
			<xs:sequence>
				<xs:choice>
					<xs:element ref="InvoiceReference" />
					<xs:element ref="InvoiceIDInfo" />
				</xs:choice>
				<xs:choice minOccurs="0">
					<xs:element ref="PayableOrderInfo" />
					<xs:element ref="PayableMasterAgreementInfo" />
				</xs:choice>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		Defines payable information related to an order.
		
		OrderReference
		The reference to the order being paid.
		
		OrderIDInfo
		The buyer system order id of the order.
	-->
	<xs:element name="PayableOrderInfo">
		<xs:complexType>
			<xs:choice>
				<xs:element ref="OrderReference" />
				<xs:element ref="OrderIDInfo" />
			</xs:choice>
		</xs:complexType>
	</xs:element>
	<!--
		Defines payable information related to a master agreement.
		
		MasterAgreementReference
		The reference to master agreement in the Buyer system being paid.
		Copied from the InvoiceDetailRequest message.
		
		MasterAgreementIDInfo
		The reference to master agreement in the Buyer system being paid.
	-->
	<xs:element name="PayableMasterAgreementInfo">
		<xs:complexType>
			<xs:choice>
				<xs:element ref="MasterAgreementReference" />
				<xs:element ref="MasterAgreementIDInfo" />
			</xs:choice>
		</xs:complexType>
	</xs:element>
	<!--
		Defines information related to a payable such as an invoice,
		order, masteragreement, receipt, etc. More than one payable
		information can be included.
		
		PayableInvoiceInfo
		The info about the invoice being paid.
		
		PayableOrderInfo
		The info about the order being paid.
		
		PayableMasterAgreeementInfo
		The info about the master agreement being paid.
		
	-->
	<xs:element name="PayableInfo">
		<xs:complexType>
			<xs:choice>
				<xs:element ref="PayableInvoiceInfo" />
				<xs:element ref="PayableOrderInfo" />
				<xs:element ref="PayableMasterAgreementInfo" />
			</xs:choice>
		</xs:complexType>
	</xs:element>
	<!--
		Defines the party involved in the payment, including Payer of this
		payment (payer), Payee of this payment (payee),
		Payer's bank (originatingBank), Payee's bank (receivingBank),
		Payer's Correspondent Bank, Payee's Correspondent Bank, Intermediary Bank, etc
		
		Contact
		Contact information of the payment partner.  Allowed contact
		roles include payer, payee, originatingBank, receivingBank,
		originatingCorrespondentBank, receivingCorrespondent, 
		receivingCorrespondentBank, intermediaryBank, and remitTo.
		
		Contact elements with role 'payer' and 'payee' are always
		required. If the payment method indicates a bank transfer,
		then Contact elements with role 'originatingBank' and
		'receivingBank' are required.
		
		If the contact role is 'remitTo', it would contain contact
		information of the remittance address. For this role, the
		IdReference and PCard elements may be absent.
		
		IdReference
		Partner reference ID, including bank account identification,
		bank identification, and optionally bank branch identification.
		
		IdReference is mandatory for all transactions that involve
		electronic payments. It is optional only for non-electronic
		forms of payments, such as, 'check', 'draft' etc.
		
		The bank account identification is specified as follows:
		bankAccountID   : Domestic account number
		ibanID          : IBAN ID (International Bank Account Number) as
		specified in ISO 13616.
		
		The bank identification is specified as follows:
		abaRoutingNumber: ABA (American Banking Association)
		Routing Number)
		swiftID         : SWIFT ID (Society for Worldwide Interbank Financial
		Telecommunications)
		chipsID         : CHIPS ID (Clearing House Interbank Payment System)
		isoBicID        : ISO BIC ID (Bank Identifier Code) as specified
		in ISO 9362.
		The Bank Identifier Code (BIC) is a
		universal method of identifying
		financial institutions. The BIC consists
		of 8 or 11 characters, comprising a bank
		code (4 characters), a country code (2
		characters), a location code (2
		characters) and an optional branch code
		(3 characters).
		
		bankNationalID : If none of the above bank identification
		methods are applicable, then use this to
		specify national clearing codes that are
		specific to a country. This identification
		if used, should uniquely identify
		the bank within the country specified in the
		Contact.
		
		
		The bank branch identification, if necessary, is specified as follows:
		bankBranchID    : The bank branch ID
		
		The following table illustrates some valid combinations of
		Contact and IdReference domains:
		+..............................+.....................................+
		| Contact@role                 | IdReference@domain                  |
		+..............................+.....................................+
		| payer                        | bankAccountID, ibanID               |
		|                              |                                     |
		| payee                        | bankAccountID, ibanID               |
		| receivingCorrespondent       | bankAccountId, swiftID              |        
		|                              |                                     |
		| originatingBank              | abaRoutingNumber, bankNationalID,   |
		|                              | isoBicID, swiftID,                  |
		|                              | bankBranchID (optional)             |
		|                              |                                     |
		| receivingBank                | abaRoutingNumber, bankNationalID,   |
		|                              | isoBicID, swiftID,                  |
		|                              | bankBranchID (optional)             |
		|                              |                                     |
		| originatingCorrespondentBank | abaRoutingNumber, isoBicID, swiftID |
		|                              |                                     |
		| receivingCorrespondentBank   | abaRoutingNumber, isoBicID, swiftID |
		|                              |                                     |
		| intermediaryBank             | abaRoutingNumber, isoBicID, swiftID |
		+..............................+.....................................+
		
		PCard
		PCard information including pcard number, pcard expiration date,
		pcard name.IdReference
		
		This can only appear for the Contact with payer role. This is used
		when the payment is done through a pcard.
	-->
	<xs:element name="PaymentPartner">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Contact" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="IdReference" />
				<xs:element minOccurs="0" ref="PCard" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		For cXML license agreement information, please see
		http://www.cxml.org/home/license.asp
		
		$Id: //ariba/cxml/schema/Modules/Organization.mod#2 $
	-->
	<!-- Organization -->
	<xs:element name="Organization">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Name" />
				<xs:element maxOccurs="unbounded" ref="Credential" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="OrganizationRole" />
				<xs:element ref="Address" />
				<xs:element minOccurs="0" ref="CorporateInformation" />
				<xs:element minOccurs="0" ref="TaxInformation" />
				<xs:element minOccurs="0" ref="RelationshipInformation" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="Description" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="Person" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="Industry" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="Commodity" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="Territory" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="PaymentInformation" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="Extrinsic" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		====
		OrganizationDataRequest - Get data about an organization (or multiple
		organizations).
		
		The OrganizationID wrapper is used to distinguish between requests
		about multiple organizations and requests including alias Credentials
		for the same organization.
		====
	-->
	<xs:element name="OrganizationDataRequest"
		substitutionGroup="cxml.requests">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" ref="OrganizationID" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		OrganizationDataResponse
		
		Extrinsic elements will be used to pass data about an Org that is not
		already represented by the Organization element.
	-->
	<xs:element name="OrganizationDataResponse">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" ref="Organization" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!-- Used to push organization information to another system. -->
	<xs:element name="OrganizationChangeMessage"
		substitutionGroup="cxml.messages">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" ref="Organization" />
			</xs:sequence>
			<xs:attribute name="type" use="required">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="new" />
						<xs:enumeration value="update" />
						<xs:enumeration value="delete" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="CorporateInformation">
		<xs:complexType>
			<xs:sequence>
				<xs:element minOccurs="0" ref="AnnualRevenue" />
				<xs:element minOccurs="0" ref="StateOfIncorporation" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="OwnershipType" />
			</xs:sequence>
			<xs:attribute name="yearFounded" type="uint" />
			<xs:attribute name="numberOfEmployees" type="uint" />
			<xs:attribute name="organizationType" type="xs:NMTOKEN" />
		</xs:complexType>
	</xs:element>
	<xs:element name="StateOfIncorporation">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="State" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="AnnualRevenue">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="MinAmount" />
				<xs:element minOccurs="0" ref="MaxAmount" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="OwnershipType">
		<xs:complexType>
			<xs:sequence>
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="Extrinsic" />
			</xs:sequence>
			<xs:attribute name="name" use="required" type="xs:NMTOKEN" />
		</xs:complexType>
	</xs:element>
	<!--
		name can be either minorityOwned, womanOwned, veteranOwned, disabledVeteranOwned,
		vietnamVeteranOwned for US companies.
		The list is not enumerated since it can be different for different countries.
	-->
	<!--
		TaxInformation
		
		Used to list the associated tax information that for example can be
		used for 1099 purposes.
	-->
	<xs:element name="TaxInformation">
		<xs:complexType>
			<xs:sequence>
				<xs:element minOccurs="0" ref="LegalName" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="TaxID" />
			</xs:sequence>
			<xs:attribute name="isExemptFromBackupWithholding">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="yes" />
						<xs:enumeration value="no" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<!-- Owner of ssn or tin -->
	<xs:element name="LegalName">
		<xs:complexType mixed="true">
			<xs:attribute ref="lang" use="required" />
		</xs:complexType>
	</xs:element>
	<!--
		This contains the actual tin or ssn number. Domain specifies
		whether it is us social security number or us tax identification
		number.
	-->
	<xs:element name="TaxID">
		<xs:complexType mixed="true">
			<xs:attribute name="domain" use="required">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="usSSN" />
						<xs:enumeration value="usTIN" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<!--
		This section contains anything that is specific between the
		requester and requestee
	-->
	<xs:element name="RelationshipInformation">
		<xs:complexType>
			<xs:sequence>
				<xs:element minOccurs="0"
					ref="PaymentRelationshipInformation" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		This section contains payment information between requester and 
		requestee. 
	-->
	<xs:element name="PaymentRelationshipInformation">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded"
					ref="PaymentProviderInformation" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="Extrinsic" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		This section contains information about the payment provider who is 
		going to execute payment between the requester and the requestee. 
		It has the id of the payment provider payment service as well as 
		the payment methods that the payment provider supports. 
	-->
	<xs:element name="PaymentProviderInformation">
		<xs:complexType>
			<xs:sequence>
				<xs:element minOccurs="0" ref="Description" />
				<xs:element maxOccurs="unbounded" ref="PaymentMethod" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="Extrinsic" />
			</xs:sequence>
			<xs:attribute name="paymentProviderID" use="required"
				type="string" />
		</xs:complexType>
	</xs:element>
	<!--
		Person associates a particular individual with the (many) roles they may
		play on behalf of an organization.
		
		Note: The Contact element in this context would not include a role
		attribute since this does not describe a person acting in any particular
		fashion.
	-->
	<xs:element name="Person">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Contact" />
				<xs:element maxOccurs="unbounded" ref="PersonRole" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="IdReference" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="Extrinsic" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		PersonRole
		
		Used to list the possible values the Contact@role attribute may take
		when the associated Contact appears in a cXML Request (such as
		ProviderSetupRequest).
	-->
	<xs:element name="PersonRole">
		<xs:complexType>
			<xs:attribute name="name" use="required" type="xs:NMTOKEN" />
		</xs:complexType>
	</xs:element>
	<xs:element name="Industry">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Classification" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="Commodity">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Classification" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="Territory">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Classification" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="PaymentInformation">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded"
					ref="PaymentMethodRemittanceInformation" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="PaymentMethodRemittanceInformation">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Contact" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="PaymentMethod" />
				<xs:element minOccurs="0" maxOccurs="unbounded"
					ref="PaymentMethodPartner" />
			</xs:sequence>
			<xs:attribute name="isDefault">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="yes" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="preferredPaymentMethod"
				type="cxml.paymentMethod" />
		</xs:complexType>
	</xs:element>
	<!--
		This new tag helps to include the financial information of an organization into the 
		PaymentMethodRemittance tag.
		Also, for IdReference tag, we add a new domain receivingCorrspondent.  This new role 
		behaves as the payee for receiving correspondent bank.  We need this new role because 
		in the wire transfer case, the receiving party could have up to two banks: beneficiary 
		and corresponding banks.  Hence,  payee role is needed to contain the information about 
		beneficiary bank account and receivingBank role is needed to contain the information 
		about the beneficiary bank.  Similary, for the receiving correspondent bank, we have the 
		roles receivingCorresondent and receivingCorrespondentBank
		
	-->
	<xs:element name="PaymentMethodPartner">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="PaymentMethod" />
				<xs:element maxOccurs="unbounded" ref="PaymentPartner" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		For cXML license agreement information, please see
		http://www.cxml.org/home/license.asp
		
		$Id: //ariba/cxml/schema/Modules/OrganizationID.mod#1 $
	-->
	<!--
		OrganizationID
		
		Credentials listed here describe the same organization.  May include
		type="marketplace" Credential elements if that context is necessary.
	-->
	<xs:element name="OrganizationID">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" ref="Credential" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		For cXML license agreement information, please see
		http://www.cxml.org/home/license.asp
		
		$Id: //ariba/cxml/schema/Modules/OrganizationPrivate.mod#1 $
	-->
	<!--
		OrganizationRole - Identifies one of the roles this (new) organization
		is playing.
		
		name
		Name of the role played by the organization.  Common values
		include "supplier" and "buyer".
	-->
	<xs:element name="OrganizationRole">
		<xs:complexType>
			<xs:attribute name="name" use="required" type="xs:NMTOKEN" />
		</xs:complexType>
	</xs:element>
	<!--
		For cXML license agreement information, please see
		http://www.cxml.org/home/license.asp
		
		$Id: //ariba/cxml/Modules/Profile.mod#6 $
	-->
	<!--
		For more information about W3C XML signatures, refer to the
		following URL.  Portions of this DTD are derived from information
		contained therein.
		http://www.w3.org/TR/xmldsig-core/
	-->
	<!--
		DTD for XML Signatures
		http://www.w3.org/2000/09/xmldsig#
		Joseph Reagle $last changed 20001215$
		
		http://www.w3.org/2000/09/xmldsig#
		$Revision: 1.1 $ on $Date: 2002/02/08 20:32:26 $ by $Author: reagle $
		
		Copyright 2001 The Internet Society and W3C (Massachusetts Institute
		of Technology, Institut National de Recherche en Informatique et en
		Automatique, Keio University). All Rights Reserved.
		http://www.w3.org/Consortium/Legal/
		
		This document is governed by the W3C Software License [1] as described
		in the FAQ [2].
		
		[1] http://www.w3.org/Consortium/Legal/copyright-software-19980720
		[2] http://www.w3.org/Consortium/Legal/IPR-FAQ-20000620.html#DTD
	-->
	<!--
		
		The following entity declarations enable external/flexible content in
		the Signature content model.
		
		#PCDATA emulates schema string; when combined with element types it
		emulates schema's mixed content type.
		
		%foo.ANY permits the user to include their own element types from
		other namespaces, for example:
		<!ENTITY % KeyValue.ANY '| ecds:ECDSAKeyValue'>
		...
		<!ELEMENT ecds:ECDSAKeyValue (#PCDATA)  >
		
	-->
	<xs:element name="Object.ANY" abstract="true" />
	<!-- Start Core Signature declarations, these should NOT be altered -->
	<!-- Key Information -->
	<!-- X.509 Data -->
	<!-- PGPData -->
	<!-- SPKI Data -->
	<xs:complexType name="ds.SPKISexp.element">
		<xs:sequence>
			<xs:element ref="SPKISexp" />
		</xs:sequence>
	</xs:complexType>
	<!-- Extensible Content -->
	<!-- Algorithm Parameters -->
	<!--
		For cXML license agreement information, please see
		http://www.cxml.org/home/license.asp
		
		$Id: //ariba/cxml/Modules/Profile.mod#6 $
	-->
	<!--
		For more information about XAdES, refer to the following URL.
		Portions of this DTD are derived from information contained therein.
		http://uri.etsi.org/01903/v1.3.2#
	-->
	<!-- Start Any -->
	<!-- End Any -->
	<!-- Start ObjectIdentifier -->
	<!-- End ObjectIdentifier -->
	<!-- Start EncapsulatedPKIData -->
	<!-- End EncapsulatedPKIData -->
	<!-- Start time-stamp container types -->
	<!-- End time-stamp tokens container -->
	<!-- Start container types -->
	<!-- Start QualifyingProperties -->
	<!-- End QualifyingProperties -->
	<!--
		Start SignedSignatureProperties, SignedDataObjectProperties, 
		UnsignedSignatureProperties, UnsignedDataObjectProperties
	-->
	<!--
		End SignedSignatureProperties, SignedDataObjectProperties, 
		UnsignedSignatureProperties, UnsignedDataObjectProperties
	-->
	<!-- Start QualifyingPropertiesReference -->
	<!-- End QualifyingPropertiesReference -->
	<!-- End container types -->
	<!-- Start SigningTime -->
	<!-- End SigningTime -->
	<!-- Start SigningCertificate -->
	<!-- End SigningCertificate -->
	<!-- Start SignaturePolicyIdentifier -->
	<!-- End SignaturePolicyIdentifier -->
	<!-- Start SPURI and SPUserNotice -->
	<!-- End SPURI and SPUserNotice -->
	<!-- Start CounterSignature -->
	<!-- End CounterSignature -->
	<!-- Start DataObjectFormat -->
	<!-- End DataObjectFormat -->
	<!-- Start CommitmentTypeIndication -->
	<!-- End CommitmentTypeIndication -->
	<!-- Start SignatureProductionPlace -->
	<!-- End SignatureProductionPlace -->
	<!-- Start SignerRole -->
	<!-- End SignerRole -->
	<!--
		Start AllDataObjectsTimeStamp, IndividualDataObjectsTimeStamp, 
		SignatureTimeStamp
	-->
	<!--
		End AllDataObjectsTimeStamp, IndividualDataObjectsTimeStamp, 
		SignatureTimeStamp
	-->
	<!-- Start CompleteCertificateRefs -->
	<xs:complexType name="xades.CertRefs.element">
		<xs:sequence>
			<xs:element ref="CertRefs" />
		</xs:sequence>
	</xs:complexType>
	<!-- End CompleteCertificateRefs -->
	<!-- Start AttributeCertificateRefs -->
	<!-- End AttributeCertificateRefs -->
	<!-- Start CompleteRevocationRefs -->
	<!-- End CompleteRevocationRefs -->
	<!-- Start AttributeRevocationRefs -->
	<!-- End AttributeRevocationRefs -->
	<!-- Start SigAndRefsTimeStamp, RefsOnlyTimeStamp -->
	<!-- End SigAndRefsTimeStamp, RefsOnlyTimeStamp -->
	<!-- Start CertificateValues -->
	<!-- Start RevocationValues -->
	<!-- End RevocationValues -->
	<!-- Start ArchiveTimeStamp -->
	<xs:complexType name="any" mixed="true">
		<xs:sequence>
			<xs:any minOccurs="0" maxOccurs="unbounded"
				processContents="strict" />
		</xs:sequence>
	</xs:complexType>
	<!-- DS Schema from ds.xsd -->
	<xs:element name="Signature">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="SignedInfo"/>
        <xs:element ref="SignatureValue"/>
        <xs:element minOccurs="0" ref="KeyInfo"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="Object"/>
      </xs:sequence>
      <xs:attribute name="Id" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="SignatureValue">
    <xs:complexType mixed="true">
      <xs:attribute name="Id" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="SignedInfo">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="CanonicalizationMethod"/>
        <xs:element ref="SignatureMethod"/>
        <xs:element maxOccurs="unbounded" ref="Reference"/>
      </xs:sequence>
      <xs:attribute name="Id" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="CanonicalizationMethod">
    <xs:complexType mixed="true">
      <xs:attribute name="Algorithm" use="required"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="SignatureMethod">
    <xs:complexType mixed="true">
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="HMACOutputLength"/>
      </xs:sequence>
      <xs:attribute name="Algorithm" use="required"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="Reference">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="Transforms"/>
        <xs:element ref="DigestMethod"/>
        <xs:element ref="DigestValue"/>
      </xs:sequence>
      <xs:attribute name="Id" type="xs:ID"/>
      <xs:attribute name="URI"/>
      <xs:attribute name="Type"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="Transforms">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="Transform"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="Transform">
    <xs:complexType mixed="true">
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="XPath"/>
      </xs:sequence>
      <xs:attribute name="Algorithm" use="required"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="XPath" type="xs:string"/>
  <xs:element name="DigestMethod">
    <xs:complexType mixed="true">
      <xs:attribute name="Algorithm" use="required"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="DigestValue" type="xs:string"/>
  <xs:element name="KeyInfo">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="KeyName"/>
        <xs:element ref="KeyValue"/>
        <xs:element ref="RetrievalMethod"/>
        <xs:element ref="X509Data"/>
        <xs:element ref="PGPData"/>
        <xs:element ref="SPKIData"/>
        <xs:element ref="MgmtData"/>
      </xs:choice>
      <xs:attribute name="Id" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="KeyName" type="xs:string"/>
  <xs:element name="KeyValue">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="DSAKeyValue"/>
        <xs:element ref="RSAKeyValue"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <xs:element name="MgmtData" type="xs:string"/>
  <xs:element name="RetrievalMethod">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="Transforms"/>
      </xs:sequence>
      <xs:attribute name="URI" use="required"/>
      <xs:attribute name="Type"/>
    </xs:complexType>
  </xs:element>  
  <xs:element name="PGPData">
    <xs:complexType>
      <xs:choice>
        <xs:sequence>
          <xs:element ref="PGPKeyID"/>
          <xs:element minOccurs="0" ref="PGPKeyPacket"/>
        </xs:sequence>
        <xs:element ref="PGPKeyPacket"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <xs:element name="PGPKeyPacket" type="xs:string"/>
  <xs:element name="PGPKeyID" type="xs:string"/>
  <xs:element name="SPKIData" type="ds.SPKISexp.element"/>
  <xs:element name="SPKISexp" type="xs:string"/>
  <xs:element name="Object">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="Signature"/>
        <xs:element ref="SignatureProperties"/>
        <xs:element ref="Manifest"/>
        <xs:element ref="Object.ANY"/>
      </xs:choice>
      <xs:attribute name="Id" type="xs:ID"/>
      <xs:attribute name="MimeType"/>
      <xs:attribute name="Encoding"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="Manifest">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="Reference"/>
      </xs:sequence>
      <xs:attribute name="Id" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="SignatureProperties">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="SignatureProperty"/>
      </xs:sequence>
      <xs:attribute name="Id" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="SignatureProperty">
    <xs:complexType mixed="true">
      <xs:attribute name="Target" use="required"/>
      <xs:attribute name="Id" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="HMACOutputLength" type="xs:string"/>
  <xs:element name="DSAKeyValue">
    <xs:complexType>
      <xs:sequence>
        <xs:sequence minOccurs="0">
          <xs:element ref="P"/>
          <xs:element ref="Q"/>
        </xs:sequence>
        <xs:element minOccurs="0" ref="G"/>
        <xs:element ref="Y"/>
        <xs:element minOccurs="0" ref="J"/>
        <xs:sequence minOccurs="0">
          <xs:element ref="Seed"/>
          <xs:element ref="PgenCounter"/>
        </xs:sequence>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="P" type="xs:string"/>
  <xs:element name="Q" type="xs:string"/>
  <xs:element name="G" type="xs:string"/>
  <xs:element name="Y" type="xs:string"/>
  <xs:element name="J" type="xs:string"/>
  <xs:element name="Seed" type="xs:string"/>
  <xs:element name="PgenCounter" type="xs:string"/>
  <xs:element name="RSAKeyValue">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="Modulus"/>
        <xs:element ref="Exponent"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="Modulus" type="xs:string"/>
  <xs:element name="Exponent" type="xs:string"/>
  <!-- from xades.xsd -->
    <xs:element name="Any" type="xs:string"/>
  <xs:element name="ObjectIdentifier">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="Identifier"/>
        <xs:element minOccurs="0" ref="Description"/>
        <xs:element minOccurs="0" ref="DocumentationReferences"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="Identifier">
    <xs:complexType mixed="true">
      <xs:attribute name="Qualifier">
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="OIDAsURI"/>
            <xs:enumeration value="OIDAsURN"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="DocumentationReferences">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="DocumentationReference"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="DocumentationReference" type="xs:string"/>
  <xs:element name="EncapsulatedPKIData">
    <xs:complexType mixed="true">
      <xs:attribute name="Id" type="xs:ID"/>
      <xs:attribute name="Encoding"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="Include">
    <xs:complexType>
      <xs:attribute name="URI" use="required"/>
      <xs:attribute name="referencedData"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="ReferenceInfo">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="DigestMethod"/>
        <xs:element ref="DigestValue"/>
      </xs:sequence>
      <xs:attribute name="Id" type="xs:ID"/>
      <xs:attribute name="URI"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="XAdESTimeStamp">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="Include"/>
        <xs:element minOccurs="0" ref="CanonicalizationMethod"/>
        <xs:choice maxOccurs="unbounded">
          <xs:element ref="EncapsulatedTimeStamp"/>
          <xs:element ref="XMLTimeStamp"/>
        </xs:choice>
      </xs:sequence>
      <xs:attribute name="Id" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="OtherTimeStamp">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="ReferenceInfo"/>
        <xs:element minOccurs="0" ref="CanonicalizationMethod"/>
        <xs:choice>
          <xs:element ref="EncapsulatedTimeStamp"/>
          <xs:element ref="XMLTimeStamp"/>
        </xs:choice>
      </xs:sequence>
      <xs:attribute name="Id" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="EncapsulatedTimeStamp">
    <xs:complexType mixed="true">
      <xs:attribute name="Id" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="XMLTimeStamp" type="xs:string"/>
  <xs:element name="QualifyingProperties" substitutionGroup="Object.ANY">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="SignedProperties"/>
        <xs:element minOccurs="0" ref="UnsignedProperties"/>
      </xs:sequence>
      <xs:attribute name="Target" use="required"/>
      <xs:attribute name="Id" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="SignedProperties">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="SignedSignatureProperties"/>
        <xs:element minOccurs="0" ref="SignedDataObjectProperties"/>
      </xs:sequence>
      <xs:attribute name="Id" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="UnsignedProperties">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="UnsignedSignatureProperties"/>
        <xs:element minOccurs="0" ref="UnsignedDataObjectProperties"/>
      </xs:sequence>
      <xs:attribute name="Id" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="SignedSignatureProperties">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="SigningTime"/>
        <xs:element minOccurs="0" ref="SigningCertificate"/>
        <xs:element minOccurs="0" ref="SignaturePolicyIdentifier"/>
        <xs:element minOccurs="0" ref="SignatureProductionPlace"/>
        <xs:element minOccurs="0" ref="SignerRole"/>
      </xs:sequence>
      <xs:attribute name="Id" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="SignedDataObjectProperties">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="DataObjectFormat"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="CommitmentTypeIndication"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="AllDataObjectsTimeStamp"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="IndividualDataObjectsTimeStamp"/>
      </xs:sequence>
      <xs:attribute name="Id" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="UnsignedSignatureProperties">
    <xs:complexType>
      <xs:choice maxOccurs="unbounded">
        <xs:element ref="CounterSignature"/>
        <xs:element ref="SignatureTimeStamp"/>
        <xs:element ref="CompleteCertificateRefs"/>
        <xs:element ref="CompleteRevocationRefs"/>
        <xs:element ref="AttributeCertificateRefs"/>
        <xs:element ref="AttributeRevocationRefs"/>
        <xs:choice>
          <xs:element ref="SigAndRefsTimeStamp"/>
          <xs:element ref="RefsOnlyTimeStamp"/>
        </xs:choice>
        <xs:element ref="CertificateValues"/>
        <xs:element ref="RevocationValues"/>
        <xs:element ref="AttrAuthoritiesCertValues"/>
        <xs:element ref="AttributeRevocationValues"/>
        <xs:element ref="ArchiveTimeStamp"/>
      </xs:choice>
      <xs:attribute name="Id" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="UnsignedDataObjectProperties">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="UnsignedDataObjectProperty"/>
      </xs:sequence>
      <xs:attribute name="Id" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="UnsignedDataObjectProperty" type="xs:string"/>
  <xs:element name="QualifyingPropertiesReference">
    <xs:complexType>
      <xs:attribute name="URI" use="required"/>
      <xs:attribute name="Id" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="SigningTime" type="xs:string"/>
  <xs:element name="SigningCertificate">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="Cert"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="Cert">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="CertDigest"/>
        <xs:element ref="IssuerSerial"/>
      </xs:sequence>
      <xs:attribute name="URI"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="CertDigest">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="DigestMethod"/>
        <xs:element ref="DigestValue"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="IssuerSerial">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="X509IssuerName"/>
        <xs:element ref="X509SerialNumber"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="SignaturePolicyIdentifier">
    <xs:complexType>
      <xs:choice>
        <xs:element ref="SignaturePolicyId"/>
        <xs:element ref="SignaturePolicyImplied"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <xs:element name="SignaturePolicyImplied" type="any"/>
  <xs:element name="SignaturePolicyId">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="SigPolicyId"/>
        <xs:element minOccurs="0" ref="Transforms"/>
        <xs:element ref="SigPolicyHash"/>
        <xs:element minOccurs="0" ref="SigPolicyQualifiers"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="SigPolicyId">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="Identifier"/>
        <xs:element minOccurs="0" ref="Description"/>
        <xs:element minOccurs="0" ref="DocumentationReferences"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="SigPolicyHash">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="DigestMethod"/>
        <xs:element ref="DigestValue"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="SigPolicyQualifiers">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="SigPolicyQualifier"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="SigPolicyQualifier">
    <xs:complexType mixed="true">
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="SPURI"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="SPURI" type="xs:string"/>
  <xs:element name="SPUserNotice">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="NoticeRef"/>
        <xs:element minOccurs="0" ref="ExplicitText"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="NoticeRef">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="Organization"/>
        <xs:element ref="NoticeNumbers"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="ExplicitText" type="xs:string"/>
  <xs:element name="NoticeNumbers">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="int"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="int" type="xs:string"/>
  <xs:element name="CounterSignature">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="Signature"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="DataObjectFormat">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="Description"/>
        <xs:element minOccurs="0" ref="ObjectIdentifier"/>
        <xs:element minOccurs="0" ref="MimeType"/>
        <xs:element minOccurs="0" ref="Encoding"/>
      </xs:sequence>
      <xs:attribute name="ObjectReference" use="required"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="MimeType" type="xs:string"/>
  <xs:element name="Encoding" type="xs:string"/>
  <xs:element name="CommitmentTypeIndication">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="CommitmentTypeId"/>
        <xs:choice>
          <xs:element maxOccurs="unbounded" ref="ObjectReference"/>
          <xs:element ref="AllSignedDataObjects"/>
        </xs:choice>
        <xs:element minOccurs="0" ref="CommitmentTypeQualifiers"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="CommitmentTypeId">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="Identifier"/>
        <xs:element minOccurs="0" ref="Description"/>
        <xs:element minOccurs="0" ref="DocumentationReferences"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="ObjectReference" type="xs:string"/>
  <xs:element name="AllSignedDataObjects" type="any"/>
  <xs:element name="CommitmentTypeQualifiers">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="CommitmentTypeQualifier"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="CommitmentTypeQualifier" type="xs:string"/>
  <xs:element name="SignatureProductionPlace">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="City"/>
        <xs:element minOccurs="0" ref="StateOrProvince"/>
        <xs:element minOccurs="0" ref="PostalCode"/>
        <xs:element minOccurs="0" ref="CountryName"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="StateOrProvince" type="xs:string"/>
  <xs:element name="CountryName" type="xs:string"/>
  <xs:element name="SignerRole">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="ClaimedRoles"/>
        <xs:element minOccurs="0" ref="CertifiedRoles"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="ClaimedRoles">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="ClaimedRole"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="CertifiedRoles">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="CertifiedRole"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="ClaimedRole" type="xs:string"/>
  <xs:element name="CertifiedRole">
    <xs:complexType mixed="true">
      <xs:attribute name="Id" type="xs:ID"/>
      <xs:attribute name="Encoding"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="AllDataObjectsTimeStamp">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="CanonicalizationMethod"/>
        <xs:choice maxOccurs="unbounded">
          <xs:element ref="EncapsulatedTimeStamp"/>
          <xs:element ref="XMLTimeStamp"/>
        </xs:choice>
      </xs:sequence>
      <xs:attribute name="Id" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="IndividualDataObjectsTimeStamp">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="Include"/>
        <xs:element minOccurs="0" ref="CanonicalizationMethod"/>
        <xs:choice maxOccurs="unbounded">
          <xs:element ref="EncapsulatedTimeStamp"/>
          <xs:element ref="XMLTimeStamp"/>
        </xs:choice>
      </xs:sequence>
      <xs:attribute name="Id" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="SignatureTimeStamp">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="CanonicalizationMethod"/>
        <xs:choice maxOccurs="unbounded">
          <xs:element ref="EncapsulatedTimeStamp"/>
          <xs:element ref="XMLTimeStamp"/>
        </xs:choice>
      </xs:sequence>
      <xs:attribute name="Id" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="CompleteCertificateRefs">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xades.CertRefs.element">
          <xs:attribute name="Id" type="xs:ID"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="CertRefs">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="Cert"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="AttributeCertificateRefs">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xades.CertRefs.element">
          <xs:attribute name="Id" type="xs:ID"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="CompleteRevocationRefs">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="CRLRefs"/>
        <xs:element minOccurs="0" ref="OCSPRefs"/>
        <xs:element minOccurs="0" ref="OtherRefs"/>
      </xs:sequence>
      <xs:attribute name="Id" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="CRLRefs">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="CRLRef"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="OCSPRefs">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="OCSPRef"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="OtherRefs">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="OtherRef"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="CRLRef">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="DigestAlgAndValue"/>
        <xs:element minOccurs="0" ref="CRLIdentifier"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="OCSPRef">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="OCSPIdentifier"/>
        <xs:element minOccurs="0" ref="DigestAlgAndValue"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="OtherRef" type="xs:string"/>
  <xs:element name="DigestAlgAndValue">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="DigestMethod"/>
        <xs:element ref="DigestValue"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="CRLIdentifier">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="Issuer"/>
        <xs:element ref="IssueTime"/>
        <xs:element minOccurs="0" ref="Number"/>
      </xs:sequence>
      <xs:attribute name="URI"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="OCSPIdentifier">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="ResponderID"/>
        <xs:element ref="ProducedAt"/>
      </xs:sequence>
      <xs:attribute name="URI"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="Issuer" type="xs:string"/>
  <xs:element name="IssueTime" type="xs:string"/>
  <xs:element name="ResponderID">
    <xs:complexType>
      <xs:choice>
        <xs:element ref="ByName"/>
        <xs:element ref="ByKey"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <xs:element name="ByName" type="xs:string"/>
  <xs:element name="ByKey" type="xs:string"/>
  <xs:element name="ProducedAt" type="xs:string"/>
  <xs:element name="AttributeRevocationRefs">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="CRLRefs"/>
        <xs:element minOccurs="0" ref="OCSPRefs"/>
        <xs:element minOccurs="0" ref="OtherRefs"/>
      </xs:sequence>
      <xs:attribute name="Id" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="SigAndRefsTimeStamp">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="Include"/>
        <xs:element minOccurs="0" ref="CanonicalizationMethod"/>
        <xs:choice maxOccurs="unbounded">
          <xs:element ref="EncapsulatedTimeStamp"/>
          <xs:element ref="XMLTimeStamp"/>
        </xs:choice>
      </xs:sequence>
      <xs:attribute name="Id" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="RefsOnlyTimeStamp">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="Include"/>
        <xs:element minOccurs="0" ref="CanonicalizationMethod"/>
        <xs:choice maxOccurs="unbounded">
          <xs:element ref="EncapsulatedTimeStamp"/>
          <xs:element ref="XMLTimeStamp"/>
        </xs:choice>
      </xs:sequence>
      <xs:attribute name="Id" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="CertificateValues">
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="EncapsulatedX509Certificate"/>
        <xs:element ref="OtherCertificate"/>
      </xs:choice>
      <xs:attribute name="Id" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="EncapsulatedX509Certificate">
    <xs:complexType mixed="true">
      <xs:attribute name="Id" type="xs:ID"/>
      <xs:attribute name="Encoding"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="OtherCertificate" type="xs:string"/>
  <xs:element name="AttrAuthoritiesCertValues">
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="EncapsulatedX509Certificate"/>
        <xs:element ref="OtherCertificate"/>
      </xs:choice>
      <xs:attribute name="Id" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="RevocationValues">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="CRLValues"/>
        <xs:element minOccurs="0" ref="OCSPValues"/>
        <xs:element minOccurs="0" ref="OtherValues"/>
      </xs:sequence>
      <xs:attribute name="Id" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="CRLValues">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="EncapsulatedCRLValue"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="OCSPValues">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="EncapsulatedOCSPValue"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="OtherValues">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="OtherValue"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="EncapsulatedCRLValue">
    <xs:complexType mixed="true">
      <xs:attribute name="Id" type="xs:ID"/>
      <xs:attribute name="Encoding"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="EncapsulatedOCSPValue">
    <xs:complexType mixed="true">
      <xs:attribute name="Id" type="xs:ID"/>
      <xs:attribute name="Encoding"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="OtherValue" type="xs:string"/>
  <xs:element name="AttributeRevocationValues">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="CRLValues"/>
        <xs:element minOccurs="0" ref="OCSPValues"/>
        <xs:element minOccurs="0" ref="OtherValues"/>
      </xs:sequence>
      <xs:attribute name="Id" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="ArchiveTimeStamp">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="Include"/>
        <xs:element minOccurs="0" ref="CanonicalizationMethod"/>
        <xs:choice maxOccurs="unbounded">
          <xs:element ref="EncapsulatedTimeStamp"/>
          <xs:element ref="XMLTimeStamp"/>
        </xs:choice>
      </xs:sequence>
      <xs:attribute name="Id" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <xs:attribute name="lang" type="xmlLangCode"/>
</xs:schema>
<!-- End ArchiveTimeStamp -->
